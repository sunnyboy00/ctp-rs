/* automatically generated by rust-bindgen 0.58.1 */

pub const THOST_FTDC_EXP_Normal: u8 = 48u8;
pub const THOST_FTDC_EXP_GenOrderByTrade: u8 = 49u8;
pub const THOST_FTDC_ICT_EID: u8 = 48u8;
pub const THOST_FTDC_ICT_IDCard: u8 = 49u8;
pub const THOST_FTDC_ICT_OfficerIDCard: u8 = 50u8;
pub const THOST_FTDC_ICT_PoliceIDCard: u8 = 51u8;
pub const THOST_FTDC_ICT_SoldierIDCard: u8 = 52u8;
pub const THOST_FTDC_ICT_HouseholdRegister: u8 = 53u8;
pub const THOST_FTDC_ICT_Passport: u8 = 54u8;
pub const THOST_FTDC_ICT_TaiwanCompatriotIDCard: u8 = 55u8;
pub const THOST_FTDC_ICT_HomeComingCard: u8 = 56u8;
pub const THOST_FTDC_ICT_LicenseNo: u8 = 57u8;
pub const THOST_FTDC_ICT_TaxNo: u8 = 65u8;
pub const THOST_FTDC_ICT_HMMainlandTravelPermit: u8 = 66u8;
pub const THOST_FTDC_ICT_TwMainlandTravelPermit: u8 = 67u8;
pub const THOST_FTDC_ICT_DrivingLicense: u8 = 68u8;
pub const THOST_FTDC_ICT_SocialID: u8 = 70u8;
pub const THOST_FTDC_ICT_LocalID: u8 = 71u8;
pub const THOST_FTDC_ICT_BusinessRegistration: u8 = 72u8;
pub const THOST_FTDC_ICT_HKMCIDCard: u8 = 73u8;
pub const THOST_FTDC_ICT_AccountsPermits: u8 = 74u8;
pub const THOST_FTDC_ICT_FrgPrmtRdCard: u8 = 75u8;
pub const THOST_FTDC_ICT_CptMngPrdLetter: u8 = 76u8;
pub const THOST_FTDC_ICT_UniformSocialCreditCode: u8 = 78u8;
pub const THOST_FTDC_ICT_CorporationCertNo: u8 = 79u8;
pub const THOST_FTDC_ICT_OtherCard: u8 = 120u8;
pub const THOST_FTDC_IR_All: u8 = 49u8;
pub const THOST_FTDC_IR_Group: u8 = 50u8;
pub const THOST_FTDC_IR_Single: u8 = 51u8;
pub const THOST_FTDC_DR_All: u8 = 49u8;
pub const THOST_FTDC_DR_Group: u8 = 50u8;
pub const THOST_FTDC_DR_Single: u8 = 51u8;
pub const THOST_FTDC_DS_Asynchronous: u8 = 49u8;
pub const THOST_FTDC_DS_Synchronizing: u8 = 50u8;
pub const THOST_FTDC_DS_Synchronized: u8 = 51u8;
pub const THOST_FTDC_BDS_Synchronized: u8 = 49u8;
pub const THOST_FTDC_BDS_Synchronizing: u8 = 50u8;
pub const THOST_FTDC_ECS_NoConnection: u8 = 49u8;
pub const THOST_FTDC_ECS_QryInstrumentSent: u8 = 50u8;
pub const THOST_FTDC_ECS_GotInformation: u8 = 57u8;
pub const THOST_FTDC_TCS_NotConnected: u8 = 49u8;
pub const THOST_FTDC_TCS_Connected: u8 = 50u8;
pub const THOST_FTDC_TCS_QryInstrumentSent: u8 = 51u8;
pub const THOST_FTDC_TCS_SubPrivateFlow: u8 = 52u8;
pub const THOST_FTDC_FC_DataAsync: u8 = 49u8;
pub const THOST_FTDC_FC_ForceUserLogout: u8 = 50u8;
pub const THOST_FTDC_FC_UserPasswordUpdate: u8 = 51u8;
pub const THOST_FTDC_FC_BrokerPasswordUpdate: u8 = 52u8;
pub const THOST_FTDC_FC_InvestorPasswordUpdate: u8 = 53u8;
pub const THOST_FTDC_FC_OrderInsert: u8 = 54u8;
pub const THOST_FTDC_FC_OrderAction: u8 = 55u8;
pub const THOST_FTDC_FC_SyncSystemData: u8 = 56u8;
pub const THOST_FTDC_FC_SyncBrokerData: u8 = 57u8;
pub const THOST_FTDC_FC_BachSyncBrokerData: u8 = 65u8;
pub const THOST_FTDC_FC_SuperQuery: u8 = 66u8;
pub const THOST_FTDC_FC_ParkedOrderInsert: u8 = 67u8;
pub const THOST_FTDC_FC_ParkedOrderAction: u8 = 68u8;
pub const THOST_FTDC_FC_SyncOTP: u8 = 69u8;
pub const THOST_FTDC_FC_DeleteOrder: u8 = 70u8;
pub const THOST_FTDC_BFC_ForceUserLogout: u8 = 49u8;
pub const THOST_FTDC_BFC_UserPasswordUpdate: u8 = 50u8;
pub const THOST_FTDC_BFC_SyncBrokerData: u8 = 51u8;
pub const THOST_FTDC_BFC_BachSyncBrokerData: u8 = 52u8;
pub const THOST_FTDC_BFC_OrderInsert: u8 = 53u8;
pub const THOST_FTDC_BFC_OrderAction: u8 = 54u8;
pub const THOST_FTDC_BFC_AllQuery: u8 = 55u8;
pub const THOST_FTDC_BFC_log: u8 = 97u8;
pub const THOST_FTDC_BFC_BaseQry: u8 = 98u8;
pub const THOST_FTDC_BFC_TradeQry: u8 = 99u8;
pub const THOST_FTDC_BFC_Trade: u8 = 100u8;
pub const THOST_FTDC_BFC_Virement: u8 = 101u8;
pub const THOST_FTDC_BFC_Risk: u8 = 102u8;
pub const THOST_FTDC_BFC_Session: u8 = 103u8;
pub const THOST_FTDC_BFC_RiskNoticeCtl: u8 = 104u8;
pub const THOST_FTDC_BFC_RiskNotice: u8 = 105u8;
pub const THOST_FTDC_BFC_BrokerDeposit: u8 = 106u8;
pub const THOST_FTDC_BFC_QueryFund: u8 = 107u8;
pub const THOST_FTDC_BFC_QueryOrder: u8 = 108u8;
pub const THOST_FTDC_BFC_QueryTrade: u8 = 109u8;
pub const THOST_FTDC_BFC_QueryPosition: u8 = 110u8;
pub const THOST_FTDC_BFC_QueryMarketData: u8 = 111u8;
pub const THOST_FTDC_BFC_QueryUserEvent: u8 = 112u8;
pub const THOST_FTDC_BFC_QueryRiskNotify: u8 = 113u8;
pub const THOST_FTDC_BFC_QueryFundChange: u8 = 114u8;
pub const THOST_FTDC_BFC_QueryInvestor: u8 = 115u8;
pub const THOST_FTDC_BFC_QueryTradingCode: u8 = 116u8;
pub const THOST_FTDC_BFC_ForceClose: u8 = 117u8;
pub const THOST_FTDC_BFC_PressTest: u8 = 118u8;
pub const THOST_FTDC_BFC_RemainCalc: u8 = 119u8;
pub const THOST_FTDC_BFC_NetPositionInd: u8 = 120u8;
pub const THOST_FTDC_BFC_RiskPredict: u8 = 121u8;
pub const THOST_FTDC_BFC_DataExport: u8 = 122u8;
pub const THOST_FTDC_BFC_RiskTargetSetup: u8 = 65u8;
pub const THOST_FTDC_BFC_MarketDataWarn: u8 = 66u8;
pub const THOST_FTDC_BFC_QryBizNotice: u8 = 67u8;
pub const THOST_FTDC_BFC_CfgBizNotice: u8 = 68u8;
pub const THOST_FTDC_BFC_SyncOTP: u8 = 69u8;
pub const THOST_FTDC_BFC_SendBizNotice: u8 = 70u8;
pub const THOST_FTDC_BFC_CfgRiskLevelStd: u8 = 71u8;
pub const THOST_FTDC_BFC_TbCommand: u8 = 72u8;
pub const THOST_FTDC_BFC_DeleteOrder: u8 = 74u8;
pub const THOST_FTDC_BFC_ParkedOrderInsert: u8 = 75u8;
pub const THOST_FTDC_BFC_ParkedOrderAction: u8 = 76u8;
pub const THOST_FTDC_BFC_ExecOrderNoCheck: u8 = 77u8;
pub const THOST_FTDC_BFC_Designate: u8 = 78u8;
pub const THOST_FTDC_BFC_StockDisposal: u8 = 79u8;
pub const THOST_FTDC_BFC_BrokerDepositWarn: u8 = 81u8;
pub const THOST_FTDC_BFC_CoverWarn: u8 = 83u8;
pub const THOST_FTDC_BFC_PreExecOrder: u8 = 84u8;
pub const THOST_FTDC_BFC_ExecOrderRisk: u8 = 80u8;
pub const THOST_FTDC_BFC_PosiLimitWarn: u8 = 85u8;
pub const THOST_FTDC_BFC_QryPosiLimit: u8 = 86u8;
pub const THOST_FTDC_BFC_FBSign: u8 = 87u8;
pub const THOST_FTDC_BFC_FBAccount: u8 = 88u8;
pub const THOST_FTDC_OAS_Submitted: u8 = 97u8;
pub const THOST_FTDC_OAS_Accepted: u8 = 98u8;
pub const THOST_FTDC_OAS_Rejected: u8 = 99u8;
pub const THOST_FTDC_OST_AllTraded: u8 = 48u8;
pub const THOST_FTDC_OST_PartTradedQueueing: u8 = 49u8;
pub const THOST_FTDC_OST_PartTradedNotQueueing: u8 = 50u8;
pub const THOST_FTDC_OST_NoTradeQueueing: u8 = 51u8;
pub const THOST_FTDC_OST_NoTradeNotQueueing: u8 = 52u8;
pub const THOST_FTDC_OST_Canceled: u8 = 53u8;
pub const THOST_FTDC_OST_Unknown: u8 = 97u8;
pub const THOST_FTDC_OST_NotTouched: u8 = 98u8;
pub const THOST_FTDC_OST_Touched: u8 = 99u8;
pub const THOST_FTDC_OSS_InsertSubmitted: u8 = 48u8;
pub const THOST_FTDC_OSS_CancelSubmitted: u8 = 49u8;
pub const THOST_FTDC_OSS_ModifySubmitted: u8 = 50u8;
pub const THOST_FTDC_OSS_Accepted: u8 = 51u8;
pub const THOST_FTDC_OSS_InsertRejected: u8 = 52u8;
pub const THOST_FTDC_OSS_CancelRejected: u8 = 53u8;
pub const THOST_FTDC_OSS_ModifyRejected: u8 = 54u8;
pub const THOST_FTDC_PSD_Today: u8 = 49u8;
pub const THOST_FTDC_PSD_History: u8 = 50u8;
pub const THOST_FTDC_PDT_UseHistory: u8 = 49u8;
pub const THOST_FTDC_PDT_NoUseHistory: u8 = 50u8;
pub const THOST_FTDC_ER_Broker: u8 = 49u8;
pub const THOST_FTDC_ER_Host: u8 = 50u8;
pub const THOST_FTDC_ER_Maker: u8 = 51u8;
pub const THOST_FTDC_PC_Futures: u8 = 49u8;
pub const THOST_FTDC_PC_Options: u8 = 50u8;
pub const THOST_FTDC_PC_Combination: u8 = 51u8;
pub const THOST_FTDC_PC_Spot: u8 = 52u8;
pub const THOST_FTDC_PC_EFP: u8 = 53u8;
pub const THOST_FTDC_PC_SpotOption: u8 = 54u8;
pub const THOST_FTDC_PC_TAS: u8 = 55u8;
pub const THOST_FTDC_PC_MI: u8 = 73u8;
pub const THOST_FTDC_APC_FutureSingle: u8 = 49u8;
pub const THOST_FTDC_APC_OptionSingle: u8 = 50u8;
pub const THOST_FTDC_APC_Futures: u8 = 51u8;
pub const THOST_FTDC_APC_Options: u8 = 52u8;
pub const THOST_FTDC_APC_TradingComb: u8 = 53u8;
pub const THOST_FTDC_APC_UnTradingComb: u8 = 54u8;
pub const THOST_FTDC_APC_AllTrading: u8 = 55u8;
pub const THOST_FTDC_APC_All: u8 = 56u8;
pub const THOST_FTDC_IP_NotStart: u8 = 48u8;
pub const THOST_FTDC_IP_Started: u8 = 49u8;
pub const THOST_FTDC_IP_Pause: u8 = 50u8;
pub const THOST_FTDC_IP_Expired: u8 = 51u8;
pub const THOST_FTDC_D_Buy: u8 = 48u8;
pub const THOST_FTDC_D_Sell: u8 = 49u8;
pub const THOST_FTDC_PT_Net: u8 = 49u8;
pub const THOST_FTDC_PT_Gross: u8 = 50u8;
pub const THOST_FTDC_PD_Net: u8 = 49u8;
pub const THOST_FTDC_PD_Long: u8 = 50u8;
pub const THOST_FTDC_PD_Short: u8 = 51u8;
pub const THOST_FTDC_SS_NonActive: u8 = 49u8;
pub const THOST_FTDC_SS_Startup: u8 = 50u8;
pub const THOST_FTDC_SS_Operating: u8 = 51u8;
pub const THOST_FTDC_SS_Settlement: u8 = 52u8;
pub const THOST_FTDC_SS_SettlementFinished: u8 = 53u8;
pub const THOST_FTDC_RA_Trade: u8 = 48u8;
pub const THOST_FTDC_RA_Settlement: u8 = 49u8;
pub const THOST_FTDC_HF_Speculation: u8 = 49u8;
pub const THOST_FTDC_HF_Arbitrage: u8 = 50u8;
pub const THOST_FTDC_HF_Hedge: u8 = 51u8;
pub const THOST_FTDC_HF_MarketMaker: u8 = 53u8;
pub const THOST_FTDC_HF_SpecHedge: u8 = 54u8;
pub const THOST_FTDC_HF_HedgeSpec: u8 = 55u8;
pub const THOST_FTDC_BHF_Speculation: u8 = 49u8;
pub const THOST_FTDC_BHF_Arbitrage: u8 = 50u8;
pub const THOST_FTDC_BHF_Hedge: u8 = 51u8;
pub const THOST_FTDC_CIDT_Speculation: u8 = 49u8;
pub const THOST_FTDC_CIDT_Arbitrage: u8 = 50u8;
pub const THOST_FTDC_CIDT_Hedge: u8 = 51u8;
pub const THOST_FTDC_CIDT_MarketMaker: u8 = 53u8;
pub const THOST_FTDC_OPT_AnyPrice: u8 = 49u8;
pub const THOST_FTDC_OPT_LimitPrice: u8 = 50u8;
pub const THOST_FTDC_OPT_BestPrice: u8 = 51u8;
pub const THOST_FTDC_OPT_LastPrice: u8 = 52u8;
pub const THOST_FTDC_OPT_LastPricePlusOneTicks: u8 = 53u8;
pub const THOST_FTDC_OPT_LastPricePlusTwoTicks: u8 = 54u8;
pub const THOST_FTDC_OPT_LastPricePlusThreeTicks: u8 = 55u8;
pub const THOST_FTDC_OPT_AskPrice1: u8 = 56u8;
pub const THOST_FTDC_OPT_AskPrice1PlusOneTicks: u8 = 57u8;
pub const THOST_FTDC_OPT_AskPrice1PlusTwoTicks: u8 = 65u8;
pub const THOST_FTDC_OPT_AskPrice1PlusThreeTicks: u8 = 66u8;
pub const THOST_FTDC_OPT_BidPrice1: u8 = 67u8;
pub const THOST_FTDC_OPT_BidPrice1PlusOneTicks: u8 = 68u8;
pub const THOST_FTDC_OPT_BidPrice1PlusTwoTicks: u8 = 69u8;
pub const THOST_FTDC_OPT_BidPrice1PlusThreeTicks: u8 = 70u8;
pub const THOST_FTDC_OPT_FiveLevelPrice: u8 = 71u8;
pub const THOST_FTDC_OF_Open: u8 = 48u8;
pub const THOST_FTDC_OF_Close: u8 = 49u8;
pub const THOST_FTDC_OF_ForceClose: u8 = 50u8;
pub const THOST_FTDC_OF_CloseToday: u8 = 51u8;
pub const THOST_FTDC_OF_CloseYesterday: u8 = 52u8;
pub const THOST_FTDC_OF_ForceOff: u8 = 53u8;
pub const THOST_FTDC_OF_LocalForceClose: u8 = 54u8;
pub const THOST_FTDC_FCC_NotForceClose: u8 = 48u8;
pub const THOST_FTDC_FCC_LackDeposit: u8 = 49u8;
pub const THOST_FTDC_FCC_ClientOverPositionLimit: u8 = 50u8;
pub const THOST_FTDC_FCC_MemberOverPositionLimit: u8 = 51u8;
pub const THOST_FTDC_FCC_NotMultiple: u8 = 52u8;
pub const THOST_FTDC_FCC_Violation: u8 = 53u8;
pub const THOST_FTDC_FCC_Other: u8 = 54u8;
pub const THOST_FTDC_FCC_PersonDeliv: u8 = 55u8;
pub const THOST_FTDC_ORDT_Normal: u8 = 48u8;
pub const THOST_FTDC_ORDT_DeriveFromQuote: u8 = 49u8;
pub const THOST_FTDC_ORDT_DeriveFromCombination: u8 = 50u8;
pub const THOST_FTDC_ORDT_Combination: u8 = 51u8;
pub const THOST_FTDC_ORDT_ConditionalOrder: u8 = 52u8;
pub const THOST_FTDC_ORDT_Swap: u8 = 53u8;
pub const THOST_FTDC_ORDT_DeriveFromBlockTrade: u8 = 54u8;
pub const THOST_FTDC_ORDT_DeriveFromEFPTrade: u8 = 55u8;
pub const THOST_FTDC_TC_IOC: u8 = 49u8;
pub const THOST_FTDC_TC_GFS: u8 = 50u8;
pub const THOST_FTDC_TC_GFD: u8 = 51u8;
pub const THOST_FTDC_TC_GTD: u8 = 52u8;
pub const THOST_FTDC_TC_GTC: u8 = 53u8;
pub const THOST_FTDC_TC_GFA: u8 = 54u8;
pub const THOST_FTDC_VC_AV: u8 = 49u8;
pub const THOST_FTDC_VC_MV: u8 = 50u8;
pub const THOST_FTDC_VC_CV: u8 = 51u8;
pub const THOST_FTDC_CC_Immediately: u8 = 49u8;
pub const THOST_FTDC_CC_Touch: u8 = 50u8;
pub const THOST_FTDC_CC_TouchProfit: u8 = 51u8;
pub const THOST_FTDC_CC_ParkedOrder: u8 = 52u8;
pub const THOST_FTDC_CC_LastPriceGreaterThanStopPrice: u8 = 53u8;
pub const THOST_FTDC_CC_LastPriceGreaterEqualStopPrice: u8 = 54u8;
pub const THOST_FTDC_CC_LastPriceLesserThanStopPrice: u8 = 55u8;
pub const THOST_FTDC_CC_LastPriceLesserEqualStopPrice: u8 = 56u8;
pub const THOST_FTDC_CC_AskPriceGreaterThanStopPrice: u8 = 57u8;
pub const THOST_FTDC_CC_AskPriceGreaterEqualStopPrice: u8 = 65u8;
pub const THOST_FTDC_CC_AskPriceLesserThanStopPrice: u8 = 66u8;
pub const THOST_FTDC_CC_AskPriceLesserEqualStopPrice: u8 = 67u8;
pub const THOST_FTDC_CC_BidPriceGreaterThanStopPrice: u8 = 68u8;
pub const THOST_FTDC_CC_BidPriceGreaterEqualStopPrice: u8 = 69u8;
pub const THOST_FTDC_CC_BidPriceLesserThanStopPrice: u8 = 70u8;
pub const THOST_FTDC_CC_BidPriceLesserEqualStopPrice: u8 = 72u8;
pub const THOST_FTDC_AF_Delete: u8 = 48u8;
pub const THOST_FTDC_AF_Modify: u8 = 51u8;
pub const THOST_FTDC_TR_Allow: u8 = 48u8;
pub const THOST_FTDC_TR_CloseOnly: u8 = 49u8;
pub const THOST_FTDC_TR_Forbidden: u8 = 50u8;
pub const THOST_FTDC_OSRC_Participant: u8 = 48u8;
pub const THOST_FTDC_OSRC_Administrator: u8 = 49u8;
pub const THOST_FTDC_TRDT_SplitCombination: u8 = 35u8;
pub const THOST_FTDC_TRDT_Common: u8 = 48u8;
pub const THOST_FTDC_TRDT_OptionsExecution: u8 = 49u8;
pub const THOST_FTDC_TRDT_OTC: u8 = 50u8;
pub const THOST_FTDC_TRDT_EFPDerived: u8 = 51u8;
pub const THOST_FTDC_TRDT_CombinationDerived: u8 = 52u8;
pub const THOST_FTDC_TRDT_BlockTrade: u8 = 53u8;
pub const THOST_FTDC_SPOST_Common: u8 = 35u8;
pub const THOST_FTDC_SPOST_Tas: u8 = 48u8;
pub const THOST_FTDC_PSRC_LastPrice: u8 = 48u8;
pub const THOST_FTDC_PSRC_Buy: u8 = 49u8;
pub const THOST_FTDC_PSRC_Sell: u8 = 50u8;
pub const THOST_FTDC_PSRC_OTC: u8 = 51u8;
pub const THOST_FTDC_IS_BeforeTrading: u8 = 48u8;
pub const THOST_FTDC_IS_NoTrading: u8 = 49u8;
pub const THOST_FTDC_IS_Continous: u8 = 50u8;
pub const THOST_FTDC_IS_AuctionOrdering: u8 = 51u8;
pub const THOST_FTDC_IS_AuctionBalance: u8 = 52u8;
pub const THOST_FTDC_IS_AuctionMatch: u8 = 53u8;
pub const THOST_FTDC_IS_Closed: u8 = 54u8;
pub const THOST_FTDC_IER_Automatic: u8 = 49u8;
pub const THOST_FTDC_IER_Manual: u8 = 50u8;
pub const THOST_FTDC_IER_Fuse: u8 = 51u8;
pub const THOST_FTDC_BS_NoUpload: u8 = 49u8;
pub const THOST_FTDC_BS_Uploaded: u8 = 50u8;
pub const THOST_FTDC_BS_Failed: u8 = 51u8;
pub const THOST_FTDC_RS_All: u8 = 49u8;
pub const THOST_FTDC_RS_ByProduct: u8 = 50u8;
pub const THOST_FTDC_RP_ByVolume: u8 = 49u8;
pub const THOST_FTDC_RP_ByFeeOnHand: u8 = 50u8;
pub const THOST_FTDC_RL_Level1: u8 = 49u8;
pub const THOST_FTDC_RL_Level2: u8 = 50u8;
pub const THOST_FTDC_RL_Level3: u8 = 51u8;
pub const THOST_FTDC_RL_Level4: u8 = 52u8;
pub const THOST_FTDC_RL_Level5: u8 = 53u8;
pub const THOST_FTDC_RL_Level6: u8 = 54u8;
pub const THOST_FTDC_RL_Level7: u8 = 55u8;
pub const THOST_FTDC_RL_Level8: u8 = 56u8;
pub const THOST_FTDC_RL_Level9: u8 = 57u8;
pub const THOST_FTDC_RSD_ByPeriod: u8 = 49u8;
pub const THOST_FTDC_RSD_ByStandard: u8 = 50u8;
pub const THOST_FTDC_MT_Out: u8 = 48u8;
pub const THOST_FTDC_MT_In: u8 = 49u8;
pub const THOST_FTDC_ISPI_MortgageRatio: u8 = 52u8;
pub const THOST_FTDC_ISPI_MarginWay: u8 = 53u8;
pub const THOST_FTDC_ISPI_BillDeposit: u8 = 57u8;
pub const THOST_FTDC_ESPI_MortgageRatio: u8 = 49u8;
pub const THOST_FTDC_ESPI_OtherFundItem: u8 = 50u8;
pub const THOST_FTDC_ESPI_OtherFundImport: u8 = 51u8;
pub const THOST_FTDC_ESPI_CFFEXMinPrepa: u8 = 54u8;
pub const THOST_FTDC_ESPI_CZCESettlementType: u8 = 55u8;
pub const THOST_FTDC_ESPI_ExchDelivFeeMode: u8 = 57u8;
pub const THOST_FTDC_ESPI_DelivFeeMode: u8 = 48u8;
pub const THOST_FTDC_ESPI_CZCEComMarginType: u8 = 65u8;
pub const THOST_FTDC_ESPI_DceComMarginType: u8 = 66u8;
pub const THOST_FTDC_ESPI_OptOutDisCountRate: u8 = 97u8;
pub const THOST_FTDC_ESPI_OptMiniGuarantee: u8 = 98u8;
pub const THOST_FTDC_SPI_InvestorIDMinLength: u8 = 49u8;
pub const THOST_FTDC_SPI_AccountIDMinLength: u8 = 50u8;
pub const THOST_FTDC_SPI_UserRightLogon: u8 = 51u8;
pub const THOST_FTDC_SPI_SettlementBillTrade: u8 = 52u8;
pub const THOST_FTDC_SPI_TradingCode: u8 = 53u8;
pub const THOST_FTDC_SPI_CheckFund: u8 = 54u8;
pub const THOST_FTDC_SPI_CommModelRight: u8 = 55u8;
pub const THOST_FTDC_SPI_MarginModelRight: u8 = 57u8;
pub const THOST_FTDC_SPI_IsStandardActive: u8 = 56u8;
pub const THOST_FTDC_SPI_UploadSettlementFile: u8 = 85u8;
pub const THOST_FTDC_SPI_DownloadCSRCFile: u8 = 68u8;
pub const THOST_FTDC_SPI_SettlementBillFile: u8 = 83u8;
pub const THOST_FTDC_SPI_CSRCOthersFile: u8 = 67u8;
pub const THOST_FTDC_SPI_InvestorPhoto: u8 = 80u8;
pub const THOST_FTDC_SPI_CSRCData: u8 = 82u8;
pub const THOST_FTDC_SPI_InvestorPwdModel: u8 = 73u8;
pub const THOST_FTDC_SPI_CFFEXInvestorSettleFile: u8 = 70u8;
pub const THOST_FTDC_SPI_InvestorIDType: u8 = 97u8;
pub const THOST_FTDC_SPI_FreezeMaxReMain: u8 = 114u8;
pub const THOST_FTDC_SPI_IsSync: u8 = 65u8;
pub const THOST_FTDC_SPI_RelieveOpenLimit: u8 = 79u8;
pub const THOST_FTDC_SPI_IsStandardFreeze: u8 = 88u8;
pub const THOST_FTDC_SPI_CZCENormalProductHedge: u8 = 66u8;
pub const THOST_FTDC_TPID_EncryptionStandard: u8 = 69u8;
pub const THOST_FTDC_TPID_RiskMode: u8 = 82u8;
pub const THOST_FTDC_TPID_RiskModeGlobal: u8 = 71u8;
pub const THOST_FTDC_TPID_modeEncode: u8 = 80u8;
pub const THOST_FTDC_TPID_tickMode: u8 = 84u8;
pub const THOST_FTDC_TPID_SingleUserSessionMaxNum: u8 = 83u8;
pub const THOST_FTDC_TPID_LoginFailMaxNum: u8 = 76u8;
pub const THOST_FTDC_TPID_IsAuthForce: u8 = 65u8;
pub const THOST_FTDC_TPID_IsPosiFreeze: u8 = 70u8;
pub const THOST_FTDC_TPID_IsPosiLimit: u8 = 77u8;
pub const THOST_FTDC_TPID_ForQuoteTimeInterval: u8 = 81u8;
pub const THOST_FTDC_TPID_IsFuturePosiLimit: u8 = 66u8;
pub const THOST_FTDC_TPID_IsFutureOrderFreq: u8 = 67u8;
pub const THOST_FTDC_TPID_IsExecOrderProfit: u8 = 72u8;
pub const THOST_FTDC_TPID_IsCheckBankAcc: u8 = 73u8;
pub const THOST_FTDC_TPID_PasswordDeadLine: u8 = 74u8;
pub const THOST_FTDC_TPID_IsStrongPassword: u8 = 75u8;
pub const THOST_FTDC_TPID_BalanceMorgage: u8 = 97u8;
pub const THOST_FTDC_TPID_MinPwdLen: u8 = 79u8;
pub const THOST_FTDC_TPID_LoginFailMaxNumForIP: u8 = 85u8;
pub const THOST_FTDC_TPID_PasswordPeriod: u8 = 86u8;
pub const THOST_FTDC_FI_SettlementFund: u8 = 70u8;
pub const THOST_FTDC_FI_Trade: u8 = 84u8;
pub const THOST_FTDC_FI_InvestorPosition: u8 = 80u8;
pub const THOST_FTDC_FI_SubEntryFund: u8 = 79u8;
pub const THOST_FTDC_FI_CZCECombinationPos: u8 = 67u8;
pub const THOST_FTDC_FI_CSRCData: u8 = 82u8;
pub const THOST_FTDC_FI_CZCEClose: u8 = 76u8;
pub const THOST_FTDC_FI_CZCENoClose: u8 = 78u8;
pub const THOST_FTDC_FI_PositionDtl: u8 = 68u8;
pub const THOST_FTDC_FI_OptionStrike: u8 = 83u8;
pub const THOST_FTDC_FI_SettlementPriceComparison: u8 = 77u8;
pub const THOST_FTDC_FI_NonTradePosChange: u8 = 66u8;
pub const THOST_FTDC_FUT_Settlement: u8 = 48u8;
pub const THOST_FTDC_FUT_Check: u8 = 49u8;
pub const THOST_FTDC_FFT_Txt: u8 = 48u8;
pub const THOST_FTDC_FFT_Zip: u8 = 49u8;
pub const THOST_FTDC_FFT_DBF: u8 = 50u8;
pub const THOST_FTDC_FUS_SucceedUpload: u8 = 49u8;
pub const THOST_FTDC_FUS_FailedUpload: u8 = 50u8;
pub const THOST_FTDC_FUS_SucceedLoad: u8 = 51u8;
pub const THOST_FTDC_FUS_PartSucceedLoad: u8 = 52u8;
pub const THOST_FTDC_FUS_FailedLoad: u8 = 53u8;
pub const THOST_FTDC_TD_Out: u8 = 48u8;
pub const THOST_FTDC_TD_In: u8 = 49u8;
pub const THOST_FTDC_SC_NoSpecialRule: u8 = 48u8;
pub const THOST_FTDC_SC_NoSpringFestival: u8 = 49u8;
pub const THOST_FTDC_IPT_LastSettlement: u8 = 49u8;
pub const THOST_FTDC_IPT_LaseClose: u8 = 50u8;
pub const THOST_FTDC_PLP_Active: u8 = 49u8;
pub const THOST_FTDC_PLP_NonActive: u8 = 50u8;
pub const THOST_FTDC_PLP_Canceled: u8 = 51u8;
pub const THOST_FTDC_DM_CashDeliv: u8 = 49u8;
pub const THOST_FTDC_DM_CommodityDeliv: u8 = 50u8;
pub const THOST_FTDC_FIOT_FundIO: u8 = 49u8;
pub const THOST_FTDC_FIOT_Transfer: u8 = 50u8;
pub const THOST_FTDC_FIOT_SwapCurrency: u8 = 51u8;
pub const THOST_FTDC_FT_Deposite: u8 = 49u8;
pub const THOST_FTDC_FT_ItemFund: u8 = 50u8;
pub const THOST_FTDC_FT_Company: u8 = 51u8;
pub const THOST_FTDC_FT_InnerTransfer: u8 = 52u8;
pub const THOST_FTDC_FD_In: u8 = 49u8;
pub const THOST_FTDC_FD_Out: u8 = 50u8;
pub const THOST_FTDC_FS_Record: u8 = 49u8;
pub const THOST_FTDC_FS_Check: u8 = 50u8;
pub const THOST_FTDC_FS_Charge: u8 = 51u8;
pub const THOST_FTDC_PS_None: u8 = 49u8;
pub const THOST_FTDC_PS_Publishing: u8 = 50u8;
pub const THOST_FTDC_PS_Published: u8 = 51u8;
pub const THOST_FTDC_ES_NonActive: u8 = 49u8;
pub const THOST_FTDC_ES_Startup: u8 = 50u8;
pub const THOST_FTDC_ES_Initialize: u8 = 51u8;
pub const THOST_FTDC_ES_Initialized: u8 = 52u8;
pub const THOST_FTDC_ES_Close: u8 = 53u8;
pub const THOST_FTDC_ES_Closed: u8 = 54u8;
pub const THOST_FTDC_ES_Settlement: u8 = 55u8;
pub const THOST_FTDC_STS_Initialize: u8 = 48u8;
pub const THOST_FTDC_STS_Settlementing: u8 = 49u8;
pub const THOST_FTDC_STS_Settlemented: u8 = 50u8;
pub const THOST_FTDC_STS_Finished: u8 = 51u8;
pub const THOST_FTDC_CT_Person: u8 = 48u8;
pub const THOST_FTDC_CT_Company: u8 = 49u8;
pub const THOST_FTDC_CT_Fund: u8 = 50u8;
pub const THOST_FTDC_CT_SpecialOrgan: u8 = 51u8;
pub const THOST_FTDC_CT_Asset: u8 = 52u8;
pub const THOST_FTDC_BT_Trade: u8 = 48u8;
pub const THOST_FTDC_BT_TradeSettle: u8 = 49u8;
pub const THOST_FTDC_FAS_Low: u8 = 49u8;
pub const THOST_FTDC_FAS_Normal: u8 = 50u8;
pub const THOST_FTDC_FAS_Focus: u8 = 51u8;
pub const THOST_FTDC_FAS_Risk: u8 = 52u8;
pub const THOST_FTDC_FAS_ByTrade: u8 = 49u8;
pub const THOST_FTDC_FAS_ByDeliv: u8 = 50u8;
pub const THOST_FTDC_FAS_None: u8 = 51u8;
pub const THOST_FTDC_FAS_FixFee: u8 = 52u8;
pub const THOST_FTDC_PWDT_Trade: u8 = 49u8;
pub const THOST_FTDC_PWDT_Account: u8 = 50u8;
pub const THOST_FTDC_AG_All: u8 = 49u8;
pub const THOST_FTDC_AG_OnlyLost: u8 = 50u8;
pub const THOST_FTDC_AG_OnlyGain: u8 = 51u8;
pub const THOST_FTDC_AG_None: u8 = 52u8;
pub const THOST_FTDC_ICP_Include: u8 = 48u8;
pub const THOST_FTDC_ICP_NotInclude: u8 = 50u8;
pub const THOST_FTDC_AWT_Enable: u8 = 48u8;
pub const THOST_FTDC_AWT_Disable: u8 = 50u8;
pub const THOST_FTDC_AWT_NoHoldEnable: u8 = 51u8;
pub const THOST_FTDC_FPWD_UnCheck: u8 = 48u8;
pub const THOST_FTDC_FPWD_Check: u8 = 49u8;
pub const THOST_FTDC_TT_BankToFuture: u8 = 48u8;
pub const THOST_FTDC_TT_FutureToBank: u8 = 49u8;
pub const THOST_FTDC_TVF_Invalid: u8 = 48u8;
pub const THOST_FTDC_TVF_Valid: u8 = 49u8;
pub const THOST_FTDC_TVF_Reverse: u8 = 50u8;
pub const THOST_FTDC_RN_CD: u8 = 48u8;
pub const THOST_FTDC_RN_ZT: u8 = 49u8;
pub const THOST_FTDC_RN_QT: u8 = 50u8;
pub const THOST_FTDC_SEX_None: u8 = 48u8;
pub const THOST_FTDC_SEX_Man: u8 = 49u8;
pub const THOST_FTDC_SEX_Woman: u8 = 50u8;
pub const THOST_FTDC_UT_Investor: u8 = 48u8;
pub const THOST_FTDC_UT_Operator: u8 = 49u8;
pub const THOST_FTDC_UT_SuperUser: u8 = 50u8;
pub const THOST_FTDC_RATETYPE_MarginRate: u8 = 50u8;
pub const THOST_FTDC_NOTETYPE_TradeSettleBill: u8 = 49u8;
pub const THOST_FTDC_NOTETYPE_TradeSettleMonth: u8 = 50u8;
pub const THOST_FTDC_NOTETYPE_CallMarginNotes: u8 = 51u8;
pub const THOST_FTDC_NOTETYPE_ForceCloseNotes: u8 = 52u8;
pub const THOST_FTDC_NOTETYPE_TradeNotes: u8 = 53u8;
pub const THOST_FTDC_NOTETYPE_DelivNotes: u8 = 54u8;
pub const THOST_FTDC_SBS_Day: u8 = 49u8;
pub const THOST_FTDC_SBS_Volume: u8 = 50u8;
pub const THOST_FTDC_ST_Day: u8 = 48u8;
pub const THOST_FTDC_ST_Month: u8 = 49u8;
pub const THOST_FTDC_URT_Logon: u8 = 49u8;
pub const THOST_FTDC_URT_Transfer: u8 = 50u8;
pub const THOST_FTDC_URT_EMail: u8 = 51u8;
pub const THOST_FTDC_URT_Fax: u8 = 52u8;
pub const THOST_FTDC_URT_ConditionOrder: u8 = 53u8;
pub const THOST_FTDC_MPT_PreSettlementPrice: u8 = 49u8;
pub const THOST_FTDC_MPT_SettlementPrice: u8 = 50u8;
pub const THOST_FTDC_MPT_AveragePrice: u8 = 51u8;
pub const THOST_FTDC_MPT_OpenPrice: u8 = 52u8;
pub const THOST_FTDC_BGS_None: u8 = 48u8;
pub const THOST_FTDC_BGS_NoGenerated: u8 = 49u8;
pub const THOST_FTDC_BGS_Generated: u8 = 50u8;
pub const THOST_FTDC_AT_HandlePositionAlgo: u8 = 49u8;
pub const THOST_FTDC_AT_FindMarginRateAlgo: u8 = 50u8;
pub const THOST_FTDC_HPA_Base: u8 = 49u8;
pub const THOST_FTDC_HPA_DCE: u8 = 50u8;
pub const THOST_FTDC_HPA_CZCE: u8 = 51u8;
pub const THOST_FTDC_FMRA_Base: u8 = 49u8;
pub const THOST_FTDC_FMRA_DCE: u8 = 50u8;
pub const THOST_FTDC_FMRA_CZCE: u8 = 51u8;
pub const THOST_FTDC_HTAA_Base: u8 = 49u8;
pub const THOST_FTDC_HTAA_DCE: u8 = 50u8;
pub const THOST_FTDC_HTAA_CZCE: u8 = 51u8;
pub const THOST_FTDC_PST_Order: u8 = 49u8;
pub const THOST_FTDC_PST_Open: u8 = 50u8;
pub const THOST_FTDC_PST_Fund: u8 = 51u8;
pub const THOST_FTDC_PST_Settlement: u8 = 52u8;
pub const THOST_FTDC_PST_Company: u8 = 53u8;
pub const THOST_FTDC_PST_Corporation: u8 = 54u8;
pub const THOST_FTDC_PST_LinkMan: u8 = 55u8;
pub const THOST_FTDC_PST_Ledger: u8 = 56u8;
pub const THOST_FTDC_PST_Trustee: u8 = 57u8;
pub const THOST_FTDC_PST_TrusteeCorporation: u8 = 65u8;
pub const THOST_FTDC_PST_TrusteeOpen: u8 = 66u8;
pub const THOST_FTDC_PST_TrusteeContact: u8 = 67u8;
pub const THOST_FTDC_PST_ForeignerRefer: u8 = 68u8;
pub const THOST_FTDC_PST_CorporationRefer: u8 = 69u8;
pub const THOST_FTDC_QIR_All: u8 = 49u8;
pub const THOST_FTDC_QIR_Group: u8 = 50u8;
pub const THOST_FTDC_QIR_Single: u8 = 51u8;
pub const THOST_FTDC_IRS_Normal: u8 = 49u8;
pub const THOST_FTDC_IRS_Warn: u8 = 50u8;
pub const THOST_FTDC_IRS_Call: u8 = 51u8;
pub const THOST_FTDC_IRS_Force: u8 = 52u8;
pub const THOST_FTDC_IRS_Exception: u8 = 53u8;
pub const THOST_FTDC_UET_Login: u8 = 49u8;
pub const THOST_FTDC_UET_Logout: u8 = 50u8;
pub const THOST_FTDC_UET_Trading: u8 = 51u8;
pub const THOST_FTDC_UET_TradingError: u8 = 52u8;
pub const THOST_FTDC_UET_UpdatePassword: u8 = 53u8;
pub const THOST_FTDC_UET_Authenticate: u8 = 54u8;
pub const THOST_FTDC_UET_SubmitSysInfo: u8 = 55u8;
pub const THOST_FTDC_UET_Transfer: u8 = 56u8;
pub const THOST_FTDC_UET_Other: u8 = 57u8;
pub const THOST_FTDC_ICS_Close: u8 = 48u8;
pub const THOST_FTDC_ICS_CloseToday: u8 = 49u8;
pub const THOST_FTDC_SM_Non: u8 = 48u8;
pub const THOST_FTDC_SM_Instrument: u8 = 49u8;
pub const THOST_FTDC_SM_Product: u8 = 50u8;
pub const THOST_FTDC_SM_Investor: u8 = 51u8;
pub const THOST_FTDC_PAOS_NotSend: u8 = 49u8;
pub const THOST_FTDC_PAOS_Send: u8 = 50u8;
pub const THOST_FTDC_PAOS_Deleted: u8 = 51u8;
pub const THOST_FTDC_VDS_Dealing: u8 = 49u8;
pub const THOST_FTDC_VDS_DeaclSucceed: u8 = 50u8;
pub const THOST_FTDC_ORGS_Standard: u8 = 48u8;
pub const THOST_FTDC_ORGS_ESunny: u8 = 49u8;
pub const THOST_FTDC_ORGS_KingStarV6: u8 = 50u8;
pub const THOST_FTDC_VTS_NaturalDeal: u8 = 48u8;
pub const THOST_FTDC_VTS_SucceedEnd: u8 = 49u8;
pub const THOST_FTDC_VTS_FailedEND: u8 = 50u8;
pub const THOST_FTDC_VTS_Exception: u8 = 51u8;
pub const THOST_FTDC_VTS_ManualDeal: u8 = 52u8;
pub const THOST_FTDC_VTS_MesException: u8 = 53u8;
pub const THOST_FTDC_VTS_SysException: u8 = 54u8;
pub const THOST_FTDC_VBAT_BankBook: u8 = 49u8;
pub const THOST_FTDC_VBAT_BankCard: u8 = 50u8;
pub const THOST_FTDC_VBAT_CreditCard: u8 = 51u8;
pub const THOST_FTDC_VMS_Natural: u8 = 48u8;
pub const THOST_FTDC_VMS_Canceled: u8 = 57u8;
pub const THOST_FTDC_VAA_NoAvailAbility: u8 = 48u8;
pub const THOST_FTDC_VAA_AvailAbility: u8 = 49u8;
pub const THOST_FTDC_VAA_Repeal: u8 = 50u8;
pub const THOST_FTDC_GEN_Program: u8 = 48u8;
pub const THOST_FTDC_GEN_HandWork: u8 = 49u8;
pub const THOST_FTDC_CFMMCKK_REQUEST: u8 = 82u8;
pub const THOST_FTDC_CFMMCKK_AUTO: u8 = 65u8;
pub const THOST_FTDC_CFMMCKK_MANUAL: u8 = 77u8;
pub const THOST_FTDC_CFT_IDCard: u8 = 48u8;
pub const THOST_FTDC_CFT_Passport: u8 = 49u8;
pub const THOST_FTDC_CFT_OfficerIDCard: u8 = 50u8;
pub const THOST_FTDC_CFT_SoldierIDCard: u8 = 51u8;
pub const THOST_FTDC_CFT_HomeComingCard: u8 = 52u8;
pub const THOST_FTDC_CFT_HouseholdRegister: u8 = 53u8;
pub const THOST_FTDC_CFT_LicenseNo: u8 = 54u8;
pub const THOST_FTDC_CFT_InstitutionCodeCard: u8 = 55u8;
pub const THOST_FTDC_CFT_TempLicenseNo: u8 = 56u8;
pub const THOST_FTDC_CFT_NoEnterpriseLicenseNo: u8 = 57u8;
pub const THOST_FTDC_CFT_OtherCard: u8 = 120u8;
pub const THOST_FTDC_CFT_SuperDepAgree: u8 = 97u8;
pub const THOST_FTDC_FBC_Others: u8 = 48u8;
pub const THOST_FTDC_FBC_TransferDetails: u8 = 49u8;
pub const THOST_FTDC_FBC_CustAccStatus: u8 = 50u8;
pub const THOST_FTDC_FBC_AccountTradeDetails: u8 = 51u8;
pub const THOST_FTDC_FBC_FutureAccountChangeInfoDetails: u8 = 52u8;
pub const THOST_FTDC_FBC_CustMoneyDetail: u8 = 53u8;
pub const THOST_FTDC_FBC_CustCancelAccountInfo: u8 = 54u8;
pub const THOST_FTDC_FBC_CustMoneyResult: u8 = 55u8;
pub const THOST_FTDC_FBC_OthersExceptionResult: u8 = 56u8;
pub const THOST_FTDC_FBC_CustInterestNetMoneyDetails: u8 = 57u8;
pub const THOST_FTDC_FBC_CustMoneySendAndReceiveDetails: u8 = 97u8;
pub const THOST_FTDC_FBC_CorporationMoneyTotal: u8 = 98u8;
pub const THOST_FTDC_FBC_MainbodyMoneyTotal: u8 = 99u8;
pub const THOST_FTDC_FBC_MainPartMonitorData: u8 = 100u8;
pub const THOST_FTDC_FBC_PreparationMoney: u8 = 101u8;
pub const THOST_FTDC_FBC_BankMoneyMonitorData: u8 = 102u8;
pub const THOST_FTDC_CEC_Exchange: u8 = 49u8;
pub const THOST_FTDC_CEC_Cash: u8 = 50u8;
pub const THOST_FTDC_YNI_Yes: u8 = 48u8;
pub const THOST_FTDC_YNI_No: u8 = 49u8;
pub const THOST_FTDC_BLT_CurrentMoney: u8 = 48u8;
pub const THOST_FTDC_BLT_UsableMoney: u8 = 49u8;
pub const THOST_FTDC_BLT_FetchableMoney: u8 = 50u8;
pub const THOST_FTDC_BLT_FreezeMoney: u8 = 51u8;
pub const THOST_FTDC_GD_Unknown: u8 = 48u8;
pub const THOST_FTDC_GD_Male: u8 = 49u8;
pub const THOST_FTDC_GD_Female: u8 = 50u8;
pub const THOST_FTDC_FPF_BEN: u8 = 48u8;
pub const THOST_FTDC_FPF_OUR: u8 = 49u8;
pub const THOST_FTDC_FPF_SHA: u8 = 50u8;
pub const THOST_FTDC_PWKT_ExchangeKey: u8 = 48u8;
pub const THOST_FTDC_PWKT_PassWordKey: u8 = 49u8;
pub const THOST_FTDC_PWKT_MACKey: u8 = 50u8;
pub const THOST_FTDC_PWKT_MessageKey: u8 = 51u8;
pub const THOST_FTDC_PWT_Query: u8 = 48u8;
pub const THOST_FTDC_PWT_Fetch: u8 = 49u8;
pub const THOST_FTDC_PWT_Transfer: u8 = 50u8;
pub const THOST_FTDC_PWT_Trade: u8 = 51u8;
pub const THOST_FTDC_EM_NoEncry: u8 = 48u8;
pub const THOST_FTDC_EM_DES: u8 = 49u8;
pub const THOST_FTDC_EM_3DES: u8 = 50u8;
pub const THOST_FTDC_BRF_BankNotNeedRepeal: u8 = 48u8;
pub const THOST_FTDC_BRF_BankWaitingRepeal: u8 = 49u8;
pub const THOST_FTDC_BRF_BankBeenRepealed: u8 = 50u8;
pub const THOST_FTDC_BRORF_BrokerNotNeedRepeal: u8 = 48u8;
pub const THOST_FTDC_BRORF_BrokerWaitingRepeal: u8 = 49u8;
pub const THOST_FTDC_BRORF_BrokerBeenRepealed: u8 = 50u8;
pub const THOST_FTDC_TS_Bank: u8 = 48u8;
pub const THOST_FTDC_TS_Future: u8 = 49u8;
pub const THOST_FTDC_TS_Store: u8 = 50u8;
pub const THOST_FTDC_LF_Yes: u8 = 48u8;
pub const THOST_FTDC_LF_No: u8 = 49u8;
pub const THOST_FTDC_BAS_Normal: u8 = 48u8;
pub const THOST_FTDC_BAS_Freeze: u8 = 49u8;
pub const THOST_FTDC_BAS_ReportLoss: u8 = 50u8;
pub const THOST_FTDC_MAS_Normal: u8 = 48u8;
pub const THOST_FTDC_MAS_Cancel: u8 = 49u8;
pub const THOST_FTDC_MSS_Point: u8 = 48u8;
pub const THOST_FTDC_MSS_PrePoint: u8 = 49u8;
pub const THOST_FTDC_MSS_CancelPoint: u8 = 50u8;
pub const THOST_FTDC_SYT_FutureBankTransfer: u8 = 48u8;
pub const THOST_FTDC_SYT_StockBankTransfer: u8 = 49u8;
pub const THOST_FTDC_SYT_TheThirdPartStore: u8 = 50u8;
pub const THOST_FTDC_TEF_NormalProcessing: u8 = 48u8;
pub const THOST_FTDC_TEF_Success: u8 = 49u8;
pub const THOST_FTDC_TEF_Failed: u8 = 50u8;
pub const THOST_FTDC_TEF_Abnormal: u8 = 51u8;
pub const THOST_FTDC_TEF_ManualProcessedForException: u8 = 52u8;
pub const THOST_FTDC_TEF_CommuFailedNeedManualProcess: u8 = 53u8;
pub const THOST_FTDC_TEF_SysErrorNeedManualProcess: u8 = 54u8;
pub const THOST_FTDC_PSS_NotProcess: u8 = 48u8;
pub const THOST_FTDC_PSS_StartProcess: u8 = 49u8;
pub const THOST_FTDC_PSS_Finished: u8 = 50u8;
pub const THOST_FTDC_CUSTT_Person: u8 = 48u8;
pub const THOST_FTDC_CUSTT_Institution: u8 = 49u8;
pub const THOST_FTDC_FBTTD_FromBankToFuture: u8 = 49u8;
pub const THOST_FTDC_FBTTD_FromFutureToBank: u8 = 50u8;
pub const THOST_FTDC_OOD_Open: u8 = 49u8;
pub const THOST_FTDC_OOD_Destroy: u8 = 48u8;
pub const THOST_FTDC_AVAF_Invalid: u8 = 48u8;
pub const THOST_FTDC_AVAF_Valid: u8 = 49u8;
pub const THOST_FTDC_AVAF_Repeal: u8 = 50u8;
pub const THOST_FTDC_OT_Bank: u8 = 49u8;
pub const THOST_FTDC_OT_Future: u8 = 50u8;
pub const THOST_FTDC_OT_PlateForm: u8 = 57u8;
pub const THOST_FTDC_OL_HeadQuarters: u8 = 49u8;
pub const THOST_FTDC_OL_Branch: u8 = 50u8;
pub const THOST_FTDC_PID_FutureProtocal: u8 = 48u8;
pub const THOST_FTDC_PID_ICBCProtocal: u8 = 49u8;
pub const THOST_FTDC_PID_ABCProtocal: u8 = 50u8;
pub const THOST_FTDC_PID_CBCProtocal: u8 = 51u8;
pub const THOST_FTDC_PID_CCBProtocal: u8 = 52u8;
pub const THOST_FTDC_PID_BOCOMProtocal: u8 = 53u8;
pub const THOST_FTDC_PID_FBTPlateFormProtocal: u8 = 88u8;
pub const THOST_FTDC_CM_ShortConnect: u8 = 48u8;
pub const THOST_FTDC_CM_LongConnect: u8 = 49u8;
pub const THOST_FTDC_SRM_ASync: u8 = 48u8;
pub const THOST_FTDC_SRM_Sync: u8 = 49u8;
pub const THOST_FTDC_BAT_BankBook: u8 = 49u8;
pub const THOST_FTDC_BAT_SavingCard: u8 = 50u8;
pub const THOST_FTDC_BAT_CreditCard: u8 = 51u8;
pub const THOST_FTDC_FAT_BankBook: u8 = 49u8;
pub const THOST_FTDC_FAT_SavingCard: u8 = 50u8;
pub const THOST_FTDC_FAT_CreditCard: u8 = 51u8;
pub const THOST_FTDC_OS_Ready: u8 = 48u8;
pub const THOST_FTDC_OS_CheckIn: u8 = 49u8;
pub const THOST_FTDC_OS_CheckOut: u8 = 50u8;
pub const THOST_FTDC_OS_CheckFileArrived: u8 = 51u8;
pub const THOST_FTDC_OS_CheckDetail: u8 = 52u8;
pub const THOST_FTDC_OS_DayEndClean: u8 = 53u8;
pub const THOST_FTDC_OS_Invalid: u8 = 57u8;
pub const THOST_FTDC_CCBFM_ByAmount: u8 = 49u8;
pub const THOST_FTDC_CCBFM_ByMonth: u8 = 50u8;
pub const THOST_FTDC_CAPIT_Client: u8 = 49u8;
pub const THOST_FTDC_CAPIT_Server: u8 = 50u8;
pub const THOST_FTDC_CAPIT_UserApi: u8 = 51u8;
pub const THOST_FTDC_LS_Connected: u8 = 49u8;
pub const THOST_FTDC_LS_Disconnected: u8 = 50u8;
pub const THOST_FTDC_BPWDF_NoCheck: u8 = 48u8;
pub const THOST_FTDC_BPWDF_BlankCheck: u8 = 49u8;
pub const THOST_FTDC_BPWDF_EncryptCheck: u8 = 50u8;
pub const THOST_FTDC_SAT_AccountID: u8 = 49u8;
pub const THOST_FTDC_SAT_CardID: u8 = 50u8;
pub const THOST_FTDC_SAT_SHStockholderID: u8 = 51u8;
pub const THOST_FTDC_SAT_SZStockholderID: u8 = 52u8;
pub const THOST_FTDC_TRFS_Normal: u8 = 48u8;
pub const THOST_FTDC_TRFS_Repealed: u8 = 49u8;
pub const THOST_FTDC_SPTYPE_Broker: u8 = 48u8;
pub const THOST_FTDC_SPTYPE_Bank: u8 = 49u8;
pub const THOST_FTDC_REQRSP_Request: u8 = 48u8;
pub const THOST_FTDC_REQRSP_Response: u8 = 49u8;
pub const THOST_FTDC_FBTUET_SignIn: u8 = 48u8;
pub const THOST_FTDC_FBTUET_FromBankToFuture: u8 = 49u8;
pub const THOST_FTDC_FBTUET_FromFutureToBank: u8 = 50u8;
pub const THOST_FTDC_FBTUET_OpenAccount: u8 = 51u8;
pub const THOST_FTDC_FBTUET_CancelAccount: u8 = 52u8;
pub const THOST_FTDC_FBTUET_ChangeAccount: u8 = 53u8;
pub const THOST_FTDC_FBTUET_RepealFromBankToFuture: u8 = 54u8;
pub const THOST_FTDC_FBTUET_RepealFromFutureToBank: u8 = 55u8;
pub const THOST_FTDC_FBTUET_QueryBankAccount: u8 = 56u8;
pub const THOST_FTDC_FBTUET_QueryFutureAccount: u8 = 57u8;
pub const THOST_FTDC_FBTUET_SignOut: u8 = 65u8;
pub const THOST_FTDC_FBTUET_SyncKey: u8 = 66u8;
pub const THOST_FTDC_FBTUET_ReserveOpenAccount: u8 = 67u8;
pub const THOST_FTDC_FBTUET_CancelReserveOpenAccount: u8 = 68u8;
pub const THOST_FTDC_FBTUET_ReserveOpenAccountConfirm: u8 = 69u8;
pub const THOST_FTDC_FBTUET_Other: u8 = 90u8;
pub const THOST_FTDC_DBOP_Insert: u8 = 48u8;
pub const THOST_FTDC_DBOP_Update: u8 = 49u8;
pub const THOST_FTDC_DBOP_Delete: u8 = 50u8;
pub const THOST_FTDC_SYNF_Yes: u8 = 48u8;
pub const THOST_FTDC_SYNF_No: u8 = 49u8;
pub const THOST_FTDC_SYNT_OneOffSync: u8 = 48u8;
pub const THOST_FTDC_SYNT_TimerSync: u8 = 49u8;
pub const THOST_FTDC_SYNT_TimerFullSync: u8 = 50u8;
pub const THOST_FTDC_FBEDIR_Settlement: u8 = 48u8;
pub const THOST_FTDC_FBEDIR_Sale: u8 = 49u8;
pub const THOST_FTDC_FBERES_Success: u8 = 48u8;
pub const THOST_FTDC_FBERES_InsufficientBalance: u8 = 49u8;
pub const THOST_FTDC_FBERES_UnknownTrading: u8 = 56u8;
pub const THOST_FTDC_FBERES_Fail: u8 = 120u8;
pub const THOST_FTDC_FBEES_Normal: u8 = 48u8;
pub const THOST_FTDC_FBEES_ReExchange: u8 = 49u8;
pub const THOST_FTDC_FBEFG_DataPackage: u8 = 48u8;
pub const THOST_FTDC_FBEFG_File: u8 = 49u8;
pub const THOST_FTDC_FBEAT_NotTrade: u8 = 48u8;
pub const THOST_FTDC_FBEAT_Trade: u8 = 49u8;
pub const THOST_FTDC_FBEUET_SignIn: u8 = 48u8;
pub const THOST_FTDC_FBEUET_Exchange: u8 = 49u8;
pub const THOST_FTDC_FBEUET_ReExchange: u8 = 50u8;
pub const THOST_FTDC_FBEUET_QueryBankAccount: u8 = 51u8;
pub const THOST_FTDC_FBEUET_QueryExchDetial: u8 = 52u8;
pub const THOST_FTDC_FBEUET_QueryExchSummary: u8 = 53u8;
pub const THOST_FTDC_FBEUET_QueryExchRate: u8 = 54u8;
pub const THOST_FTDC_FBEUET_CheckBankAccount: u8 = 55u8;
pub const THOST_FTDC_FBEUET_SignOut: u8 = 56u8;
pub const THOST_FTDC_FBEUET_Other: u8 = 90u8;
pub const THOST_FTDC_FBERF_UnProcessed: u8 = 48u8;
pub const THOST_FTDC_FBERF_WaitSend: u8 = 49u8;
pub const THOST_FTDC_FBERF_SendSuccess: u8 = 50u8;
pub const THOST_FTDC_FBERF_SendFailed: u8 = 51u8;
pub const THOST_FTDC_FBERF_WaitReSend: u8 = 52u8;
pub const THOST_FTDC_NC_NOERROR: u8 = 48u8;
pub const THOST_FTDC_NC_Warn: u8 = 49u8;
pub const THOST_FTDC_NC_Call: u8 = 50u8;
pub const THOST_FTDC_NC_Force: u8 = 51u8;
pub const THOST_FTDC_NC_CHUANCANG: u8 = 52u8;
pub const THOST_FTDC_NC_Exception: u8 = 53u8;
pub const THOST_FTDC_FCT_Manual: u8 = 48u8;
pub const THOST_FTDC_FCT_Single: u8 = 49u8;
pub const THOST_FTDC_FCT_Group: u8 = 50u8;
pub const THOST_FTDC_RNM_System: u8 = 48u8;
pub const THOST_FTDC_RNM_SMS: u8 = 49u8;
pub const THOST_FTDC_RNM_EMail: u8 = 50u8;
pub const THOST_FTDC_RNM_Manual: u8 = 51u8;
pub const THOST_FTDC_RNS_NotGen: u8 = 48u8;
pub const THOST_FTDC_RNS_Generated: u8 = 49u8;
pub const THOST_FTDC_RNS_SendError: u8 = 50u8;
pub const THOST_FTDC_RNS_SendOk: u8 = 51u8;
pub const THOST_FTDC_RNS_Received: u8 = 52u8;
pub const THOST_FTDC_RNS_Confirmed: u8 = 53u8;
pub const THOST_FTDC_RUE_ExportData: u8 = 48u8;
pub const THOST_FTDC_COST_LastPriceAsc: u8 = 48u8;
pub const THOST_FTDC_COST_LastPriceDesc: u8 = 49u8;
pub const THOST_FTDC_COST_AskPriceAsc: u8 = 50u8;
pub const THOST_FTDC_COST_AskPriceDesc: u8 = 51u8;
pub const THOST_FTDC_COST_BidPriceAsc: u8 = 52u8;
pub const THOST_FTDC_COST_BidPriceDesc: u8 = 53u8;
pub const THOST_FTDC_UOAST_NoSend: u8 = 48u8;
pub const THOST_FTDC_UOAST_Sended: u8 = 49u8;
pub const THOST_FTDC_UOAST_Generated: u8 = 50u8;
pub const THOST_FTDC_UOAST_SendFail: u8 = 51u8;
pub const THOST_FTDC_UOAST_Success: u8 = 52u8;
pub const THOST_FTDC_UOAST_Fail: u8 = 53u8;
pub const THOST_FTDC_UOAST_Cancel: u8 = 54u8;
pub const THOST_FTDC_UOACS_NoApply: u8 = 49u8;
pub const THOST_FTDC_UOACS_Submited: u8 = 50u8;
pub const THOST_FTDC_UOACS_Sended: u8 = 51u8;
pub const THOST_FTDC_UOACS_Success: u8 = 52u8;
pub const THOST_FTDC_UOACS_Refuse: u8 = 53u8;
pub const THOST_FTDC_UOACS_Cancel: u8 = 54u8;
pub const THOST_FTDC_QT_Radio: u8 = 49u8;
pub const THOST_FTDC_QT_Option: u8 = 50u8;
pub const THOST_FTDC_QT_Blank: u8 = 51u8;
pub const THOST_FTDC_BT_Request: u8 = 49u8;
pub const THOST_FTDC_BT_Response: u8 = 50u8;
pub const THOST_FTDC_BT_Notice: u8 = 51u8;
pub const THOST_FTDC_CRC_Success: u8 = 48u8;
pub const THOST_FTDC_CRC_Working: u8 = 49u8;
pub const THOST_FTDC_CRC_InfoFail: u8 = 50u8;
pub const THOST_FTDC_CRC_IDCardFail: u8 = 51u8;
pub const THOST_FTDC_CRC_OtherFail: u8 = 52u8;
pub const THOST_FTDC_CfMMCCT_All: u8 = 48u8;
pub const THOST_FTDC_CfMMCCT_Person: u8 = 49u8;
pub const THOST_FTDC_CfMMCCT_Company: u8 = 50u8;
pub const THOST_FTDC_CfMMCCT_Other: u8 = 51u8;
pub const THOST_FTDC_CfMMCCT_SpecialOrgan: u8 = 52u8;
pub const THOST_FTDC_CfMMCCT_Asset: u8 = 53u8;
pub const THOST_FTDC_EIDT_SHFE: u8 = 83u8;
pub const THOST_FTDC_EIDT_CZCE: u8 = 90u8;
pub const THOST_FTDC_EIDT_DCE: u8 = 68u8;
pub const THOST_FTDC_EIDT_CFFEX: u8 = 74u8;
pub const THOST_FTDC_EIDT_INE: u8 = 78u8;
pub const THOST_FTDC_ECIDT_Hedge: u8 = 49u8;
pub const THOST_FTDC_ECIDT_Arbitrage: u8 = 50u8;
pub const THOST_FTDC_ECIDT_Speculation: u8 = 51u8;
pub const THOST_FTDC_UF_NoUpdate: u8 = 48u8;
pub const THOST_FTDC_UF_Success: u8 = 49u8;
pub const THOST_FTDC_UF_Fail: u8 = 50u8;
pub const THOST_FTDC_UF_TCSuccess: u8 = 51u8;
pub const THOST_FTDC_UF_TCFail: u8 = 52u8;
pub const THOST_FTDC_UF_Cancel: u8 = 53u8;
pub const THOST_FTDC_AOID_OpenInvestor: u8 = 49u8;
pub const THOST_FTDC_AOID_ModifyIDCard: u8 = 50u8;
pub const THOST_FTDC_AOID_ModifyNoIDCard: u8 = 51u8;
pub const THOST_FTDC_AOID_ApplyTradingCode: u8 = 52u8;
pub const THOST_FTDC_AOID_CancelTradingCode: u8 = 53u8;
pub const THOST_FTDC_AOID_CancelInvestor: u8 = 54u8;
pub const THOST_FTDC_AOID_FreezeAccount: u8 = 56u8;
pub const THOST_FTDC_AOID_ActiveFreezeAccount: u8 = 57u8;
pub const THOST_FTDC_ASID_NoComplete: u8 = 49u8;
pub const THOST_FTDC_ASID_Submited: u8 = 50u8;
pub const THOST_FTDC_ASID_Checked: u8 = 51u8;
pub const THOST_FTDC_ASID_Refused: u8 = 52u8;
pub const THOST_FTDC_ASID_Deleted: u8 = 53u8;
pub const THOST_FTDC_UOASM_ByAPI: u8 = 49u8;
pub const THOST_FTDC_UOASM_ByFile: u8 = 50u8;
pub const THOST_FTDC_EvM_ADD: u8 = 49u8;
pub const THOST_FTDC_EvM_UPDATE: u8 = 50u8;
pub const THOST_FTDC_EvM_DELETE: u8 = 51u8;
pub const THOST_FTDC_EvM_CHECK: u8 = 52u8;
pub const THOST_FTDC_EvM_COPY: u8 = 53u8;
pub const THOST_FTDC_EvM_CANCEL: u8 = 54u8;
pub const THOST_FTDC_EvM_Reverse: u8 = 55u8;
pub const THOST_FTDC_UOAA_ASR: u8 = 49u8;
pub const THOST_FTDC_UOAA_ASNR: u8 = 50u8;
pub const THOST_FTDC_UOAA_NSAR: u8 = 51u8;
pub const THOST_FTDC_UOAA_NSR: u8 = 52u8;
pub const THOST_FTDC_EvM_InvestorGroupFlow: u8 = 49u8;
pub const THOST_FTDC_EvM_InvestorRate: u8 = 50u8;
pub const THOST_FTDC_EvM_InvestorCommRateModel: u8 = 51u8;
pub const THOST_FTDC_CL_Zero: u8 = 48u8;
pub const THOST_FTDC_CL_One: u8 = 49u8;
pub const THOST_FTDC_CL_Two: u8 = 50u8;
pub const THOST_FTDC_CHS_Init: u8 = 48u8;
pub const THOST_FTDC_CHS_Checking: u8 = 49u8;
pub const THOST_FTDC_CHS_Checked: u8 = 50u8;
pub const THOST_FTDC_CHS_Refuse: u8 = 51u8;
pub const THOST_FTDC_CHS_Cancel: u8 = 52u8;
pub const THOST_FTDC_CHU_Unused: u8 = 48u8;
pub const THOST_FTDC_CHU_Used: u8 = 49u8;
pub const THOST_FTDC_CHU_Fail: u8 = 50u8;
pub const THOST_FTDC_BAO_ByAccProperty: u8 = 48u8;
pub const THOST_FTDC_BAO_ByFBTransfer: u8 = 49u8;
pub const THOST_FTDC_MBTS_ByInstrument: u8 = 48u8;
pub const THOST_FTDC_MBTS_ByDayInsPrc: u8 = 49u8;
pub const THOST_FTDC_MBTS_ByDayIns: u8 = 50u8;
pub const THOST_FTDC_OTP_NONE: u8 = 48u8;
pub const THOST_FTDC_OTP_TOTP: u8 = 49u8;
pub const THOST_FTDC_OTPS_Unused: u8 = 48u8;
pub const THOST_FTDC_OTPS_Used: u8 = 49u8;
pub const THOST_FTDC_OTPS_Disuse: u8 = 50u8;
pub const THOST_FTDC_BUT_Investor: u8 = 49u8;
pub const THOST_FTDC_BUT_BrokerUser: u8 = 50u8;
pub const THOST_FTDC_FUTT_Commodity: u8 = 49u8;
pub const THOST_FTDC_FUTT_Financial: u8 = 50u8;
pub const THOST_FTDC_FET_Restriction: u8 = 48u8;
pub const THOST_FTDC_FET_TodayRestriction: u8 = 49u8;
pub const THOST_FTDC_FET_Transfer: u8 = 50u8;
pub const THOST_FTDC_FET_Credit: u8 = 51u8;
pub const THOST_FTDC_FET_InvestorWithdrawAlm: u8 = 52u8;
pub const THOST_FTDC_FET_BankRestriction: u8 = 53u8;
pub const THOST_FTDC_FET_Accountregister: u8 = 54u8;
pub const THOST_FTDC_FET_ExchangeFundIO: u8 = 55u8;
pub const THOST_FTDC_FET_InvestorFundIO: u8 = 56u8;
pub const THOST_FTDC_AST_FBTransfer: u8 = 48u8;
pub const THOST_FTDC_AST_ManualEntry: u8 = 49u8;
pub const THOST_FTDC_CST_UnifyAccount: u8 = 48u8;
pub const THOST_FTDC_CST_ManualEntry: u8 = 49u8;
pub const THOST_FTDC_UR_All: u8 = 48u8;
pub const THOST_FTDC_UR_Single: u8 = 49u8;
pub const THOST_FTDC_BG_Investor: u8 = 50u8;
pub const THOST_FTDC_BG_Group: u8 = 49u8;
pub const THOST_FTDC_TSSM_Instrument: u8 = 49u8;
pub const THOST_FTDC_TSSM_Product: u8 = 50u8;
pub const THOST_FTDC_TSSM_Exchange: u8 = 51u8;
pub const THOST_FTDC_ESM_Relative: u8 = 49u8;
pub const THOST_FTDC_ESM_Typical: u8 = 50u8;
pub const THOST_FTDC_RIR_All: u8 = 49u8;
pub const THOST_FTDC_RIR_Model: u8 = 50u8;
pub const THOST_FTDC_RIR_Single: u8 = 51u8;
pub const THOST_FTDC_SDS_Initialize: u8 = 48u8;
pub const THOST_FTDC_SDS_Settlementing: u8 = 49u8;
pub const THOST_FTDC_SDS_Settlemented: u8 = 50u8;
pub const THOST_FTDC_TSRC_NORMAL: u8 = 48u8;
pub const THOST_FTDC_TSRC_QUERY: u8 = 49u8;
pub const THOST_FTDC_FSM_Product: u8 = 49u8;
pub const THOST_FTDC_FSM_Exchange: u8 = 50u8;
pub const THOST_FTDC_FSM_All: u8 = 51u8;
pub const THOST_FTDC_BIR_Property: u8 = 49u8;
pub const THOST_FTDC_BIR_All: u8 = 50u8;
pub const THOST_FTDC_PIR_All: u8 = 49u8;
pub const THOST_FTDC_PIR_Property: u8 = 50u8;
pub const THOST_FTDC_PIR_Single: u8 = 51u8;
pub const THOST_FTDC_FIS_NoCreate: u8 = 48u8;
pub const THOST_FTDC_FIS_Created: u8 = 49u8;
pub const THOST_FTDC_FIS_Failed: u8 = 50u8;
pub const THOST_FTDC_FGS_FileTransmit: u8 = 48u8;
pub const THOST_FTDC_FGS_FileGen: u8 = 49u8;
pub const THOST_FTDC_SoM_Add: u8 = 49u8;
pub const THOST_FTDC_SoM_Update: u8 = 50u8;
pub const THOST_FTDC_SoM_Delete: u8 = 51u8;
pub const THOST_FTDC_SoM_Copy: u8 = 52u8;
pub const THOST_FTDC_SoM_AcTive: u8 = 53u8;
pub const THOST_FTDC_SoM_CanCel: u8 = 54u8;
pub const THOST_FTDC_SoM_ReSet: u8 = 55u8;
pub const THOST_FTDC_SoT_UpdatePassword: u8 = 48u8;
pub const THOST_FTDC_SoT_UserDepartment: u8 = 49u8;
pub const THOST_FTDC_SoT_RoleManager: u8 = 50u8;
pub const THOST_FTDC_SoT_RoleFunction: u8 = 51u8;
pub const THOST_FTDC_SoT_BaseParam: u8 = 52u8;
pub const THOST_FTDC_SoT_SetUserID: u8 = 53u8;
pub const THOST_FTDC_SoT_SetUserRole: u8 = 54u8;
pub const THOST_FTDC_SoT_UserIpRestriction: u8 = 55u8;
pub const THOST_FTDC_SoT_DepartmentManager: u8 = 56u8;
pub const THOST_FTDC_SoT_DepartmentCopy: u8 = 57u8;
pub const THOST_FTDC_SoT_Tradingcode: u8 = 65u8;
pub const THOST_FTDC_SoT_InvestorStatus: u8 = 66u8;
pub const THOST_FTDC_SoT_InvestorAuthority: u8 = 67u8;
pub const THOST_FTDC_SoT_PropertySet: u8 = 68u8;
pub const THOST_FTDC_SoT_ReSetInvestorPasswd: u8 = 69u8;
pub const THOST_FTDC_SoT_InvestorPersonalityInfo: u8 = 70u8;
pub const THOST_FTDC_CSRCQ_Current: u8 = 48u8;
pub const THOST_FTDC_CSRCQ_History: u8 = 49u8;
pub const THOST_FTDC_FRS_Normal: u8 = 49u8;
pub const THOST_FTDC_FRS_Freeze: u8 = 48u8;
pub const THOST_FTDC_STST_Standard: u8 = 48u8;
pub const THOST_FTDC_STST_NonStandard: u8 = 49u8;
pub const THOST_FTDC_RPT_Freeze: u8 = 49u8;
pub const THOST_FTDC_RPT_FreezeActive: u8 = 50u8;
pub const THOST_FTDC_RPT_OpenLimit: u8 = 51u8;
pub const THOST_FTDC_RPT_RelieveOpenLimit: u8 = 52u8;
pub const THOST_FTDC_AMLDS_Normal: u8 = 48u8;
pub const THOST_FTDC_AMLDS_Deleted: u8 = 49u8;
pub const THOST_FTDC_AMLCHS_Init: u8 = 48u8;
pub const THOST_FTDC_AMLCHS_Checking: u8 = 49u8;
pub const THOST_FTDC_AMLCHS_Checked: u8 = 50u8;
pub const THOST_FTDC_AMLCHS_RefuseReport: u8 = 51u8;
pub const THOST_FTDC_AMLDT_DrawDay: u8 = 48u8;
pub const THOST_FTDC_AMLDT_TouchDay: u8 = 49u8;
pub const THOST_FTDC_AMLCL_CheckLevel0: u8 = 48u8;
pub const THOST_FTDC_AMLCL_CheckLevel1: u8 = 49u8;
pub const THOST_FTDC_AMLCL_CheckLevel2: u8 = 50u8;
pub const THOST_FTDC_AMLCL_CheckLevel3: u8 = 51u8;
pub const THOST_FTDC_EFT_CSV: u8 = 48u8;
pub const THOST_FTDC_EFT_EXCEL: u8 = 49u8;
pub const THOST_FTDC_EFT_DBF: u8 = 50u8;
pub const THOST_FTDC_SMT_Before: u8 = 49u8;
pub const THOST_FTDC_SMT_Settlement: u8 = 50u8;
pub const THOST_FTDC_SMT_After: u8 = 51u8;
pub const THOST_FTDC_SMT_Settlemented: u8 = 52u8;
pub const THOST_FTDC_SML_Must: u8 = 49u8;
pub const THOST_FTDC_SML_Alarm: u8 = 50u8;
pub const THOST_FTDC_SML_Prompt: u8 = 51u8;
pub const THOST_FTDC_SML_Ignore: u8 = 52u8;
pub const THOST_FTDC_SMG_Exhcange: u8 = 49u8;
pub const THOST_FTDC_SMG_ASP: u8 = 50u8;
pub const THOST_FTDC_SMG_CSRC: u8 = 51u8;
pub const THOST_FTDC_LUT_Repeatable: u8 = 49u8;
pub const THOST_FTDC_LUT_Unrepeatable: u8 = 50u8;
pub const THOST_FTDC_DAR_Settle: u8 = 49u8;
pub const THOST_FTDC_DAR_Exchange: u8 = 50u8;
pub const THOST_FTDC_DAR_CSRC: u8 = 51u8;
pub const THOST_FTDC_MGT_ExchMarginRate: u8 = 48u8;
pub const THOST_FTDC_MGT_InstrMarginRate: u8 = 49u8;
pub const THOST_FTDC_MGT_InstrMarginRateTrade: u8 = 50u8;
pub const THOST_FTDC_ACT_Intraday: u8 = 49u8;
pub const THOST_FTDC_ACT_Long: u8 = 50u8;
pub const THOST_FTDC_MRT_Exchange: u8 = 49u8;
pub const THOST_FTDC_MRT_Investor: u8 = 50u8;
pub const THOST_FTDC_MRT_InvestorTrade: u8 = 51u8;
pub const THOST_FTDC_BUS_UnBak: u8 = 48u8;
pub const THOST_FTDC_BUS_BakUp: u8 = 49u8;
pub const THOST_FTDC_BUS_BakUped: u8 = 50u8;
pub const THOST_FTDC_BUS_BakFail: u8 = 51u8;
pub const THOST_FTDC_SIS_UnInitialize: u8 = 48u8;
pub const THOST_FTDC_SIS_Initialize: u8 = 49u8;
pub const THOST_FTDC_SIS_Initialized: u8 = 50u8;
pub const THOST_FTDC_SRS_NoCreate: u8 = 48u8;
pub const THOST_FTDC_SRS_Create: u8 = 49u8;
pub const THOST_FTDC_SRS_Created: u8 = 50u8;
pub const THOST_FTDC_SRS_CreateFail: u8 = 51u8;
pub const THOST_FTDC_SSS_UnSaveData: u8 = 48u8;
pub const THOST_FTDC_SSS_SaveDatad: u8 = 49u8;
pub const THOST_FTDC_SAS_UnArchived: u8 = 48u8;
pub const THOST_FTDC_SAS_Archiving: u8 = 49u8;
pub const THOST_FTDC_SAS_Archived: u8 = 50u8;
pub const THOST_FTDC_SAS_ArchiveFail: u8 = 51u8;
pub const THOST_FTDC_CTPT_Unkown: u8 = 48u8;
pub const THOST_FTDC_CTPT_MainCenter: u8 = 49u8;
pub const THOST_FTDC_CTPT_BackUp: u8 = 50u8;
pub const THOST_FTDC_CDT_Normal: u8 = 48u8;
pub const THOST_FTDC_CDT_SpecFirst: u8 = 49u8;
pub const THOST_FTDC_MFUR_None: u8 = 48u8;
pub const THOST_FTDC_MFUR_Margin: u8 = 49u8;
pub const THOST_FTDC_MFUR_All: u8 = 50u8;
pub const THOST_FTDC_MFUR_CNY3: u8 = 51u8;
pub const THOST_FTDC_SPT_CzceHedge: u8 = 49u8;
pub const THOST_FTDC_SPT_IneForeignCurrency: u8 = 50u8;
pub const THOST_FTDC_SPT_DceOpenClose: u8 = 51u8;
pub const THOST_FTDC_FMT_Mortgage: u8 = 49u8;
pub const THOST_FTDC_FMT_Redemption: u8 = 50u8;
pub const THOST_FTDC_ASPI_BaseMargin: u8 = 49u8;
pub const THOST_FTDC_ASPI_LowestInterest: u8 = 50u8;
pub const THOST_FTDC_FMD_In: u8 = 49u8;
pub const THOST_FTDC_FMD_Out: u8 = 50u8;
pub const THOST_FTDC_BT_Profit: u8 = 48u8;
pub const THOST_FTDC_BT_Loss: u8 = 49u8;
pub const THOST_FTDC_BT_Other: u8 = 90u8;
pub const THOST_FTDC_SST_Manual: u8 = 48u8;
pub const THOST_FTDC_SST_Automatic: u8 = 49u8;
pub const THOST_FTDC_CED_Settlement: u8 = 48u8;
pub const THOST_FTDC_CED_Sale: u8 = 49u8;
pub const THOST_FTDC_CSS_Entry: u8 = 49u8;
pub const THOST_FTDC_CSS_Approve: u8 = 50u8;
pub const THOST_FTDC_CSS_Refuse: u8 = 51u8;
pub const THOST_FTDC_CSS_Revoke: u8 = 52u8;
pub const THOST_FTDC_CSS_Send: u8 = 53u8;
pub const THOST_FTDC_CSS_Success: u8 = 54u8;
pub const THOST_FTDC_CSS_Failure: u8 = 55u8;
pub const THOST_FTDC_REQF_NoSend: u8 = 48u8;
pub const THOST_FTDC_REQF_SendSuccess: u8 = 49u8;
pub const THOST_FTDC_REQF_SendFailed: u8 = 50u8;
pub const THOST_FTDC_REQF_WaitReSend: u8 = 51u8;
pub const THOST_FTDC_RESF_Success: u8 = 48u8;
pub const THOST_FTDC_RESF_InsuffiCient: u8 = 49u8;
pub const THOST_FTDC_RESF_UnKnown: u8 = 56u8;
pub const THOST_FTDC_EXS_Before: u8 = 48u8;
pub const THOST_FTDC_EXS_After: u8 = 49u8;
pub const THOST_FTDC_CR_Domestic: u8 = 49u8;
pub const THOST_FTDC_CR_GMT: u8 = 50u8;
pub const THOST_FTDC_CR_Foreign: u8 = 51u8;
pub const THOST_FTDC_HB_No: u8 = 48u8;
pub const THOST_FTDC_HB_Yes: u8 = 49u8;
pub const THOST_FTDC_SM_Normal: u8 = 49u8;
pub const THOST_FTDC_SM_Emerge: u8 = 50u8;
pub const THOST_FTDC_SM_Restore: u8 = 51u8;
pub const THOST_FTDC_TPT_Full: u8 = 49u8;
pub const THOST_FTDC_TPT_Increment: u8 = 50u8;
pub const THOST_FTDC_TPT_BackUp: u8 = 51u8;
pub const THOST_FTDC_LM_Trade: u8 = 48u8;
pub const THOST_FTDC_LM_Transfer: u8 = 49u8;
pub const THOST_FTDC_CPT_Instrument: u8 = 49u8;
pub const THOST_FTDC_CPT_Margin: u8 = 50u8;
pub const THOST_FTDC_HT_Yes: u8 = 49u8;
pub const THOST_FTDC_HT_No: u8 = 48u8;
pub const THOST_FTDC_AMT_Bank: u8 = 49u8;
pub const THOST_FTDC_AMT_Securities: u8 = 50u8;
pub const THOST_FTDC_AMT_Fund: u8 = 51u8;
pub const THOST_FTDC_AMT_Insurance: u8 = 52u8;
pub const THOST_FTDC_AMT_Trust: u8 = 53u8;
pub const THOST_FTDC_AMT_Other: u8 = 57u8;
pub const THOST_FTDC_CFIOT_FundIO: u8 = 48u8;
pub const THOST_FTDC_CFIOT_SwapCurrency: u8 = 49u8;
pub const THOST_FTDC_CAT_Futures: u8 = 49u8;
pub const THOST_FTDC_CAT_AssetmgrFuture: u8 = 50u8;
pub const THOST_FTDC_CAT_AssetmgrTrustee: u8 = 51u8;
pub const THOST_FTDC_CAT_AssetmgrTransfer: u8 = 52u8;
pub const THOST_FTDC_LT_Chinese: u8 = 49u8;
pub const THOST_FTDC_LT_English: u8 = 50u8;
pub const THOST_FTDC_AMCT_Person: u8 = 49u8;
pub const THOST_FTDC_AMCT_Organ: u8 = 50u8;
pub const THOST_FTDC_AMCT_SpecialOrgan: u8 = 52u8;
pub const THOST_FTDC_ASST_Futures: u8 = 51u8;
pub const THOST_FTDC_ASST_SpecialOrgan: u8 = 52u8;
pub const THOST_FTDC_CIT_HasExch: u8 = 48u8;
pub const THOST_FTDC_CIT_HasATP: u8 = 49u8;
pub const THOST_FTDC_CIT_HasDiff: u8 = 50u8;
pub const THOST_FTDC_DT_HandDeliv: u8 = 49u8;
pub const THOST_FTDC_DT_PersonDeliv: u8 = 50u8;
pub const THOST_FTDC_MMSA_NO: u8 = 48u8;
pub const THOST_FTDC_MMSA_YES: u8 = 49u8;
pub const THOST_FTDC_CACT_Person: u8 = 48u8;
pub const THOST_FTDC_CACT_Company: u8 = 49u8;
pub const THOST_FTDC_CACT_Other: u8 = 50u8;
pub const THOST_FTDC_UOAAT_Futures: u8 = 49u8;
pub const THOST_FTDC_UOAAT_SpecialOrgan: u8 = 50u8;
pub const THOST_FTDC_DEN_Buy: u8 = 48u8;
pub const THOST_FTDC_DEN_Sell: u8 = 49u8;
pub const THOST_FTDC_OFEN_Open: u8 = 48u8;
pub const THOST_FTDC_OFEN_Close: u8 = 49u8;
pub const THOST_FTDC_OFEN_ForceClose: u8 = 50u8;
pub const THOST_FTDC_OFEN_CloseToday: u8 = 51u8;
pub const THOST_FTDC_OFEN_CloseYesterday: u8 = 52u8;
pub const THOST_FTDC_OFEN_ForceOff: u8 = 53u8;
pub const THOST_FTDC_OFEN_LocalForceClose: u8 = 54u8;
pub const THOST_FTDC_HFEN_Speculation: u8 = 49u8;
pub const THOST_FTDC_HFEN_Arbitrage: u8 = 50u8;
pub const THOST_FTDC_HFEN_Hedge: u8 = 51u8;
pub const THOST_FTDC_FIOTEN_FundIO: u8 = 49u8;
pub const THOST_FTDC_FIOTEN_Transfer: u8 = 50u8;
pub const THOST_FTDC_FIOTEN_SwapCurrency: u8 = 51u8;
pub const THOST_FTDC_FTEN_Deposite: u8 = 49u8;
pub const THOST_FTDC_FTEN_ItemFund: u8 = 50u8;
pub const THOST_FTDC_FTEN_Company: u8 = 51u8;
pub const THOST_FTDC_FTEN_InnerTransfer: u8 = 52u8;
pub const THOST_FTDC_FDEN_In: u8 = 49u8;
pub const THOST_FTDC_FDEN_Out: u8 = 50u8;
pub const THOST_FTDC_FMDEN_In: u8 = 49u8;
pub const THOST_FTDC_FMDEN_Out: u8 = 50u8;
pub const THOST_FTDC_CP_CallOptions: u8 = 49u8;
pub const THOST_FTDC_CP_PutOptions: u8 = 50u8;
pub const THOST_FTDC_STM_Continental: u8 = 48u8;
pub const THOST_FTDC_STM_American: u8 = 49u8;
pub const THOST_FTDC_STM_Bermuda: u8 = 50u8;
pub const THOST_FTDC_STT_Hedge: u8 = 48u8;
pub const THOST_FTDC_STT_Match: u8 = 49u8;
pub const THOST_FTDC_APPT_NotStrikeNum: u8 = 52u8;
pub const THOST_FTDC_GUDS_Gen: u8 = 48u8;
pub const THOST_FTDC_GUDS_Hand: u8 = 49u8;
pub const THOST_FTDC_OER_NoExec: u8 = 110u8;
pub const THOST_FTDC_OER_Canceled: u8 = 99u8;
pub const THOST_FTDC_OER_OK: u8 = 48u8;
pub const THOST_FTDC_OER_NoPosition: u8 = 49u8;
pub const THOST_FTDC_OER_NoDeposit: u8 = 50u8;
pub const THOST_FTDC_OER_NoParticipant: u8 = 51u8;
pub const THOST_FTDC_OER_NoClient: u8 = 52u8;
pub const THOST_FTDC_OER_NoInstrument: u8 = 54u8;
pub const THOST_FTDC_OER_NoRight: u8 = 55u8;
pub const THOST_FTDC_OER_InvalidVolume: u8 = 56u8;
pub const THOST_FTDC_OER_NoEnoughHistoryTrade: u8 = 57u8;
pub const THOST_FTDC_OER_Unknown: u8 = 97u8;
pub const THOST_FTDC_COMBT_Future: u8 = 48u8;
pub const THOST_FTDC_COMBT_BUL: u8 = 49u8;
pub const THOST_FTDC_COMBT_BER: u8 = 50u8;
pub const THOST_FTDC_COMBT_STD: u8 = 51u8;
pub const THOST_FTDC_COMBT_STG: u8 = 52u8;
pub const THOST_FTDC_COMBT_PRT: u8 = 53u8;
pub const THOST_FTDC_COMBT_CAS: u8 = 54u8;
pub const THOST_FTDC_COMBT_OPL: u8 = 55u8;
pub const THOST_FTDC_COMBT_BFO: u8 = 56u8;
pub const THOST_FTDC_COMBT_BLS: u8 = 57u8;
pub const THOST_FTDC_COMBT_BES: u8 = 97u8;
pub const THOST_FTDC_DCECOMBT_SPL: u8 = 48u8;
pub const THOST_FTDC_DCECOMBT_OPL: u8 = 49u8;
pub const THOST_FTDC_DCECOMBT_SP: u8 = 50u8;
pub const THOST_FTDC_DCECOMBT_SPC: u8 = 51u8;
pub const THOST_FTDC_DCECOMBT_BLS: u8 = 52u8;
pub const THOST_FTDC_DCECOMBT_BES: u8 = 53u8;
pub const THOST_FTDC_DCECOMBT_CAS: u8 = 54u8;
pub const THOST_FTDC_DCECOMBT_STD: u8 = 55u8;
pub const THOST_FTDC_DCECOMBT_STG: u8 = 56u8;
pub const THOST_FTDC_DCECOMBT_BFO: u8 = 57u8;
pub const THOST_FTDC_DCECOMBT_SFO: u8 = 97u8;
pub const THOST_FTDC_ORPT_PreSettlementPrice: u8 = 49u8;
pub const THOST_FTDC_ORPT_OpenPrice: u8 = 52u8;
pub const THOST_FTDC_ORPT_MaxPreSettlementPrice: u8 = 53u8;
pub const THOST_FTDC_BLAG_Default: u8 = 49u8;
pub const THOST_FTDC_BLAG_IncludeOptValLost: u8 = 50u8;
pub const THOST_FTDC_ACTP_Exec: u8 = 49u8;
pub const THOST_FTDC_ACTP_Abandon: u8 = 50u8;
pub const THOST_FTDC_FQST_Submitted: u8 = 97u8;
pub const THOST_FTDC_FQST_Accepted: u8 = 98u8;
pub const THOST_FTDC_FQST_Rejected: u8 = 99u8;
pub const THOST_FTDC_VM_Absolute: u8 = 48u8;
pub const THOST_FTDC_VM_Ratio: u8 = 49u8;
pub const THOST_FTDC_EOPF_Reserve: u8 = 48u8;
pub const THOST_FTDC_EOPF_UnReserve: u8 = 49u8;
pub const THOST_FTDC_EOCF_AutoClose: u8 = 48u8;
pub const THOST_FTDC_EOCF_NotToClose: u8 = 49u8;
pub const THOST_FTDC_PTE_Futures: u8 = 49u8;
pub const THOST_FTDC_PTE_Options: u8 = 50u8;
pub const THOST_FTDC_CUFN_CUFN_O: u8 = 79u8;
pub const THOST_FTDC_CUFN_CUFN_T: u8 = 84u8;
pub const THOST_FTDC_CUFN_CUFN_P: u8 = 80u8;
pub const THOST_FTDC_CUFN_CUFN_N: u8 = 78u8;
pub const THOST_FTDC_CUFN_CUFN_L: u8 = 76u8;
pub const THOST_FTDC_CUFN_CUFN_F: u8 = 70u8;
pub const THOST_FTDC_CUFN_CUFN_C: u8 = 67u8;
pub const THOST_FTDC_CUFN_CUFN_M: u8 = 77u8;
pub const THOST_FTDC_DUFN_DUFN_O: u8 = 79u8;
pub const THOST_FTDC_DUFN_DUFN_T: u8 = 84u8;
pub const THOST_FTDC_DUFN_DUFN_P: u8 = 80u8;
pub const THOST_FTDC_DUFN_DUFN_F: u8 = 70u8;
pub const THOST_FTDC_DUFN_DUFN_C: u8 = 67u8;
pub const THOST_FTDC_DUFN_DUFN_D: u8 = 68u8;
pub const THOST_FTDC_DUFN_DUFN_M: u8 = 77u8;
pub const THOST_FTDC_DUFN_DUFN_S: u8 = 83u8;
pub const THOST_FTDC_SUFN_SUFN_O: u8 = 79u8;
pub const THOST_FTDC_SUFN_SUFN_T: u8 = 84u8;
pub const THOST_FTDC_SUFN_SUFN_P: u8 = 80u8;
pub const THOST_FTDC_SUFN_SUFN_F: u8 = 70u8;
pub const THOST_FTDC_CFUFN_SUFN_T: u8 = 84u8;
pub const THOST_FTDC_CFUFN_SUFN_P: u8 = 80u8;
pub const THOST_FTDC_CFUFN_SUFN_F: u8 = 70u8;
pub const THOST_FTDC_CFUFN_SUFN_S: u8 = 83u8;
pub const THOST_FTDC_CMDR_Comb: u8 = 48u8;
pub const THOST_FTDC_CMDR_UnComb: u8 = 49u8;
pub const THOST_FTDC_CMDR_DelComb: u8 = 50u8;
pub const THOST_FTDC_STOV_RealValue: u8 = 49u8;
pub const THOST_FTDC_STOV_ProfitValue: u8 = 50u8;
pub const THOST_FTDC_STOV_RealRatio: u8 = 51u8;
pub const THOST_FTDC_STOV_ProfitRatio: u8 = 52u8;
pub const THOST_FTDC_ROAST_Processing: u8 = 48u8;
pub const THOST_FTDC_ROAST_Cancelled: u8 = 49u8;
pub const THOST_FTDC_ROAST_Opened: u8 = 50u8;
pub const THOST_FTDC_ROAST_Invalid: u8 = 51u8;
pub const THOST_FTDC_WPSR_Lib: u8 = 49u8;
pub const THOST_FTDC_WPSR_Manual: u8 = 50u8;
pub const THOST_FTDC_OSCF_CloseSelfOptionPosition: u8 = 49u8;
pub const THOST_FTDC_OSCF_ReserveOptionPosition: u8 = 50u8;
pub const THOST_FTDC_OSCF_SellCloseSelfFuturePosition: u8 = 51u8;
pub const THOST_FTDC_OSCF_ReserveFuturePosition: u8 = 52u8;
pub const THOST_FTDC_BZTP_Future: u8 = 49u8;
pub const THOST_FTDC_BZTP_Stock: u8 = 50u8;
pub const THOST_FTDC_APP_TYPE_Investor: u8 = 49u8;
pub const THOST_FTDC_APP_TYPE_InvestorRelay: u8 = 50u8;
pub const THOST_FTDC_APP_TYPE_OperatorRelay: u8 = 51u8;
pub const THOST_FTDC_APP_TYPE_UnKnown: u8 = 52u8;
pub const THOST_FTDC_RV_Right: u8 = 48u8;
pub const THOST_FTDC_RV_Refuse: u8 = 49u8;
pub const THOST_FTDC_OTC_TRDT_Block: u8 = 48u8;
pub const THOST_FTDC_OTC_TRDT_EFP: u8 = 49u8;
pub const THOST_FTDC_OTC_MT_DV01: u8 = 49u8;
pub const THOST_FTDC_OTC_MT_ParValue: u8 = 50u8;
pub const THOST_FTDC_AU_WHITE: u8 = 48u8;
pub const THOST_FTDC_AU_BLACK: u8 = 49u8;
pub const THOST_FTDC_INS_ALL: u8 = 48u8;
pub const THOST_FTDC_INS_FUTURE: u8 = 49u8;
pub const THOST_FTDC_INS_OPTION: u8 = 50u8;
pub const THOST_FTDC_INS_COMB: u8 = 51u8;
pub const THOST_FTDC_TD_ALL: u8 = 48u8;
pub const THOST_FTDC_TD_TRADE: u8 = 49u8;
pub const THOST_FTDC_TD_UNTRADE: u8 = 50u8;
pub const THOST_FTDC_PS_tradeable: u8 = 49u8;
pub const THOST_FTDC_PS_untradeable: u8 = 50u8;
pub const THOST_FTDC_SDS_Readable: u8 = 49u8;
pub const THOST_FTDC_SDS_Reading: u8 = 50u8;
pub const THOST_FTDC_SDS_Readend: u8 = 51u8;
pub const THOST_FTDC_SDS_OptErr: u8 = 101u8;
pub const THOST_FTDC_ACD_Add: u8 = 49u8;
pub const THOST_FTDC_ACD_Del: u8 = 50u8;
pub const THOST_FTDC_ACD_Upd: u8 = 51u8;
pub const THOST_TE_RESUME_TYPE_THOST_TERT_RESTART: THOST_TE_RESUME_TYPE = 0;
pub const THOST_TE_RESUME_TYPE_THOST_TERT_RESUME: THOST_TE_RESUME_TYPE = 1;
pub const THOST_TE_RESUME_TYPE_THOST_TERT_QUICK: THOST_TE_RESUME_TYPE = 2;
pub const THOST_TE_RESUME_TYPE_THOST_TERT_NONE: THOST_TE_RESUME_TYPE = 3;
pub type THOST_TE_RESUME_TYPE = ::std::os::raw::c_uint;
#[doc = ""]
#[doc = "TFtdcTraderIDType��һ������������Ա��������"]
#[doc = ""]
pub type TThostFtdcTraderIDType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcInvestorIDType��һ��Ͷ���ߴ�������"]
#[doc = ""]
pub type TThostFtdcInvestorIDType = [::std::os::raw::c_uchar; 13usize];
#[doc = ""]
#[doc = "TFtdcBrokerIDType��һ�����\u{379}�˾��������"]
#[doc = ""]
pub type TThostFtdcBrokerIDType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcBrokerAbbrType��һ�����\u{379}�˾�������"]
#[doc = ""]
pub type TThostFtdcBrokerAbbrType = [::std::os::raw::c_uchar; 9usize];
#[doc = ""]
#[doc = "TFtdcBrokerNameType��һ�����\u{379}�˾��������"]
#[doc = ""]
pub type TThostFtdcBrokerNameType = [::std::os::raw::c_uchar; 81usize];
#[doc = ""]
#[doc = "TFtdcOldExchangeInstIDType��һ����Լ�ڽ������Ĵ�������"]
#[doc = ""]
pub type TThostFtdcOldExchangeInstIDType = [::std::os::raw::c_uchar; 31usize];
#[doc = ""]
#[doc = "TFtdcExchangeInstIDType��һ����Լ�ڽ������Ĵ�������"]
#[doc = ""]
pub type TThostFtdcExchangeInstIDType = [::std::os::raw::c_uchar; 81usize];
#[doc = ""]
#[doc = "TFtdcOrderRefType��һ��������������"]
#[doc = ""]
pub type TThostFtdcOrderRefType = [::std::os::raw::c_uchar; 13usize];
#[doc = ""]
#[doc = "TFtdcParticipantIDType��һ����Ա��������"]
#[doc = ""]
pub type TThostFtdcParticipantIDType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcUserIDType��һ���û���������"]
#[doc = ""]
pub type TThostFtdcUserIDType = [::std::os::raw::c_uchar; 16usize];
#[doc = ""]
#[doc = "TFtdcPasswordType��һ����������"]
#[doc = ""]
pub type TThostFtdcPasswordType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcClientIDType��һ�����ױ�������"]
#[doc = ""]
pub type TThostFtdcClientIDType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcInstrumentIDType��һ����Լ��������"]
#[doc = ""]
pub type TThostFtdcInstrumentIDType = [::std::os::raw::c_uchar; 81usize];
#[doc = ""]
#[doc = "TFtdcOldInstrumentIDType��һ����Լ��������"]
#[doc = ""]
pub type TThostFtdcOldInstrumentIDType = [::std::os::raw::c_uchar; 31usize];
#[doc = ""]
#[doc = "TFtdcInstrumentCodeType��һ����Լ��ʶ������"]
#[doc = ""]
pub type TThostFtdcInstrumentCodeType = [::std::os::raw::c_uchar; 31usize];
#[doc = ""]
#[doc = "TFtdcMarketIDType��һ���г���������"]
#[doc = ""]
pub type TThostFtdcMarketIDType = [::std::os::raw::c_uchar; 31usize];
#[doc = ""]
#[doc = "TFtdcProductNameType��һ����Ʒ��������"]
#[doc = ""]
pub type TThostFtdcProductNameType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcExchangeIDType��һ����������������"]
#[doc = ""]
pub type TThostFtdcExchangeIDType = [::std::os::raw::c_uchar; 9usize];
#[doc = ""]
#[doc = "TFtdcExchangeNameType��һ����������������"]
#[doc = ""]
pub type TThostFtdcExchangeNameType = [::std::os::raw::c_uchar; 61usize];
#[doc = ""]
#[doc = "TFtdcExchangeAbbrType��һ���������������"]
#[doc = ""]
pub type TThostFtdcExchangeAbbrType = [::std::os::raw::c_uchar; 9usize];
#[doc = ""]
#[doc = "TFtdcExchangeFlagType��һ����������־����"]
#[doc = ""]
pub type TThostFtdcExchangeFlagType = [::std::os::raw::c_uchar; 2usize];
#[doc = ""]
#[doc = "TFtdcMacAddressType��һ��Mac��\u{5b7}����"]
#[doc = ""]
pub type TThostFtdcMacAddressType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcSystemIDType��һ��ϵͳ�������"]
#[doc = ""]
pub type TThostFtdcSystemIDType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcClientLoginRemarkType��һ���ͻ���¼��ע2����"]
#[doc = ""]
pub type TThostFtdcClientLoginRemarkType = [::std::os::raw::c_uchar; 151usize];
pub type TThostFtdcExchangePropertyType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcDateType��һ����������"]
#[doc = ""]
pub type TThostFtdcDateType = [::std::os::raw::c_uchar; 9usize];
#[doc = ""]
#[doc = "TFtdcTimeType��һ��ʱ������"]
#[doc = ""]
pub type TThostFtdcTimeType = [::std::os::raw::c_uchar; 9usize];
#[doc = ""]
#[doc = "TFtdcLongTimeType��һ����ʱ������"]
#[doc = ""]
pub type TThostFtdcLongTimeType = [::std::os::raw::c_uchar; 13usize];
#[doc = ""]
#[doc = "TFtdcInstrumentNameType��һ����Լ��������"]
#[doc = ""]
pub type TThostFtdcInstrumentNameType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcSettlementGroupIDType��һ���������������"]
#[doc = ""]
pub type TThostFtdcSettlementGroupIDType = [::std::os::raw::c_uchar; 9usize];
#[doc = ""]
#[doc = "TFtdcOrderSysIDType��һ�������������"]
#[doc = ""]
pub type TThostFtdcOrderSysIDType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcTradeIDType��һ���ɽ��������"]
#[doc = ""]
pub type TThostFtdcTradeIDType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcCommandTypeType��һ��DB������������"]
#[doc = ""]
pub type TThostFtdcCommandTypeType = [::std::os::raw::c_uchar; 65usize];
#[doc = ""]
#[doc = "TFtdcOldIPAddressType��һ��IP��\u{5b7}����"]
#[doc = ""]
pub type TThostFtdcOldIPAddressType = [::std::os::raw::c_uchar; 16usize];
#[doc = ""]
#[doc = "TFtdcIPAddressType��һ��IP��\u{5b7}����"]
#[doc = ""]
pub type TThostFtdcIPAddressType = [::std::os::raw::c_uchar; 33usize];
#[doc = ""]
#[doc = "TFtdcIPPortType��һ��IP�˿�����"]
#[doc = ""]
pub type TThostFtdcIPPortType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcProductInfoType��һ����Ʒ��Ϣ����"]
#[doc = ""]
pub type TThostFtdcProductInfoType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcProtocolInfoType��һ��Э����Ϣ����"]
#[doc = ""]
pub type TThostFtdcProtocolInfoType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcBusinessUnitType��һ��ҵ��Ԫ����"]
#[doc = ""]
pub type TThostFtdcBusinessUnitType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcDepositSeqNoType��һ���������ˮ������"]
#[doc = ""]
pub type TThostFtdcDepositSeqNoType = [::std::os::raw::c_uchar; 15usize];
#[doc = ""]
#[doc = "TFtdcIdentifiedCardNoType��һ��\u{5a4}����������"]
#[doc = ""]
pub type TThostFtdcIdentifiedCardNoType = [::std::os::raw::c_uchar; 51usize];
pub type TThostFtdcIdCardTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcOrderLocalIDType��һ�����ر����������"]
#[doc = ""]
pub type TThostFtdcOrderLocalIDType = [::std::os::raw::c_uchar; 13usize];
#[doc = ""]
#[doc = "TFtdcUserNameType��һ���û���������"]
#[doc = ""]
pub type TThostFtdcUserNameType = [::std::os::raw::c_uchar; 81usize];
#[doc = ""]
#[doc = "TFtdcPartyNameType��һ����������������"]
#[doc = ""]
pub type TThostFtdcPartyNameType = [::std::os::raw::c_uchar; 81usize];
#[doc = ""]
#[doc = "TFtdcErrorMsgType��һ��������Ϣ����"]
#[doc = ""]
pub type TThostFtdcErrorMsgType = [::std::os::raw::c_uchar; 81usize];
#[doc = ""]
#[doc = "TFtdcFieldNameType��һ���\u{5b6}�������"]
#[doc = ""]
pub type TThostFtdcFieldNameType = [::std::os::raw::c_uchar; 2049usize];
#[doc = ""]
#[doc = "TFtdcFieldContentType��һ���\u{5b6}���������"]
#[doc = ""]
pub type TThostFtdcFieldContentType = [::std::os::raw::c_uchar; 2049usize];
#[doc = ""]
#[doc = "TFtdcSystemNameType��һ��ϵͳ��������"]
#[doc = ""]
pub type TThostFtdcSystemNameType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcContentType��һ����Ϣ��������"]
#[doc = ""]
pub type TThostFtdcContentType = [::std::os::raw::c_uchar; 501usize];
pub type TThostFtdcInvestorRangeType = ::std::os::raw::c_uchar;
pub type TThostFtdcDepartmentRangeType = ::std::os::raw::c_uchar;
pub type TThostFtdcDataSyncStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcBrokerDataSyncStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcExchangeConnectStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcTraderConnectStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcFunctionCodeType = ::std::os::raw::c_uchar;
pub type TThostFtdcBrokerFunctionCodeType = ::std::os::raw::c_uchar;
pub type TThostFtdcOrderActionStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcOrderStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcOrderSubmitStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcPositionDateType = ::std::os::raw::c_uchar;
pub type TThostFtdcPositionDateTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcTradingRoleType = ::std::os::raw::c_uchar;
pub type TThostFtdcProductClassType = ::std::os::raw::c_uchar;
pub type TThostFtdcAPIProductClassType = ::std::os::raw::c_uchar;
pub type TThostFtdcInstLifePhaseType = ::std::os::raw::c_uchar;
pub type TThostFtdcDirectionType = ::std::os::raw::c_uchar;
pub type TThostFtdcPositionTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcPosiDirectionType = ::std::os::raw::c_uchar;
pub type TThostFtdcSysSettlementStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcRatioAttrType = ::std::os::raw::c_uchar;
pub type TThostFtdcHedgeFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcBillHedgeFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcClientIDTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcOrderPriceTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcOffsetFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcForceCloseReasonType = ::std::os::raw::c_uchar;
pub type TThostFtdcOrderTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcTimeConditionType = ::std::os::raw::c_uchar;
pub type TThostFtdcVolumeConditionType = ::std::os::raw::c_uchar;
pub type TThostFtdcContingentConditionType = ::std::os::raw::c_uchar;
pub type TThostFtdcActionFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcTradingRightType = ::std::os::raw::c_uchar;
pub type TThostFtdcOrderSourceType = ::std::os::raw::c_uchar;
pub type TThostFtdcTradeTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcSpecPosiTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcPriceSourceType = ::std::os::raw::c_uchar;
pub type TThostFtdcInstrumentStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcInstStatusEnterReasonType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcOrderActionRefType��һ������������������"]
#[doc = ""]
pub type TThostFtdcOrderActionRefType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcInstallCountType��һ����װ��������"]
#[doc = ""]
pub type TThostFtdcInstallCountType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcInstallIDType��һ����װ�������"]
#[doc = ""]
pub type TThostFtdcInstallIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcErrorIDType��һ�������������"]
#[doc = ""]
pub type TThostFtdcErrorIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcSettlementIDType��һ������������"]
#[doc = ""]
pub type TThostFtdcSettlementIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcVolumeType��һ����������"]
#[doc = ""]
pub type TThostFtdcVolumeType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcFrontIDType��һ��ǰ�ñ������"]
#[doc = ""]
pub type TThostFtdcFrontIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcSessionIDType��һ���Ự�������"]
#[doc = ""]
pub type TThostFtdcSessionIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcSequenceNoType��һ���������"]
#[doc = ""]
pub type TThostFtdcSequenceNoType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcCommandNoType��һ��DB�����������"]
#[doc = ""]
pub type TThostFtdcCommandNoType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcMillisecType��һ��ʱ�䣨���룩����"]
#[doc = ""]
pub type TThostFtdcMillisecType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcSecType��һ��ʱ�䣨�룩����"]
#[doc = ""]
pub type TThostFtdcSecType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcVolumeMultipleType��һ����Լ������������"]
#[doc = ""]
pub type TThostFtdcVolumeMultipleType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcTradingSegmentSNType��һ�����\u{5fd}\u{5f6}α������"]
#[doc = ""]
pub type TThostFtdcTradingSegmentSNType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcRequestIDType��һ������������"]
#[doc = ""]
pub type TThostFtdcRequestIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcYearType��һ���������"]
#[doc = ""]
pub type TThostFtdcYearType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcMonthType��һ���·�����"]
#[doc = ""]
pub type TThostFtdcMonthType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcBoolType��һ������������"]
#[doc = ""]
pub type TThostFtdcBoolType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcPriceType��һ���۸�����"]
#[doc = ""]
pub type TThostFtdcPriceType = f64;
#[doc = ""]
#[doc = "TFtdcCombOffsetFlagType��һ����Ͽ�ƽ��־����"]
#[doc = ""]
pub type TThostFtdcCombOffsetFlagType = [::std::os::raw::c_uchar; 5usize];
#[doc = ""]
#[doc = "TFtdcCombHedgeFlagType��һ�����Ͷ���ױ���־����"]
#[doc = ""]
pub type TThostFtdcCombHedgeFlagType = [::std::os::raw::c_uchar; 5usize];
#[doc = ""]
#[doc = "TFtdcRatioType��һ����������"]
#[doc = ""]
pub type TThostFtdcRatioType = f64;
#[doc = ""]
#[doc = "TFtdcMoneyType��һ���ʽ�����"]
#[doc = ""]
pub type TThostFtdcMoneyType = f64;
#[doc = ""]
#[doc = "TFtdcLargeVolumeType��һ�������������"]
#[doc = ""]
pub type TThostFtdcLargeVolumeType = f64;
#[doc = ""]
#[doc = "TFtdcSequenceSeriesType��һ������ϵ�к�����"]
#[doc = ""]
pub type TThostFtdcSequenceSeriesType = ::std::os::raw::c_short;
#[doc = ""]
#[doc = "TFtdcCommPhaseNoType��һ��\u{368}Ѷʱ�α������"]
#[doc = ""]
pub type TThostFtdcCommPhaseNoType = ::std::os::raw::c_short;
#[doc = ""]
#[doc = "TFtdcSequenceLabelType��һ�����б������"]
#[doc = ""]
pub type TThostFtdcSequenceLabelType = [::std::os::raw::c_uchar; 2usize];
#[doc = ""]
#[doc = "TFtdcUnderlyingMultipleType��һ��������Ʒ��������"]
#[doc = ""]
pub type TThostFtdcUnderlyingMultipleType = f64;
#[doc = ""]
#[doc = "TFtdcPriorityType��һ�����ȼ�����"]
#[doc = ""]
pub type TThostFtdcPriorityType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcContractCodeType��һ����\u{36c}�������"]
#[doc = ""]
pub type TThostFtdcContractCodeType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcCityType��һ��������"]
#[doc = ""]
pub type TThostFtdcCityType = [::std::os::raw::c_uchar; 51usize];
#[doc = ""]
#[doc = "TFtdcIsStockType��һ���Ƿ��������"]
#[doc = ""]
pub type TThostFtdcIsStockType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcChannelType��һ����������"]
#[doc = ""]
pub type TThostFtdcChannelType = [::std::os::raw::c_uchar; 51usize];
#[doc = ""]
#[doc = "TFtdcAddressType��һ��\u{368}Ѷ��\u{5b7}����"]
#[doc = ""]
pub type TThostFtdcAddressType = [::std::os::raw::c_uchar; 101usize];
#[doc = ""]
#[doc = "TFtdcZipCodeType��һ��������������"]
#[doc = ""]
pub type TThostFtdcZipCodeType = [::std::os::raw::c_uchar; 7usize];
#[doc = ""]
#[doc = "TFtdcTelephoneType��һ����ϵ�绰����"]
#[doc = ""]
pub type TThostFtdcTelephoneType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcFaxType��һ����������"]
#[doc = ""]
pub type TThostFtdcFaxType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcMobileType��һ���\u{5bb}�����"]
#[doc = ""]
pub type TThostFtdcMobileType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcEMailType��һ�������ʼ�����"]
#[doc = ""]
pub type TThostFtdcEMailType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcMemoType��һ����ע����"]
#[doc = ""]
pub type TThostFtdcMemoType = [::std::os::raw::c_uchar; 161usize];
#[doc = ""]
#[doc = "TFtdcCompanyCodeType��һ����ҵ��������"]
#[doc = ""]
pub type TThostFtdcCompanyCodeType = [::std::os::raw::c_uchar; 51usize];
#[doc = ""]
#[doc = "TFtdcWebsiteType��һ����վ��\u{5b7}����"]
#[doc = ""]
pub type TThostFtdcWebsiteType = [::std::os::raw::c_uchar; 51usize];
#[doc = ""]
#[doc = "TFtdcTaxNoType��һ��˰��ǼǺ�����"]
#[doc = ""]
pub type TThostFtdcTaxNoType = [::std::os::raw::c_uchar; 31usize];
pub type TThostFtdcBatchStatusType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcPropertyIDType��һ�����Դ�������"]
#[doc = ""]
pub type TThostFtdcPropertyIDType = [::std::os::raw::c_uchar; 33usize];
#[doc = ""]
#[doc = "TFtdcPropertyNameType��һ��������������"]
#[doc = ""]
pub type TThostFtdcPropertyNameType = [::std::os::raw::c_uchar; 65usize];
#[doc = ""]
#[doc = "TFtdcLicenseNoType��һ��Ӫҵ\u{5b4}�պ�����"]
#[doc = ""]
pub type TThostFtdcLicenseNoType = [::std::os::raw::c_uchar; 51usize];
#[doc = ""]
#[doc = "TFtdcAgentIDType��һ�������˴�������"]
#[doc = ""]
pub type TThostFtdcAgentIDType = [::std::os::raw::c_uchar; 13usize];
#[doc = ""]
#[doc = "TFtdcAgentNameType��һ����������������"]
#[doc = ""]
pub type TThostFtdcAgentNameType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcAgentGroupIDType��һ�����������������"]
#[doc = ""]
pub type TThostFtdcAgentGroupIDType = [::std::os::raw::c_uchar; 13usize];
#[doc = ""]
#[doc = "TFtdcAgentGroupNameType��һ������������������"]
#[doc = ""]
pub type TThostFtdcAgentGroupNameType = [::std::os::raw::c_uchar; 41usize];
pub type TThostFtdcReturnStyleType = ::std::os::raw::c_uchar;
pub type TThostFtdcReturnPatternType = ::std::os::raw::c_uchar;
pub type TThostFtdcReturnLevelType = ::std::os::raw::c_uchar;
pub type TThostFtdcReturnStandardType = ::std::os::raw::c_uchar;
pub type TThostFtdcMortgageTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcInvestorSettlementParamIDType = ::std::os::raw::c_uchar;
pub type TThostFtdcExchangeSettlementParamIDType = ::std::os::raw::c_uchar;
pub type TThostFtdcSystemParamIDType = ::std::os::raw::c_uchar;
pub type TThostFtdcTradeParamIDType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcSettlementParamValueType��һ����������\u{5b5}����"]
#[doc = ""]
pub type TThostFtdcSettlementParamValueType = [::std::os::raw::c_uchar; 256usize];
#[doc = ""]
#[doc = "TFtdcCounterIDType��һ����������������"]
#[doc = ""]
pub type TThostFtdcCounterIDType = [::std::os::raw::c_uchar; 33usize];
#[doc = ""]
#[doc = "TFtdcInvestorGroupNameType��һ��Ͷ���߷�����������"]
#[doc = ""]
pub type TThostFtdcInvestorGroupNameType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcBrandCodeType��һ���ƺ�����"]
#[doc = ""]
pub type TThostFtdcBrandCodeType = [::std::os::raw::c_uchar; 257usize];
#[doc = ""]
#[doc = "TFtdcWarehouseType��һ���\u{5bf}�����"]
#[doc = ""]
pub type TThostFtdcWarehouseType = [::std::os::raw::c_uchar; 257usize];
#[doc = ""]
#[doc = "TFtdcProductDateType��һ����������"]
#[doc = ""]
pub type TThostFtdcProductDateType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcGradeType��һ���ȼ�����"]
#[doc = ""]
pub type TThostFtdcGradeType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcClassifyType��һ���������"]
#[doc = ""]
pub type TThostFtdcClassifyType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcPositionType��һ����λ����"]
#[doc = ""]
pub type TThostFtdcPositionType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcYieldlyType��һ����������"]
#[doc = ""]
pub type TThostFtdcYieldlyType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcWeightType��һ��������������"]
#[doc = ""]
pub type TThostFtdcWeightType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcSubEntryFundNoType��һ�������ʽ���ˮ������"]
#[doc = ""]
pub type TThostFtdcSubEntryFundNoType = ::std::os::raw::c_int;
pub type TThostFtdcFileIDType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcFileNameType��һ���ļ���������"]
#[doc = ""]
pub type TThostFtdcFileNameType = [::std::os::raw::c_uchar; 257usize];
pub type TThostFtdcFileTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFileFormatType = ::std::os::raw::c_uchar;
pub type TThostFtdcFileUploadStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcTransferDirectionType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcUploadModeType��һ���ϴ��ļ���������"]
#[doc = ""]
pub type TThostFtdcUploadModeType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcAccountIDType��һ��Ͷ�����ʺ�����"]
#[doc = ""]
pub type TThostFtdcAccountIDType = [::std::os::raw::c_uchar; 13usize];
#[doc = ""]
#[doc = "TFtdcBankFlagType��һ������ͳһ��ʶ��������"]
#[doc = ""]
pub type TThostFtdcBankFlagType = [::std::os::raw::c_uchar; 4usize];
#[doc = ""]
#[doc = "TFtdcBankAccountType��һ�������˻�����"]
#[doc = ""]
pub type TThostFtdcBankAccountType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcOpenNameType��һ�������˻��Ŀ�������������"]
#[doc = ""]
pub type TThostFtdcOpenNameType = [::std::os::raw::c_uchar; 61usize];
#[doc = ""]
#[doc = "TFtdcOpenBankType��һ�������˻��Ŀ���������"]
#[doc = ""]
pub type TThostFtdcOpenBankType = [::std::os::raw::c_uchar; 101usize];
#[doc = ""]
#[doc = "TFtdcBankNameType��һ��������������"]
#[doc = ""]
pub type TThostFtdcBankNameType = [::std::os::raw::c_uchar; 101usize];
#[doc = ""]
#[doc = "TFtdcPublishPathType��һ������·������"]
#[doc = ""]
pub type TThostFtdcPublishPathType = [::std::os::raw::c_uchar; 257usize];
#[doc = ""]
#[doc = "TFtdcOperatorIDType��һ������Ա��������"]
#[doc = ""]
pub type TThostFtdcOperatorIDType = [::std::os::raw::c_uchar; 65usize];
#[doc = ""]
#[doc = "TFtdcMonthCountType��һ���·���������"]
#[doc = ""]
pub type TThostFtdcMonthCountType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcAdvanceMonthArrayType��һ���·���ǰ��������"]
#[doc = ""]
pub type TThostFtdcAdvanceMonthArrayType = [::std::os::raw::c_uchar; 13usize];
#[doc = ""]
#[doc = "TFtdcDateExprType��һ�����ڱ���ʽ����"]
#[doc = ""]
pub type TThostFtdcDateExprType = [::std::os::raw::c_uchar; 1025usize];
#[doc = ""]
#[doc = "TFtdcInstrumentIDExprType��һ����Լ�������ʽ����"]
#[doc = ""]
pub type TThostFtdcInstrumentIDExprType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcInstrumentNameExprType��һ����Լ���Ʊ���ʽ����"]
#[doc = ""]
pub type TThostFtdcInstrumentNameExprType = [::std::os::raw::c_uchar; 41usize];
pub type TThostFtdcSpecialCreateRuleType = ::std::os::raw::c_uchar;
pub type TThostFtdcBasisPriceTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcProductLifePhaseType = ::std::os::raw::c_uchar;
pub type TThostFtdcDeliveryModeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcLogLevelType��һ����־��������"]
#[doc = ""]
pub type TThostFtdcLogLevelType = [::std::os::raw::c_uchar; 33usize];
#[doc = ""]
#[doc = "TFtdcProcessNameType��һ���洢������������"]
#[doc = ""]
pub type TThostFtdcProcessNameType = [::std::os::raw::c_uchar; 257usize];
#[doc = ""]
#[doc = "TFtdcOperationMemoType��һ������ժҪ����"]
#[doc = ""]
pub type TThostFtdcOperationMemoType = [::std::os::raw::c_uchar; 1025usize];
pub type TThostFtdcFundIOTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFundTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFundDirectionType = ::std::os::raw::c_uchar;
pub type TThostFtdcFundStatusType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcBillNoType��һ��Ʊ�ݺ�����"]
#[doc = ""]
pub type TThostFtdcBillNoType = [::std::os::raw::c_uchar; 15usize];
#[doc = ""]
#[doc = "TFtdcBillNameType��һ��Ʊ����������"]
#[doc = ""]
pub type TThostFtdcBillNameType = [::std::os::raw::c_uchar; 33usize];
pub type TThostFtdcPublishStatusType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcEnumValueIDType��һ��ö��\u{5b5}��������"]
#[doc = ""]
pub type TThostFtdcEnumValueIDType = [::std::os::raw::c_uchar; 65usize];
#[doc = ""]
#[doc = "TFtdcEnumValueTypeType��һ��ö��\u{5b5}��������"]
#[doc = ""]
pub type TThostFtdcEnumValueTypeType = [::std::os::raw::c_uchar; 33usize];
#[doc = ""]
#[doc = "TFtdcEnumValueLabelType��һ��ö��\u{5b5}��������"]
#[doc = ""]
pub type TThostFtdcEnumValueLabelType = [::std::os::raw::c_uchar; 65usize];
#[doc = ""]
#[doc = "TFtdcEnumValueResultType��һ��ö��\u{5b5}�������"]
#[doc = ""]
pub type TThostFtdcEnumValueResultType = [::std::os::raw::c_uchar; 33usize];
pub type TThostFtdcSystemStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcSettlementStatusType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcRangeIntTypeType��һ���\u{7b6}�\u{5b5}��������"]
#[doc = ""]
pub type TThostFtdcRangeIntTypeType = [::std::os::raw::c_uchar; 33usize];
#[doc = ""]
#[doc = "TFtdcRangeIntFromType��һ���\u{7b6}�\u{5b5}��������"]
#[doc = ""]
pub type TThostFtdcRangeIntFromType = [::std::os::raw::c_uchar; 33usize];
#[doc = ""]
#[doc = "TFtdcRangeIntToType��һ���\u{7b6}�\u{5b5}��������"]
#[doc = ""]
pub type TThostFtdcRangeIntToType = [::std::os::raw::c_uchar; 33usize];
#[doc = ""]
#[doc = "TFtdcFunctionIDType��һ�����\u{734}�������"]
#[doc = ""]
pub type TThostFtdcFunctionIDType = [::std::os::raw::c_uchar; 25usize];
#[doc = ""]
#[doc = "TFtdcFunctionValueCodeType��һ�����\u{731}�������"]
#[doc = ""]
pub type TThostFtdcFunctionValueCodeType = [::std::os::raw::c_uchar; 257usize];
#[doc = ""]
#[doc = "TFtdcFunctionNameType��һ��������������"]
#[doc = ""]
pub type TThostFtdcFunctionNameType = [::std::os::raw::c_uchar; 65usize];
#[doc = ""]
#[doc = "TFtdcRoleIDType��һ����ɫ�������"]
#[doc = ""]
pub type TThostFtdcRoleIDType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcRoleNameType��һ����ɫ��������"]
#[doc = ""]
pub type TThostFtdcRoleNameType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcDescriptionType��һ����������"]
#[doc = ""]
pub type TThostFtdcDescriptionType = [::std::os::raw::c_uchar; 401usize];
#[doc = ""]
#[doc = "TFtdcCombineIDType��һ����ϱ������"]
#[doc = ""]
pub type TThostFtdcCombineIDType = [::std::os::raw::c_uchar; 25usize];
#[doc = ""]
#[doc = "TFtdcCombineTypeType��һ�������������"]
#[doc = ""]
pub type TThostFtdcCombineTypeType = [::std::os::raw::c_uchar; 25usize];
pub type TThostFtdcInvestorTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcBrokerTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcRiskLevelType = ::std::os::raw::c_uchar;
pub type TThostFtdcFeeAcceptStyleType = ::std::os::raw::c_uchar;
pub type TThostFtdcPasswordTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcAlgorithmType = ::std::os::raw::c_uchar;
pub type TThostFtdcIncludeCloseProfitType = ::std::os::raw::c_uchar;
pub type TThostFtdcAllWithoutTradeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcCommentType��һ��ӯ���㷨˵������"]
#[doc = ""]
pub type TThostFtdcCommentType = [::std::os::raw::c_uchar; 31usize];
#[doc = ""]
#[doc = "TFtdcVersionType��һ���汾������"]
#[doc = ""]
pub type TThostFtdcVersionType = [::std::os::raw::c_uchar; 4usize];
#[doc = ""]
#[doc = "TFtdcTradeCodeType��һ�����״�������"]
#[doc = ""]
pub type TThostFtdcTradeCodeType = [::std::os::raw::c_uchar; 7usize];
#[doc = ""]
#[doc = "TFtdcTradeDateType��һ��������������"]
#[doc = ""]
pub type TThostFtdcTradeDateType = [::std::os::raw::c_uchar; 9usize];
#[doc = ""]
#[doc = "TFtdcTradeTimeType��һ������ʱ������"]
#[doc = ""]
pub type TThostFtdcTradeTimeType = [::std::os::raw::c_uchar; 9usize];
#[doc = ""]
#[doc = "TFtdcTradeSerialType��һ��������ˮ������"]
#[doc = ""]
pub type TThostFtdcTradeSerialType = [::std::os::raw::c_uchar; 9usize];
#[doc = ""]
#[doc = "TFtdcTradeSerialNoType��һ��������ˮ������"]
#[doc = ""]
pub type TThostFtdcTradeSerialNoType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcFutureIDType��һ���ڻ���˾��������"]
#[doc = ""]
pub type TThostFtdcFutureIDType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcBankIDType��һ�����д�������"]
#[doc = ""]
pub type TThostFtdcBankIDType = [::std::os::raw::c_uchar; 4usize];
#[doc = ""]
#[doc = "TFtdcBankBrchIDType��һ�����з����Ĵ�������"]
#[doc = ""]
pub type TThostFtdcBankBrchIDType = [::std::os::raw::c_uchar; 5usize];
#[doc = ""]
#[doc = "TFtdcBankBranchIDType��һ�������Ĵ�������"]
#[doc = ""]
pub type TThostFtdcBankBranchIDType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcOperNoType��һ�����\u{5f9}�Ա����"]
#[doc = ""]
pub type TThostFtdcOperNoType = [::std::os::raw::c_uchar; 17usize];
#[doc = ""]
#[doc = "TFtdcDeviceIDType��һ��������־����"]
#[doc = ""]
pub type TThostFtdcDeviceIDType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcRecordNumType��һ����¼������"]
#[doc = ""]
pub type TThostFtdcRecordNumType = [::std::os::raw::c_uchar; 7usize];
#[doc = ""]
#[doc = "TFtdcFutureAccountType��һ���ڻ��ʽ��˺�����"]
#[doc = ""]
pub type TThostFtdcFutureAccountType = [::std::os::raw::c_uchar; 22usize];
pub type TThostFtdcFuturePwdFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcTransferTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcFutureAccPwdType��һ���ڻ��ʽ���������"]
#[doc = ""]
pub type TThostFtdcFutureAccPwdType = [::std::os::raw::c_uchar; 17usize];
#[doc = ""]
#[doc = "TFtdcCurrencyCodeType��һ����������"]
#[doc = ""]
pub type TThostFtdcCurrencyCodeType = [::std::os::raw::c_uchar; 4usize];
#[doc = ""]
#[doc = "TFtdcRetCodeType��һ����Ӧ��������"]
#[doc = ""]
pub type TThostFtdcRetCodeType = [::std::os::raw::c_uchar; 5usize];
#[doc = ""]
#[doc = "TFtdcRetInfoType��һ����Ӧ��Ϣ����"]
#[doc = ""]
pub type TThostFtdcRetInfoType = [::std::os::raw::c_uchar; 129usize];
#[doc = ""]
#[doc = "TFtdcTradeAmtType��һ���������������"]
#[doc = ""]
pub type TThostFtdcTradeAmtType = [::std::os::raw::c_uchar; 20usize];
#[doc = ""]
#[doc = "TFtdcUseAmtType��һ�����п����������"]
#[doc = ""]
pub type TThostFtdcUseAmtType = [::std::os::raw::c_uchar; 20usize];
#[doc = ""]
#[doc = "TFtdcFetchAmtType��һ�����п�ȡ�������"]
#[doc = ""]
pub type TThostFtdcFetchAmtType = [::std::os::raw::c_uchar; 20usize];
pub type TThostFtdcTransferValidFlagType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcCertCodeType��һ��\u{5a4}����������"]
#[doc = ""]
pub type TThostFtdcCertCodeType = [::std::os::raw::c_uchar; 21usize];
pub type TThostFtdcReasonType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcFundProjectIDType��һ���ʽ���Ŀ�������"]
#[doc = ""]
pub type TThostFtdcFundProjectIDType = [::std::os::raw::c_uchar; 5usize];
pub type TThostFtdcSexType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcProfessionType��һ��\u{5b0}ҵ����"]
#[doc = ""]
pub type TThostFtdcProfessionType = [::std::os::raw::c_uchar; 101usize];
#[doc = ""]
#[doc = "TFtdcNationalType��һ����������"]
#[doc = ""]
pub type TThostFtdcNationalType = [::std::os::raw::c_uchar; 31usize];
#[doc = ""]
#[doc = "TFtdcProvinceType��һ��ʡ����"]
#[doc = ""]
pub type TThostFtdcProvinceType = [::std::os::raw::c_uchar; 51usize];
#[doc = ""]
#[doc = "TFtdcRegionType��һ��������"]
#[doc = ""]
pub type TThostFtdcRegionType = [::std::os::raw::c_uchar; 16usize];
#[doc = ""]
#[doc = "TFtdcCountryType��һ����������"]
#[doc = ""]
pub type TThostFtdcCountryType = [::std::os::raw::c_uchar; 16usize];
#[doc = ""]
#[doc = "TFtdcLicenseNOType��һ��Ӫҵ\u{5b4}������"]
#[doc = ""]
pub type TThostFtdcLicenseNOType = [::std::os::raw::c_uchar; 33usize];
#[doc = ""]
#[doc = "TFtdcCompanyTypeType��һ����ҵ��������"]
#[doc = ""]
pub type TThostFtdcCompanyTypeType = [::std::os::raw::c_uchar; 16usize];
#[doc = ""]
#[doc = "TFtdcBusinessScopeType��һ����Ӫ��Χ����"]
#[doc = ""]
pub type TThostFtdcBusinessScopeType = [::std::os::raw::c_uchar; 1001usize];
#[doc = ""]
#[doc = "TFtdcCapitalCurrencyType��һ��ע���ʱ���������"]
#[doc = ""]
pub type TThostFtdcCapitalCurrencyType = [::std::os::raw::c_uchar; 4usize];
pub type TThostFtdcUserTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcBranchIDType��һ��Ӫҵ���������"]
#[doc = ""]
pub type TThostFtdcBranchIDType = [::std::os::raw::c_uchar; 9usize];
pub type TThostFtdcRateTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcNoteTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcSettlementStyleType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcBrokerDNSType��һ����������"]
#[doc = ""]
pub type TThostFtdcBrokerDNSType = [::std::os::raw::c_uchar; 256usize];
#[doc = ""]
#[doc = "TFtdcSentenceType��һ���������"]
#[doc = ""]
pub type TThostFtdcSentenceType = [::std::os::raw::c_uchar; 501usize];
pub type TThostFtdcSettlementBillTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcUserRightTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcMarginPriceTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcBillGenStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcAlgoTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcHandlePositionAlgoIDType = ::std::os::raw::c_uchar;
pub type TThostFtdcFindMarginRateAlgoIDType = ::std::os::raw::c_uchar;
pub type TThostFtdcHandleTradingAccountAlgoIDType = ::std::os::raw::c_uchar;
pub type TThostFtdcPersonTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcQueryInvestorRangeType = ::std::os::raw::c_uchar;
pub type TThostFtdcInvestorRiskStatusType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcLegIDType��һ�����ȱ������"]
#[doc = ""]
pub type TThostFtdcLegIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcLegMultipleType��һ�����ȳ�������"]
#[doc = ""]
pub type TThostFtdcLegMultipleType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcImplyLevelType��һ��������������"]
#[doc = ""]
pub type TThostFtdcImplyLevelType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcClearAccountType��һ�������˻�����"]
#[doc = ""]
pub type TThostFtdcClearAccountType = [::std::os::raw::c_uchar; 33usize];
#[doc = ""]
#[doc = "TFtdcOrganNOType��һ�������˻�����"]
#[doc = ""]
pub type TThostFtdcOrganNOType = [::std::os::raw::c_uchar; 6usize];
#[doc = ""]
#[doc = "TFtdcClearbarchIDType��һ�������˻����к�����"]
#[doc = ""]
pub type TThostFtdcClearbarchIDType = [::std::os::raw::c_uchar; 6usize];
pub type TThostFtdcUserEventTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcUserEventInfoType��һ���û��¼���Ϣ����"]
#[doc = ""]
pub type TThostFtdcUserEventInfoType = [::std::os::raw::c_uchar; 1025usize];
pub type TThostFtdcCloseStyleType = ::std::os::raw::c_uchar;
pub type TThostFtdcStatModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcParkedOrderStatusType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcParkedOrderIDType��һ��Ԥ�\u{71a35}��������"]
#[doc = ""]
pub type TThostFtdcParkedOrderIDType = [::std::os::raw::c_uchar; 13usize];
#[doc = ""]
#[doc = "TFtdcParkedOrderActionIDType��һ��Ԥ�\u{73df5}��������"]
#[doc = ""]
pub type TThostFtdcParkedOrderActionIDType = [::std::os::raw::c_uchar; 13usize];
pub type TThostFtdcVirDealStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcOrgSystemIDType = ::std::os::raw::c_uchar;
pub type TThostFtdcVirTradeStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcVirBankAccTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcVirementStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcVirementAvailAbilityType = ::std::os::raw::c_uchar;
pub type TThostFtdcVirementTradeCodeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcPhotoTypeNameType��һ��Ӱ��������������"]
#[doc = ""]
pub type TThostFtdcPhotoTypeNameType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcPhotoTypeIDType��һ��Ӱ�����ʹ�������"]
#[doc = ""]
pub type TThostFtdcPhotoTypeIDType = [::std::os::raw::c_uchar; 5usize];
#[doc = ""]
#[doc = "TFtdcPhotoNameType��һ��Ӱ����������"]
#[doc = ""]
pub type TThostFtdcPhotoNameType = [::std::os::raw::c_uchar; 161usize];
#[doc = ""]
#[doc = "TFtdcTopicIDType��һ�������������"]
#[doc = ""]
pub type TThostFtdcTopicIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcReportTypeIDType��һ�����ױ������ͱ�ʶ����"]
#[doc = ""]
pub type TThostFtdcReportTypeIDType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcCharacterIDType��һ������������������"]
#[doc = ""]
pub type TThostFtdcCharacterIDType = [::std::os::raw::c_uchar; 5usize];
#[doc = ""]
#[doc = "TFtdcAMLParamIDType��һ��������������"]
#[doc = ""]
pub type TThostFtdcAMLParamIDType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcAMLInvestorTypeType��һ��Ͷ������������"]
#[doc = ""]
pub type TThostFtdcAMLInvestorTypeType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcAMLIdCardTypeType��һ��\u{5a4}����������"]
#[doc = ""]
pub type TThostFtdcAMLIdCardTypeType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcAMLTradeDirectType��һ���ʽ������������"]
#[doc = ""]
pub type TThostFtdcAMLTradeDirectType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcAMLTradeModelType��һ���ʽ������ʽ����"]
#[doc = ""]
pub type TThostFtdcAMLTradeModelType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcAMLOpParamValueType��һ��ҵ���������\u{5b5}����"]
#[doc = ""]
pub type TThostFtdcAMLOpParamValueType = f64;
#[doc = ""]
#[doc = "TFtdcAMLCustomerCardTypeType��һ���ͻ�����\u{5a4}��/\u{5a4}���ļ���������"]
#[doc = ""]
pub type TThostFtdcAMLCustomerCardTypeType = [::std::os::raw::c_uchar; 81usize];
#[doc = ""]
#[doc = "TFtdcAMLInstitutionNameType��һ�����ڻ���������������"]
#[doc = ""]
pub type TThostFtdcAMLInstitutionNameType = [::std::os::raw::c_uchar; 65usize];
#[doc = ""]
#[doc = "TFtdcAMLDistrictIDType��һ�����ڻ����������ڵ�������������������"]
#[doc = ""]
pub type TThostFtdcAMLDistrictIDType = [::std::os::raw::c_uchar; 7usize];
#[doc = ""]
#[doc = "TFtdcAMLRelationShipType��һ�����ڻ����������\u{ef7b}�\u{5f5}Ĺ�ϵ����"]
#[doc = ""]
pub type TThostFtdcAMLRelationShipType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcAMLInstitutionTypeType��һ�����ڻ������������������"]
#[doc = ""]
pub type TThostFtdcAMLInstitutionTypeType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcAMLInstitutionIDType��һ�����ڻ��������������"]
#[doc = ""]
pub type TThostFtdcAMLInstitutionIDType = [::std::os::raw::c_uchar; 13usize];
#[doc = ""]
#[doc = "TFtdcAMLAccountTypeType��һ���˻���������"]
#[doc = ""]
pub type TThostFtdcAMLAccountTypeType = [::std::os::raw::c_uchar; 5usize];
#[doc = ""]
#[doc = "TFtdcAMLTradingTypeType��һ�����\u{5f7}�ʽ����"]
#[doc = ""]
pub type TThostFtdcAMLTradingTypeType = [::std::os::raw::c_uchar; 7usize];
#[doc = ""]
#[doc = "TFtdcAMLTransactClassType��һ��������\u{5a7}���\u{5f7}������������"]
#[doc = ""]
pub type TThostFtdcAMLTransactClassType = [::std::os::raw::c_uchar; 7usize];
#[doc = ""]
#[doc = "TFtdcAMLCapitalIOType��һ���ʽ��ո���ʶ����"]
#[doc = ""]
pub type TThostFtdcAMLCapitalIOType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcAMLSiteType��һ�����\u{5f5}ص�����"]
#[doc = ""]
pub type TThostFtdcAMLSiteType = [::std::os::raw::c_uchar; 10usize];
#[doc = ""]
#[doc = "TFtdcAMLCapitalPurposeType��һ���ʽ���;����"]
#[doc = ""]
pub type TThostFtdcAMLCapitalPurposeType = [::std::os::raw::c_uchar; 129usize];
#[doc = ""]
#[doc = "TFtdcAMLReportTypeType��һ��������������"]
#[doc = ""]
pub type TThostFtdcAMLReportTypeType = [::std::os::raw::c_uchar; 2usize];
#[doc = ""]
#[doc = "TFtdcAMLSerialNoType��һ���������"]
#[doc = ""]
pub type TThostFtdcAMLSerialNoType = [::std::os::raw::c_uchar; 5usize];
#[doc = ""]
#[doc = "TFtdcAMLStatusType��һ��״\u{32c}����"]
#[doc = ""]
pub type TThostFtdcAMLStatusType = [::std::os::raw::c_uchar; 2usize];
pub type TThostFtdcAMLGenStatusType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcAMLSeqCodeType��һ��ҵ���ʶ������"]
#[doc = ""]
pub type TThostFtdcAMLSeqCodeType = [::std::os::raw::c_uchar; 65usize];
#[doc = ""]
#[doc = "TFtdcAMLFileNameType��һ��AML�ļ�������"]
#[doc = ""]
pub type TThostFtdcAMLFileNameType = [::std::os::raw::c_uchar; 257usize];
#[doc = ""]
#[doc = "TFtdcAMLMoneyType��һ����ϴǮ�ʽ�����"]
#[doc = ""]
pub type TThostFtdcAMLMoneyType = f64;
#[doc = ""]
#[doc = "TFtdcAMLFileAmountType��һ����ϴǮ�ʽ�����"]
#[doc = ""]
pub type TThostFtdcAMLFileAmountType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcCFMMCKeyType��һ����Կ����(��\u{5a4}����)����"]
#[doc = ""]
pub type TThostFtdcCFMMCKeyType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcCFMMCTokenType��һ����������(��\u{5a4}����)����"]
#[doc = ""]
pub type TThostFtdcCFMMCTokenType = [::std::os::raw::c_uchar; 21usize];
pub type TThostFtdcCFMMCKeyKindType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcAMLReportNameType��һ��������������"]
#[doc = ""]
pub type TThostFtdcAMLReportNameType = [::std::os::raw::c_uchar; 81usize];
#[doc = ""]
#[doc = "TFtdcIndividualNameType��һ��������������"]
#[doc = ""]
pub type TThostFtdcIndividualNameType = [::std::os::raw::c_uchar; 51usize];
#[doc = ""]
#[doc = "TFtdcCurrencyIDType��һ�����\u{5b4}�������"]
#[doc = ""]
pub type TThostFtdcCurrencyIDType = [::std::os::raw::c_uchar; 4usize];
#[doc = ""]
#[doc = "TFtdcCustNumberType��һ���ͻ��������"]
#[doc = ""]
pub type TThostFtdcCustNumberType = [::std::os::raw::c_uchar; 36usize];
#[doc = ""]
#[doc = "TFtdcOrganCodeType��һ��������������"]
#[doc = ""]
pub type TThostFtdcOrganCodeType = [::std::os::raw::c_uchar; 36usize];
#[doc = ""]
#[doc = "TFtdcOrganNameType��һ��������������"]
#[doc = ""]
pub type TThostFtdcOrganNameType = [::std::os::raw::c_uchar; 71usize];
#[doc = ""]
#[doc = "TFtdcSuperOrganCodeType��һ���ϼ���������,���ڻ���˾�\u{732}���������������"]
#[doc = ""]
pub type TThostFtdcSuperOrganCodeType = [::std::os::raw::c_uchar; 12usize];
#[doc = ""]
#[doc = "TFtdcSubBranchIDType��һ����\u{5a7}��������"]
#[doc = ""]
pub type TThostFtdcSubBranchIDType = [::std::os::raw::c_uchar; 31usize];
#[doc = ""]
#[doc = "TFtdcSubBranchNameType��һ����\u{5a7}������������"]
#[doc = ""]
pub type TThostFtdcSubBranchNameType = [::std::os::raw::c_uchar; 71usize];
#[doc = ""]
#[doc = "TFtdcBranchNetCodeType��һ���������������"]
#[doc = ""]
pub type TThostFtdcBranchNetCodeType = [::std::os::raw::c_uchar; 31usize];
#[doc = ""]
#[doc = "TFtdcBranchNetNameType��һ������������������"]
#[doc = ""]
pub type TThostFtdcBranchNetNameType = [::std::os::raw::c_uchar; 71usize];
#[doc = ""]
#[doc = "TFtdcOrganFlagType��һ��������ʶ����"]
#[doc = ""]
pub type TThostFtdcOrganFlagType = [::std::os::raw::c_uchar; 2usize];
#[doc = ""]
#[doc = "TFtdcBankCodingForFutureType��һ�����ж��ڻ���˾�ı�������"]
#[doc = ""]
pub type TThostFtdcBankCodingForFutureType = [::std::os::raw::c_uchar; 33usize];
#[doc = ""]
#[doc = "TFtdcBankReturnCodeType��һ�����жԷ�����Ķ�������"]
#[doc = ""]
pub type TThostFtdcBankReturnCodeType = [::std::os::raw::c_uchar; 7usize];
#[doc = ""]
#[doc = "TFtdcPlateReturnCodeType��һ������ת��ƽ\u{328}�Է�����Ķ�������"]
#[doc = ""]
pub type TThostFtdcPlateReturnCodeType = [::std::os::raw::c_uchar; 5usize];
#[doc = ""]
#[doc = "TFtdcBankSubBranchIDType��һ�����з�\u{5a7}������������"]
#[doc = ""]
pub type TThostFtdcBankSubBranchIDType = [::std::os::raw::c_uchar; 31usize];
#[doc = ""]
#[doc = "TFtdcFutureBranchIDType��һ���ڻ���\u{5a7}������������"]
#[doc = ""]
pub type TThostFtdcFutureBranchIDType = [::std::os::raw::c_uchar; 31usize];
#[doc = ""]
#[doc = "TFtdcReturnCodeType��һ�����ش�������"]
#[doc = ""]
pub type TThostFtdcReturnCodeType = [::std::os::raw::c_uchar; 7usize];
#[doc = ""]
#[doc = "TFtdcOperatorCodeType��һ������Ա����"]
#[doc = ""]
pub type TThostFtdcOperatorCodeType = [::std::os::raw::c_uchar; 17usize];
#[doc = ""]
#[doc = "TFtdcClearDepIDType��һ�����������ʻ�����������"]
#[doc = ""]
pub type TThostFtdcClearDepIDType = [::std::os::raw::c_uchar; 6usize];
#[doc = ""]
#[doc = "TFtdcClearBrchIDType��һ�����������ʻ����к�����"]
#[doc = ""]
pub type TThostFtdcClearBrchIDType = [::std::os::raw::c_uchar; 6usize];
#[doc = ""]
#[doc = "TFtdcClearNameType��һ�����������ʻ���������"]
#[doc = ""]
pub type TThostFtdcClearNameType = [::std::os::raw::c_uchar; 71usize];
#[doc = ""]
#[doc = "TFtdcBankAccountNameType��һ�������ʻ���������"]
#[doc = ""]
pub type TThostFtdcBankAccountNameType = [::std::os::raw::c_uchar; 71usize];
#[doc = ""]
#[doc = "TFtdcInvDepIDType��һ������Ͷ�����˺Ż���������"]
#[doc = ""]
pub type TThostFtdcInvDepIDType = [::std::os::raw::c_uchar; 6usize];
#[doc = ""]
#[doc = "TFtdcInvBrchIDType��һ������Ͷ�������к�����"]
#[doc = ""]
pub type TThostFtdcInvBrchIDType = [::std::os::raw::c_uchar; 6usize];
#[doc = ""]
#[doc = "TFtdcMessageFormatVersionType��һ����Ϣ��ʽ�汾����"]
#[doc = ""]
pub type TThostFtdcMessageFormatVersionType = [::std::os::raw::c_uchar; 36usize];
#[doc = ""]
#[doc = "TFtdcDigestType��һ��ժҪ����"]
#[doc = ""]
pub type TThostFtdcDigestType = [::std::os::raw::c_uchar; 36usize];
#[doc = ""]
#[doc = "TFtdcAuthenticDataType��һ����\u{5a4}��������"]
#[doc = ""]
pub type TThostFtdcAuthenticDataType = [::std::os::raw::c_uchar; 129usize];
#[doc = ""]
#[doc = "TFtdcPasswordKeyType��һ����Կ����"]
#[doc = ""]
pub type TThostFtdcPasswordKeyType = [::std::os::raw::c_uchar; 129usize];
#[doc = ""]
#[doc = "TFtdcFutureAccountNameType��һ���ڻ��ʻ���������"]
#[doc = ""]
pub type TThostFtdcFutureAccountNameType = [::std::os::raw::c_uchar; 129usize];
#[doc = ""]
#[doc = "TFtdcMobilePhoneType��һ���\u{5bb}�����"]
#[doc = ""]
pub type TThostFtdcMobilePhoneType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcFutureMainKeyType��һ���ڻ���˾����Կ����"]
#[doc = ""]
pub type TThostFtdcFutureMainKeyType = [::std::os::raw::c_uchar; 129usize];
#[doc = ""]
#[doc = "TFtdcFutureWorkKeyType��һ���ڻ���˾������Կ����"]
#[doc = ""]
pub type TThostFtdcFutureWorkKeyType = [::std::os::raw::c_uchar; 129usize];
#[doc = ""]
#[doc = "TFtdcFutureTransKeyType��һ���ڻ���˾������Կ����"]
#[doc = ""]
pub type TThostFtdcFutureTransKeyType = [::std::os::raw::c_uchar; 129usize];
#[doc = ""]
#[doc = "TFtdcBankMainKeyType��һ����������Կ����"]
#[doc = ""]
pub type TThostFtdcBankMainKeyType = [::std::os::raw::c_uchar; 129usize];
#[doc = ""]
#[doc = "TFtdcBankWorkKeyType��һ�����й�����Կ����"]
#[doc = ""]
pub type TThostFtdcBankWorkKeyType = [::std::os::raw::c_uchar; 129usize];
#[doc = ""]
#[doc = "TFtdcBankTransKeyType��һ�����д�����Կ����"]
#[doc = ""]
pub type TThostFtdcBankTransKeyType = [::std::os::raw::c_uchar; 129usize];
#[doc = ""]
#[doc = "TFtdcBankServerDescriptionType��һ�����з�����������Ϣ����"]
#[doc = ""]
pub type TThostFtdcBankServerDescriptionType = [::std::os::raw::c_uchar; 129usize];
#[doc = ""]
#[doc = "TFtdcAddInfoType��һ��������Ϣ����"]
#[doc = ""]
pub type TThostFtdcAddInfoType = [::std::os::raw::c_uchar; 129usize];
#[doc = ""]
#[doc = "TFtdcDescrInfoForReturnCodeType��һ����������������"]
#[doc = ""]
pub type TThostFtdcDescrInfoForReturnCodeType = [::std::os::raw::c_uchar; 129usize];
#[doc = ""]
#[doc = "TFtdcCountryCodeType��һ�����Ҵ�������"]
#[doc = ""]
pub type TThostFtdcCountryCodeType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcSerialType��һ����ˮ������"]
#[doc = ""]
pub type TThostFtdcSerialType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcPlateSerialType��һ��ƽ\u{328}��ˮ������"]
#[doc = ""]
pub type TThostFtdcPlateSerialType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcBankSerialType��һ��������ˮ������"]
#[doc = ""]
pub type TThostFtdcBankSerialType = [::std::os::raw::c_uchar; 13usize];
#[doc = ""]
#[doc = "TFtdcCorrectSerialType��һ��������������ˮ������"]
#[doc = ""]
pub type TThostFtdcCorrectSerialType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcFutureSerialType��һ���ڻ���˾��ˮ������"]
#[doc = ""]
pub type TThostFtdcFutureSerialType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcApplicationIDType��һ��Ӧ�ñ�ʶ����"]
#[doc = ""]
pub type TThostFtdcApplicationIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcBankProxyIDType��һ�����д�����ʶ����"]
#[doc = ""]
pub type TThostFtdcBankProxyIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcFBTCoreIDType��һ������ת�ʺ���ϵͳ��ʶ����"]
#[doc = ""]
pub type TThostFtdcFBTCoreIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcServerPortType��һ������˿ں�����"]
#[doc = ""]
pub type TThostFtdcServerPortType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcRepealedTimesType��һ���Ѿ�������������"]
#[doc = ""]
pub type TThostFtdcRepealedTimesType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcRepealTimeIntervalType��һ������ʱ��������"]
#[doc = ""]
pub type TThostFtdcRepealTimeIntervalType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcTotalTimesType��һ��ÿ���ۼ�ת�ʴ�������"]
#[doc = ""]
pub type TThostFtdcTotalTimesType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcFBTRequestIDType��һ������ID����"]
#[doc = ""]
pub type TThostFtdcFBTRequestIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcTIDType��һ������ID����"]
#[doc = ""]
pub type TThostFtdcTIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcTradeAmountType��һ�����\u{5fd}�\u{e8e8}Ԫ������"]
#[doc = ""]
pub type TThostFtdcTradeAmountType = f64;
#[doc = ""]
#[doc = "TFtdcCustFeeType��һ��Ӧ�տͻ����ã�Ԫ������"]
#[doc = ""]
pub type TThostFtdcCustFeeType = f64;
#[doc = ""]
#[doc = "TFtdcFutureFeeType��һ��Ӧ���ڻ���˾���ã�Ԫ������"]
#[doc = ""]
pub type TThostFtdcFutureFeeType = f64;
#[doc = ""]
#[doc = "TFtdcSingleMaxAmtType��һ����������\u{7b6}�����"]
#[doc = ""]
pub type TThostFtdcSingleMaxAmtType = f64;
#[doc = ""]
#[doc = "TFtdcSingleMinAmtType��һ����������\u{7b6}�����"]
#[doc = ""]
pub type TThostFtdcSingleMinAmtType = f64;
#[doc = ""]
#[doc = "TFtdcTotalAmtType��һ��ÿ���ۼ�ת�ʶ������"]
#[doc = ""]
pub type TThostFtdcTotalAmtType = f64;
pub type TThostFtdcCertificationTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFileBusinessCodeType = ::std::os::raw::c_uchar;
pub type TThostFtdcCashExchangeCodeType = ::std::os::raw::c_uchar;
pub type TThostFtdcYesNoIndicatorType = ::std::os::raw::c_uchar;
pub type TThostFtdcBanlanceTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcGenderType = ::std::os::raw::c_uchar;
pub type TThostFtdcFeePayFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcPassWordKeyTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFBTPassWordTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFBTEncryModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcBankRepealFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcBrokerRepealFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcInstitutionTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcLastFragmentType = ::std::os::raw::c_uchar;
pub type TThostFtdcBankAccStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcMoneyAccountStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcManageStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcSystemTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcTxnEndFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcProcessStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcCustTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFBTTransferDirectionType = ::std::os::raw::c_uchar;
pub type TThostFtdcOpenOrDestroyType = ::std::os::raw::c_uchar;
pub type TThostFtdcAvailabilityFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcOrganTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcOrganLevelType = ::std::os::raw::c_uchar;
pub type TThostFtdcProtocalIDType = ::std::os::raw::c_uchar;
pub type TThostFtdcConnectModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcSyncModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcBankAccTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFutureAccTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcOrganStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcCCBFeeModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcCommApiTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcServiceIDType��һ������������"]
#[doc = ""]
pub type TThostFtdcServiceIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcServiceLineNoType��һ��������·�������"]
#[doc = ""]
pub type TThostFtdcServiceLineNoType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcServiceNameType��һ������������"]
#[doc = ""]
pub type TThostFtdcServiceNameType = [::std::os::raw::c_uchar; 61usize];
pub type TThostFtdcLinkStatusType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcCommApiPointerType��һ��\u{368}ѶAPI\u{5b8}������"]
#[doc = ""]
pub type TThostFtdcCommApiPointerType = ::std::os::raw::c_int;
pub type TThostFtdcPwdFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcSecuAccTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcTransferStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcSponsorTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcReqRspTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFBTUserEventTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcBankIDByBankType��һ�������Լ��ı�������"]
#[doc = ""]
pub type TThostFtdcBankIDByBankType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcBankOperNoType��һ�����в���Ա������"]
#[doc = ""]
pub type TThostFtdcBankOperNoType = [::std::os::raw::c_uchar; 4usize];
#[doc = ""]
#[doc = "TFtdcBankCustNoType��һ�����пͻ�������"]
#[doc = ""]
pub type TThostFtdcBankCustNoType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcDBOPSeqNoType��һ�����������к�����"]
#[doc = ""]
pub type TThostFtdcDBOPSeqNoType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcTableNameType��һ��FBT��������"]
#[doc = ""]
pub type TThostFtdcTableNameType = [::std::os::raw::c_uchar; 61usize];
#[doc = ""]
#[doc = "TFtdcPKNameType��һ��FBT����������������"]
#[doc = ""]
pub type TThostFtdcPKNameType = [::std::os::raw::c_uchar; 201usize];
#[doc = ""]
#[doc = "TFtdcPKValueType��һ��FBT����������\u{5b5}����"]
#[doc = ""]
pub type TThostFtdcPKValueType = [::std::os::raw::c_uchar; 501usize];
pub type TThostFtdcDBOperationType = ::std::os::raw::c_uchar;
pub type TThostFtdcSyncFlagType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcTargetIDType��һ��\u{36c}��Ŀ��������"]
#[doc = ""]
pub type TThostFtdcTargetIDType = [::std::os::raw::c_uchar; 4usize];
pub type TThostFtdcSyncTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcFBETimeType��һ�����\u{5bb}���ʱ������"]
#[doc = ""]
pub type TThostFtdcFBETimeType = [::std::os::raw::c_uchar; 7usize];
#[doc = ""]
#[doc = "TFtdcFBEBankNoType��һ�����������к�����"]
#[doc = ""]
pub type TThostFtdcFBEBankNoType = [::std::os::raw::c_uchar; 13usize];
#[doc = ""]
#[doc = "TFtdcFBECertNoType��һ������ƾ\u{5a4}������"]
#[doc = ""]
pub type TThostFtdcFBECertNoType = [::std::os::raw::c_uchar; 13usize];
pub type TThostFtdcExDirectionType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcFBEBankAccountType��һ�����������˻�����"]
#[doc = ""]
pub type TThostFtdcFBEBankAccountType = [::std::os::raw::c_uchar; 33usize];
#[doc = ""]
#[doc = "TFtdcFBEBankAccountNameType��һ�����������˻�������"]
#[doc = ""]
pub type TThostFtdcFBEBankAccountNameType = [::std::os::raw::c_uchar; 61usize];
#[doc = ""]
#[doc = "TFtdcFBEAmtType��һ�����\u{5bb}���������"]
#[doc = ""]
pub type TThostFtdcFBEAmtType = f64;
#[doc = ""]
#[doc = "TFtdcFBEBusinessTypeType��һ������ҵ����������"]
#[doc = ""]
pub type TThostFtdcFBEBusinessTypeType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcFBEPostScriptType��һ�����㸽������"]
#[doc = ""]
pub type TThostFtdcFBEPostScriptType = [::std::os::raw::c_uchar; 61usize];
#[doc = ""]
#[doc = "TFtdcFBERemarkType��һ�����㱸ע����"]
#[doc = ""]
pub type TThostFtdcFBERemarkType = [::std::os::raw::c_uchar; 71usize];
#[doc = ""]
#[doc = "TFtdcExRateType��һ�������������"]
#[doc = ""]
pub type TThostFtdcExRateType = f64;
pub type TThostFtdcFBEResultFlagType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcFBERtnMsgType��һ�����㷵����Ϣ����"]
#[doc = ""]
pub type TThostFtdcFBERtnMsgType = [::std::os::raw::c_uchar; 61usize];
#[doc = ""]
#[doc = "TFtdcFBEExtendMsgType��һ��������չ��Ϣ����"]
#[doc = ""]
pub type TThostFtdcFBEExtendMsgType = [::std::os::raw::c_uchar; 61usize];
#[doc = ""]
#[doc = "TFtdcFBEBusinessSerialType��һ�����������ˮ������"]
#[doc = ""]
pub type TThostFtdcFBEBusinessSerialType = [::std::os::raw::c_uchar; 31usize];
#[doc = ""]
#[doc = "TFtdcFBESystemSerialType��һ��������ˮ������"]
#[doc = ""]
pub type TThostFtdcFBESystemSerialType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcFBETotalExCntType��һ�����㽻���\u{731}�������"]
#[doc = ""]
pub type TThostFtdcFBETotalExCntType = ::std::os::raw::c_int;
pub type TThostFtdcFBEExchStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcFBEFileFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcFBEAlreadyTradeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcFBEOpenBankType��һ�������˻�����������"]
#[doc = ""]
pub type TThostFtdcFBEOpenBankType = [::std::os::raw::c_uchar; 61usize];
pub type TThostFtdcFBEUserEventTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcFBEFileNameType��һ����������ļ�������"]
#[doc = ""]
pub type TThostFtdcFBEFileNameType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcFBEBatchSerialType��һ���������κ�����"]
#[doc = ""]
pub type TThostFtdcFBEBatchSerialType = [::std::os::raw::c_uchar; 21usize];
pub type TThostFtdcFBEReqFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcNotifyClassType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcRiskNofityInfoType��һ���ͻ�����\u{368}\u{5aa}��Ϣ����"]
#[doc = ""]
pub type TThostFtdcRiskNofityInfoType = [::std::os::raw::c_uchar; 257usize];
#[doc = ""]
#[doc = "TFtdcForceCloseSceneIdType��һ��ǿƽ�����������"]
#[doc = ""]
pub type TThostFtdcForceCloseSceneIdType = [::std::os::raw::c_uchar; 24usize];
pub type TThostFtdcForceCloseTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcInstrumentIDsType��һ�������Ʒ����,��+�\u{5b8}�,��cu+zn����"]
#[doc = ""]
pub type TThostFtdcInstrumentIDsType = [::std::os::raw::c_uchar; 101usize];
pub type TThostFtdcRiskNotifyMethodType = ::std::os::raw::c_uchar;
pub type TThostFtdcRiskNotifyStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcRiskUserEventType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcParamIDType��һ��������������"]
#[doc = ""]
pub type TThostFtdcParamIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcParamNameType��һ������������"]
#[doc = ""]
pub type TThostFtdcParamNameType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcParamValueType��һ������\u{5b5}����"]
#[doc = ""]
pub type TThostFtdcParamValueType = [::std::os::raw::c_uchar; 41usize];
pub type TThostFtdcConditionalOrderSortTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcSendTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcClientIDStatusType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcIndustryIDType��һ����ҵ��������"]
#[doc = ""]
pub type TThostFtdcIndustryIDType = [::std::os::raw::c_uchar; 17usize];
#[doc = ""]
#[doc = "TFtdcQuestionIDType��һ��������Ϣ�������"]
#[doc = ""]
pub type TThostFtdcQuestionIDType = [::std::os::raw::c_uchar; 5usize];
#[doc = ""]
#[doc = "TFtdcQuestionContentType��һ��������Ϣ˵������"]
#[doc = ""]
pub type TThostFtdcQuestionContentType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcOptionIDType��һ��ѡ��������"]
#[doc = ""]
pub type TThostFtdcOptionIDType = [::std::os::raw::c_uchar; 13usize];
#[doc = ""]
#[doc = "TFtdcOptionContentType��һ��ѡ��˵������"]
#[doc = ""]
pub type TThostFtdcOptionContentType = [::std::os::raw::c_uchar; 61usize];
pub type TThostFtdcQuestionTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcProcessIDType��һ��ҵ����ˮ������"]
#[doc = ""]
pub type TThostFtdcProcessIDType = [::std::os::raw::c_uchar; 33usize];
#[doc = ""]
#[doc = "TFtdcSeqNoType��һ����ˮ������"]
#[doc = ""]
pub type TThostFtdcSeqNoType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcUOAProcessStatusType��һ������״\u{32c}����"]
#[doc = ""]
pub type TThostFtdcUOAProcessStatusType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcProcessTypeType��һ�����\u{339}�����������"]
#[doc = ""]
pub type TThostFtdcProcessTypeType = [::std::os::raw::c_uchar; 3usize];
pub type TThostFtdcBusinessTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcCfmmcReturnCodeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcExReturnCodeType��һ������������������"]
#[doc = ""]
pub type TThostFtdcExReturnCodeType = ::std::os::raw::c_int;
pub type TThostFtdcClientTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcExchangeIDTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcExClientIDTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcClientClassifyType��һ���ͻ�����������"]
#[doc = ""]
pub type TThostFtdcClientClassifyType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcUOAOrganTypeType��һ����λ��������"]
#[doc = ""]
pub type TThostFtdcUOAOrganTypeType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcUOACountryCodeType��һ�����Ҵ�������"]
#[doc = ""]
pub type TThostFtdcUOACountryCodeType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcAreaCodeType��һ����������"]
#[doc = ""]
pub type TThostFtdcAreaCodeType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcFuturesIDType��һ���������Ϊ�ͻ�����Ĵ�������"]
#[doc = ""]
pub type TThostFtdcFuturesIDType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcCffmcDateType��һ����������"]
#[doc = ""]
pub type TThostFtdcCffmcDateType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcCffmcTimeType��һ��ʱ������"]
#[doc = ""]
pub type TThostFtdcCffmcTimeType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcNocIDType��һ����\u{5af}������������"]
#[doc = ""]
pub type TThostFtdcNocIDType = [::std::os::raw::c_uchar; 21usize];
pub type TThostFtdcUpdateFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcApplyOperateIDType = ::std::os::raw::c_uchar;
pub type TThostFtdcApplyStatusIDType = ::std::os::raw::c_uchar;
pub type TThostFtdcSendMethodType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcEventTypeType��һ��ҵ�������������"]
#[doc = ""]
pub type TThostFtdcEventTypeType = [::std::os::raw::c_uchar; 33usize];
pub type TThostFtdcEventModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcUOAAutoSendType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcQueryDepthType��һ����ѯ�������"]
#[doc = ""]
pub type TThostFtdcQueryDepthType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcDataCenterIDType��һ���������Ĵ�������"]
#[doc = ""]
pub type TThostFtdcDataCenterIDType = ::std::os::raw::c_int;
pub type TThostFtdcFlowIDType = ::std::os::raw::c_uchar;
pub type TThostFtdcCheckLevelType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcCheckNoType��һ��������������"]
#[doc = ""]
pub type TThostFtdcCheckNoType = ::std::os::raw::c_int;
pub type TThostFtdcCheckStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcUsedStatusType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcRateTemplateNameType��һ��ģ����������"]
#[doc = ""]
pub type TThostFtdcRateTemplateNameType = [::std::os::raw::c_uchar; 61usize];
#[doc = ""]
#[doc = "TFtdcPropertyStringType��һ�����ڲ�ѯ��Ͷ�������\u{5b6}�����"]
#[doc = ""]
pub type TThostFtdcPropertyStringType = [::std::os::raw::c_uchar; 2049usize];
pub type TThostFtdcBankAcountOriginType = ::std::os::raw::c_uchar;
pub type TThostFtdcMonthBillTradeSumType = ::std::os::raw::c_uchar;
pub type TThostFtdcFBTTradeCodeEnumType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcRateTemplateIDType��һ��ģ�ʹ�������"]
#[doc = ""]
pub type TThostFtdcRateTemplateIDType = [::std::os::raw::c_uchar; 9usize];
#[doc = ""]
#[doc = "TFtdcRiskRateType��һ�����ն�����"]
#[doc = ""]
pub type TThostFtdcRiskRateType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcTimestampType��һ��ʱ�������"]
#[doc = ""]
pub type TThostFtdcTimestampType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcInvestorIDRuleNameType��һ���Ŷι�����������"]
#[doc = ""]
pub type TThostFtdcInvestorIDRuleNameType = [::std::os::raw::c_uchar; 61usize];
#[doc = ""]
#[doc = "TFtdcInvestorIDRuleExprType��һ���Ŷι������ʽ����"]
#[doc = ""]
pub type TThostFtdcInvestorIDRuleExprType = [::std::os::raw::c_uchar; 513usize];
#[doc = ""]
#[doc = "TFtdcLastDriftType��һ���ϴ�OTPƯ��\u{5b5}����"]
#[doc = ""]
pub type TThostFtdcLastDriftType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcLastSuccessType��һ���ϴ�OTP�ɹ�\u{5b5}����"]
#[doc = ""]
pub type TThostFtdcLastSuccessType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcAuthKeyType��һ��������Կ����"]
#[doc = ""]
pub type TThostFtdcAuthKeyType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcSerialNumberType��һ�����к�����"]
#[doc = ""]
pub type TThostFtdcSerialNumberType = [::std::os::raw::c_uchar; 17usize];
pub type TThostFtdcOTPTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcOTPVendorsIDType��һ����\u{32c}�����ṩ������"]
#[doc = ""]
pub type TThostFtdcOTPVendorsIDType = [::std::os::raw::c_uchar; 2usize];
#[doc = ""]
#[doc = "TFtdcOTPVendorsNameType��һ����\u{32c}�����ṩ����������"]
#[doc = ""]
pub type TThostFtdcOTPVendorsNameType = [::std::os::raw::c_uchar; 61usize];
pub type TThostFtdcOTPStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcBrokerUserTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFutureTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFundEventTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcAccountSourceTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcCodeSourceTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcUserRangeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcTimeSpanType��һ��ʱ��������"]
#[doc = ""]
pub type TThostFtdcTimeSpanType = [::std::os::raw::c_uchar; 9usize];
#[doc = ""]
#[doc = "TFtdcImportSequenceIDType��һ����\u{32c}���Ƶ������α������"]
#[doc = ""]
pub type TThostFtdcImportSequenceIDType = [::std::os::raw::c_uchar; 17usize];
pub type TThostFtdcByGroupType = ::std::os::raw::c_uchar;
pub type TThostFtdcTradeSumStatModeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcComTypeType��һ����ϳɽ���������"]
#[doc = ""]
pub type TThostFtdcComTypeType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcUserProductIDType��һ����Ʒ��ʶ����"]
#[doc = ""]
pub type TThostFtdcUserProductIDType = [::std::os::raw::c_uchar; 33usize];
#[doc = ""]
#[doc = "TFtdcUserProductNameType��һ����Ʒ��������"]
#[doc = ""]
pub type TThostFtdcUserProductNameType = [::std::os::raw::c_uchar; 65usize];
#[doc = ""]
#[doc = "TFtdcUserProductMemoType��һ����Ʒ˵������"]
#[doc = ""]
pub type TThostFtdcUserProductMemoType = [::std::os::raw::c_uchar; 129usize];
#[doc = ""]
#[doc = "TFtdcCSRCCancelFlagType��һ������������־����"]
#[doc = ""]
pub type TThostFtdcCSRCCancelFlagType = [::std::os::raw::c_uchar; 2usize];
#[doc = ""]
#[doc = "TFtdcCSRCDateType��һ����������"]
#[doc = ""]
pub type TThostFtdcCSRCDateType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcCSRCInvestorNameType��һ���ͻ���������"]
#[doc = ""]
pub type TThostFtdcCSRCInvestorNameType = [::std::os::raw::c_uchar; 201usize];
#[doc = ""]
#[doc = "TFtdcCSRCOpenInvestorNameType��һ���ͻ���������"]
#[doc = ""]
pub type TThostFtdcCSRCOpenInvestorNameType = [::std::os::raw::c_uchar; 101usize];
#[doc = ""]
#[doc = "TFtdcCSRCInvestorIDType��һ���ͻ���������"]
#[doc = ""]
pub type TThostFtdcCSRCInvestorIDType = [::std::os::raw::c_uchar; 13usize];
#[doc = ""]
#[doc = "TFtdcCSRCIdentifiedCardNoType��һ��\u{5a4}����������"]
#[doc = ""]
pub type TThostFtdcCSRCIdentifiedCardNoType = [::std::os::raw::c_uchar; 51usize];
#[doc = ""]
#[doc = "TFtdcCSRCClientIDType��һ�����ױ�������"]
#[doc = ""]
pub type TThostFtdcCSRCClientIDType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcCSRCBankFlagType��һ�����б�ʶ����"]
#[doc = ""]
pub type TThostFtdcCSRCBankFlagType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcCSRCBankAccountType��һ�������˻�����"]
#[doc = ""]
pub type TThostFtdcCSRCBankAccountType = [::std::os::raw::c_uchar; 23usize];
#[doc = ""]
#[doc = "TFtdcCSRCOpenNameType��һ������������"]
#[doc = ""]
pub type TThostFtdcCSRCOpenNameType = [::std::os::raw::c_uchar; 401usize];
#[doc = ""]
#[doc = "TFtdcCSRCMemoType��һ��˵������"]
#[doc = ""]
pub type TThostFtdcCSRCMemoType = [::std::os::raw::c_uchar; 101usize];
#[doc = ""]
#[doc = "TFtdcCSRCTimeType��һ��ʱ������"]
#[doc = ""]
pub type TThostFtdcCSRCTimeType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcCSRCTradeIDType��һ���ɽ���ˮ������"]
#[doc = ""]
pub type TThostFtdcCSRCTradeIDType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcCSRCExchangeInstIDType��һ����Լ��������"]
#[doc = ""]
pub type TThostFtdcCSRCExchangeInstIDType = [::std::os::raw::c_uchar; 31usize];
#[doc = ""]
#[doc = "TFtdcCSRCMortgageNameType��һ����ѺƷ��������"]
#[doc = ""]
pub type TThostFtdcCSRCMortgageNameType = [::std::os::raw::c_uchar; 7usize];
#[doc = ""]
#[doc = "TFtdcCSRCReasonType��һ����������"]
#[doc = ""]
pub type TThostFtdcCSRCReasonType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcIsSettlementType��һ���Ƿ�Ϊ�ǽ����Ա����"]
#[doc = ""]
pub type TThostFtdcIsSettlementType = [::std::os::raw::c_uchar; 2usize];
#[doc = ""]
#[doc = "TFtdcCSRCMoneyType��һ���ʽ�����"]
#[doc = ""]
pub type TThostFtdcCSRCMoneyType = f64;
#[doc = ""]
#[doc = "TFtdcCSRCPriceType��һ���۸�����"]
#[doc = ""]
pub type TThostFtdcCSRCPriceType = f64;
#[doc = ""]
#[doc = "TFtdcCSRCOptionsTypeType��һ����Ȩ��������"]
#[doc = ""]
pub type TThostFtdcCSRCOptionsTypeType = [::std::os::raw::c_uchar; 2usize];
#[doc = ""]
#[doc = "TFtdcCSRCStrikePriceType��һ��\u{5b4}�м�����"]
#[doc = ""]
pub type TThostFtdcCSRCStrikePriceType = f64;
#[doc = ""]
#[doc = "TFtdcCSRCTargetProductIDType��һ�����Ʒ������"]
#[doc = ""]
pub type TThostFtdcCSRCTargetProductIDType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcCSRCTargetInstrIDType��һ����ĺ�Լ����"]
#[doc = ""]
pub type TThostFtdcCSRCTargetInstrIDType = [::std::os::raw::c_uchar; 31usize];
#[doc = ""]
#[doc = "TFtdcCommModelNameType��һ����������ģ����������"]
#[doc = ""]
pub type TThostFtdcCommModelNameType = [::std::os::raw::c_uchar; 161usize];
#[doc = ""]
#[doc = "TFtdcCommModelMemoType��һ����������ģ�屸ע����"]
#[doc = ""]
pub type TThostFtdcCommModelMemoType = [::std::os::raw::c_uchar; 1025usize];
pub type TThostFtdcExprSetModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcRateInvestorRangeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcAgentBrokerIDType��һ���������\u{379}�˾��������"]
#[doc = ""]
pub type TThostFtdcAgentBrokerIDType = [::std::os::raw::c_uchar; 13usize];
#[doc = ""]
#[doc = "TFtdcDRIdentityIDType��һ���������Ĵ�������"]
#[doc = ""]
pub type TThostFtdcDRIdentityIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcDRIdentityNameType��һ������������������"]
#[doc = ""]
pub type TThostFtdcDRIdentityNameType = [::std::os::raw::c_uchar; 65usize];
#[doc = ""]
#[doc = "TFtdcDBLinkIDType��һ��DBLink��ʶ������"]
#[doc = ""]
pub type TThostFtdcDBLinkIDType = [::std::os::raw::c_uchar; 31usize];
pub type TThostFtdcSyncDataStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcTradeSourceType = ::std::os::raw::c_uchar;
pub type TThostFtdcFlexStatModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcByInvestorRangeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcSRiskRateType��һ�����ն�����"]
#[doc = ""]
pub type TThostFtdcSRiskRateType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcSequenceNo12Type��һ���������"]
#[doc = ""]
pub type TThostFtdcSequenceNo12Type = ::std::os::raw::c_int;
pub type TThostFtdcPropertyInvestorRangeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFileStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcFileGenStyleType = ::std::os::raw::c_uchar;
pub type TThostFtdcSysOperModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcSysOperTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcCSRCDataQueyTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFreezeStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcStandardStatusType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcCSRCFreezeStatusType��һ������״\u{32c}����"]
#[doc = ""]
pub type TThostFtdcCSRCFreezeStatusType = [::std::os::raw::c_uchar; 2usize];
pub type TThostFtdcRightParamTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcRightTemplateIDType��һ��ģ���������"]
#[doc = ""]
pub type TThostFtdcRightTemplateIDType = [::std::os::raw::c_uchar; 9usize];
#[doc = ""]
#[doc = "TFtdcRightTemplateNameType��һ��ģ����������"]
#[doc = ""]
pub type TThostFtdcRightTemplateNameType = [::std::os::raw::c_uchar; 61usize];
pub type TThostFtdcDataStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcAMLCheckStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcAmlDateTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcAmlCheckLevelType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcAmlCheckFlowType��һ����ϴǮ���ݳ�ȡ�����������"]
#[doc = ""]
pub type TThostFtdcAmlCheckFlowType = [::std::os::raw::c_uchar; 2usize];
#[doc = ""]
#[doc = "TFtdcDataTypeType��һ��������������"]
#[doc = ""]
pub type TThostFtdcDataTypeType = [::std::os::raw::c_uchar; 129usize];
pub type TThostFtdcExportFileTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcSettleManagerTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcSettleManagerIDType��һ���������ô�������"]
#[doc = ""]
pub type TThostFtdcSettleManagerIDType = [::std::os::raw::c_uchar; 33usize];
#[doc = ""]
#[doc = "TFtdcSettleManagerNameType��һ������������������"]
#[doc = ""]
pub type TThostFtdcSettleManagerNameType = [::std::os::raw::c_uchar; 129usize];
pub type TThostFtdcSettleManagerLevelType = ::std::os::raw::c_uchar;
pub type TThostFtdcSettleManagerGroupType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcCheckResultMemoType��һ���˶Խ��˵������"]
#[doc = ""]
pub type TThostFtdcCheckResultMemoType = [::std::os::raw::c_uchar; 1025usize];
#[doc = ""]
#[doc = "TFtdcFunctionUrlType��һ��������������"]
#[doc = ""]
pub type TThostFtdcFunctionUrlType = [::std::os::raw::c_uchar; 1025usize];
#[doc = ""]
#[doc = "TFtdcAuthInfoType��һ���ͻ�����\u{5a4}��Ϣ����"]
#[doc = ""]
pub type TThostFtdcAuthInfoType = [::std::os::raw::c_uchar; 129usize];
#[doc = ""]
#[doc = "TFtdcAuthCodeType��һ���ͻ�����\u{5a4}������"]
#[doc = ""]
pub type TThostFtdcAuthCodeType = [::std::os::raw::c_uchar; 17usize];
pub type TThostFtdcLimitUseTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcDataResourceType = ::std::os::raw::c_uchar;
pub type TThostFtdcMarginTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcActiveTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcMarginRateTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcBackUpStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcInitSettlementType = ::std::os::raw::c_uchar;
pub type TThostFtdcReportStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcSaveStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcSettArchiveStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcCTPTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcToolIDType��һ�����ߴ�������"]
#[doc = ""]
pub type TThostFtdcToolIDType = [::std::os::raw::c_uchar; 9usize];
#[doc = ""]
#[doc = "TFtdcToolNameType��һ��������������"]
#[doc = ""]
pub type TThostFtdcToolNameType = [::std::os::raw::c_uchar; 81usize];
pub type TThostFtdcCloseDealTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcMortgageFundUseRangeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcCurrencyUnitType��һ�����\u{5b5}�λ��������"]
#[doc = ""]
pub type TThostFtdcCurrencyUnitType = f64;
#[doc = ""]
#[doc = "TFtdcExchangeRateType��һ����������"]
#[doc = ""]
pub type TThostFtdcExchangeRateType = f64;
pub type TThostFtdcSpecProductTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFundMortgageTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcAccountSettlementParamIDType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcCurrencyNameType��һ��������������"]
#[doc = ""]
pub type TThostFtdcCurrencyNameType = [::std::os::raw::c_uchar; 31usize];
#[doc = ""]
#[doc = "TFtdcCurrencySignType��һ�����\u{5b7}�������"]
#[doc = ""]
pub type TThostFtdcCurrencySignType = [::std::os::raw::c_uchar; 4usize];
pub type TThostFtdcFundMortDirectionType = ::std::os::raw::c_uchar;
pub type TThostFtdcBusinessClassType = ::std::os::raw::c_uchar;
pub type TThostFtdcSwapSourceTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcCurrExDirectionType = ::std::os::raw::c_uchar;
pub type TThostFtdcCurrencySwapStatusType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcCurrExchCertNoType��һ��ƾ\u{5a4}������"]
#[doc = ""]
pub type TThostFtdcCurrExchCertNoType = [::std::os::raw::c_uchar; 13usize];
#[doc = ""]
#[doc = "TFtdcBatchSerialNoType��һ�����κ�����"]
#[doc = ""]
pub type TThostFtdcBatchSerialNoType = [::std::os::raw::c_uchar; 21usize];
pub type TThostFtdcReqFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcResFlagType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcPageControlType��һ������ҳ���������"]
#[doc = ""]
pub type TThostFtdcPageControlType = [::std::os::raw::c_uchar; 2usize];
#[doc = ""]
#[doc = "TFtdcRecordCountType��һ����¼������"]
#[doc = ""]
pub type TThostFtdcRecordCountType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcCurrencySwapMemoType��һ��������ȷ����Ϣ����"]
#[doc = ""]
pub type TThostFtdcCurrencySwapMemoType = [::std::os::raw::c_uchar; 101usize];
pub type TThostFtdcExStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcClientRegionType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcWorkPlaceType��һ��������λ����"]
#[doc = ""]
pub type TThostFtdcWorkPlaceType = [::std::os::raw::c_uchar; 101usize];
#[doc = ""]
#[doc = "TFtdcBusinessPeriodType��һ����Ӫ��������"]
#[doc = ""]
pub type TThostFtdcBusinessPeriodType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcWebSiteType��һ����\u{5b7}����"]
#[doc = ""]
pub type TThostFtdcWebSiteType = [::std::os::raw::c_uchar; 101usize];
#[doc = ""]
#[doc = "TFtdcUOAIdCardTypeType��һ��ͳһ����\u{5a4}����������"]
#[doc = ""]
pub type TThostFtdcUOAIdCardTypeType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcClientModeType��һ������ģʽ����"]
#[doc = ""]
pub type TThostFtdcClientModeType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcInvestorFullNameType��һ��Ͷ����ȫ������"]
#[doc = ""]
pub type TThostFtdcInvestorFullNameType = [::std::os::raw::c_uchar; 101usize];
#[doc = ""]
#[doc = "TFtdcUOABrokerIDType��һ�������н����ID����"]
#[doc = ""]
pub type TThostFtdcUOABrokerIDType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcUOAZipCodeType��һ��������������"]
#[doc = ""]
pub type TThostFtdcUOAZipCodeType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcUOAEMailType��һ��������������"]
#[doc = ""]
pub type TThostFtdcUOAEMailType = [::std::os::raw::c_uchar; 101usize];
#[doc = ""]
#[doc = "TFtdcOldCityType��һ����������"]
#[doc = ""]
pub type TThostFtdcOldCityType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcCorporateIdentifiedCardNoType��һ�����˴���\u{5a4}����������"]
#[doc = ""]
pub type TThostFtdcCorporateIdentifiedCardNoType = [::std::os::raw::c_uchar; 101usize];
pub type TThostFtdcHasBoardType = ::std::os::raw::c_uchar;
pub type TThostFtdcStartModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcTemplateTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcLoginModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcPromptTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcLedgerManageIDType��һ���\u{5bb}������ʲ���������"]
#[doc = ""]
pub type TThostFtdcLedgerManageIDType = [::std::os::raw::c_uchar; 51usize];
#[doc = ""]
#[doc = "TFtdcInvestVarietyType��һ��Ͷ��Ʒ������"]
#[doc = ""]
pub type TThostFtdcInvestVarietyType = [::std::os::raw::c_uchar; 101usize];
#[doc = ""]
#[doc = "TFtdcBankAccountTypeType��һ���˻��������"]
#[doc = ""]
pub type TThostFtdcBankAccountTypeType = [::std::os::raw::c_uchar; 2usize];
#[doc = ""]
#[doc = "TFtdcLedgerManageBankType��һ��������������"]
#[doc = ""]
pub type TThostFtdcLedgerManageBankType = [::std::os::raw::c_uchar; 101usize];
#[doc = ""]
#[doc = "TFtdcCffexDepartmentNameType��һ������Ӫҵ������"]
#[doc = ""]
pub type TThostFtdcCffexDepartmentNameType = [::std::os::raw::c_uchar; 101usize];
#[doc = ""]
#[doc = "TFtdcCffexDepartmentCodeType��һ��Ӫҵ����������"]
#[doc = ""]
pub type TThostFtdcCffexDepartmentCodeType = [::std::os::raw::c_uchar; 9usize];
pub type TThostFtdcHasTrusteeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcCSRCMemo1Type��һ��˵������"]
#[doc = ""]
pub type TThostFtdcCSRCMemo1Type = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcAssetmgrCFullNameType��һ�������ʲ�����ҵ����ڻ���˾ȫ������"]
#[doc = ""]
pub type TThostFtdcAssetmgrCFullNameType = [::std::os::raw::c_uchar; 101usize];
#[doc = ""]
#[doc = "TFtdcAssetmgrApprovalNOType��һ���ʲ�����ҵ�����ĺ�����"]
#[doc = ""]
pub type TThostFtdcAssetmgrApprovalNOType = [::std::os::raw::c_uchar; 51usize];
#[doc = ""]
#[doc = "TFtdcAssetmgrMgrNameType��һ���ʲ�����ҵ��������������"]
#[doc = ""]
pub type TThostFtdcAssetmgrMgrNameType = [::std::os::raw::c_uchar; 401usize];
pub type TThostFtdcAmTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcCSRCAmTypeType��һ��������������"]
#[doc = ""]
pub type TThostFtdcCSRCAmTypeType = [::std::os::raw::c_uchar; 5usize];
pub type TThostFtdcCSRCFundIOTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcCusAccountTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcCSRCNationalType��һ����������"]
#[doc = ""]
pub type TThostFtdcCSRCNationalType = [::std::os::raw::c_uchar; 4usize];
#[doc = ""]
#[doc = "TFtdcCSRCSecAgentIDType��һ����������ID����"]
#[doc = ""]
pub type TThostFtdcCSRCSecAgentIDType = [::std::os::raw::c_uchar; 11usize];
pub type TThostFtdcLanguageTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcAmAccountType��һ��Ͷ���˻�����"]
#[doc = ""]
pub type TThostFtdcAmAccountType = [::std::os::raw::c_uchar; 23usize];
pub type TThostFtdcAssetmgrClientTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcAssetmgrTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcUOMType��һ��������λ����"]
#[doc = ""]
pub type TThostFtdcUOMType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcSHFEInstLifePhaseType��һ����������Լ��������״\u{32c}����"]
#[doc = ""]
pub type TThostFtdcSHFEInstLifePhaseType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcSHFEProductClassType��һ����Ʒ��������"]
#[doc = ""]
pub type TThostFtdcSHFEProductClassType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcPriceDecimalType��һ���۸�С��λ����"]
#[doc = ""]
pub type TThostFtdcPriceDecimalType = [::std::os::raw::c_uchar; 2usize];
#[doc = ""]
#[doc = "TFtdcInTheMoneyFlagType��һ��ƽ\u{5b5}��Ȩ��־����"]
#[doc = ""]
pub type TThostFtdcInTheMoneyFlagType = [::std::os::raw::c_uchar; 2usize];
pub type TThostFtdcCheckInstrTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcDeliveryTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcBigMoneyType��һ���ʽ�����"]
#[doc = ""]
pub type TThostFtdcBigMoneyType = f64;
pub type TThostFtdcMaxMarginSideAlgorithmType = ::std::os::raw::c_uchar;
pub type TThostFtdcDAClientTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcCombinInstrIDType��һ��������Լ��������"]
#[doc = ""]
pub type TThostFtdcCombinInstrIDType = [::std::os::raw::c_uchar; 61usize];
#[doc = ""]
#[doc = "TFtdcCombinSettlePriceType��һ�����Ƚ��������"]
#[doc = ""]
pub type TThostFtdcCombinSettlePriceType = [::std::os::raw::c_uchar; 61usize];
#[doc = ""]
#[doc = "TFtdcDCEPriorityType��һ�����ȼ�����"]
#[doc = ""]
pub type TThostFtdcDCEPriorityType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcTradeGroupIDType��һ���ɽ��������"]
#[doc = ""]
pub type TThostFtdcTradeGroupIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcIsCheckPrepaType��һ���Ƿ�У�鿪�������ʽ�����"]
#[doc = ""]
pub type TThostFtdcIsCheckPrepaType = ::std::os::raw::c_int;
pub type TThostFtdcUOAAssetmgrTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcDirectionEnType = ::std::os::raw::c_uchar;
pub type TThostFtdcOffsetFlagEnType = ::std::os::raw::c_uchar;
pub type TThostFtdcHedgeFlagEnType = ::std::os::raw::c_uchar;
pub type TThostFtdcFundIOTypeEnType = ::std::os::raw::c_uchar;
pub type TThostFtdcFundTypeEnType = ::std::os::raw::c_uchar;
pub type TThostFtdcFundDirectionEnType = ::std::os::raw::c_uchar;
pub type TThostFtdcFundMortDirectionEnType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcSwapBusinessTypeType��һ������ҵ����������"]
#[doc = ""]
pub type TThostFtdcSwapBusinessTypeType = [::std::os::raw::c_uchar; 3usize];
pub type TThostFtdcOptionsTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcStrikeModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcStrikeTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcApplyTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcGiveUpDataSourceType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcExecOrderSysIDType��һ��\u{5b4}������ϵͳ�������"]
#[doc = ""]
pub type TThostFtdcExecOrderSysIDType = [::std::os::raw::c_uchar; 21usize];
pub type TThostFtdcExecResultType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcStrikeSequenceType��һ��\u{5b4}���������"]
#[doc = ""]
pub type TThostFtdcStrikeSequenceType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcStrikeTimeType��һ��\u{5b4}��ʱ������"]
#[doc = ""]
pub type TThostFtdcStrikeTimeType = [::std::os::raw::c_uchar; 13usize];
pub type TThostFtdcCombinationTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcDceCombinationTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcOptionRoyaltyPriceTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcBalanceAlgorithmType = ::std::os::raw::c_uchar;
pub type TThostFtdcActionTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcForQuoteStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcValueMethodType = ::std::os::raw::c_uchar;
pub type TThostFtdcExecOrderPositionFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcExecOrderCloseFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcProductTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcCZCEUploadFileNameType = ::std::os::raw::c_uchar;
pub type TThostFtdcDCEUploadFileNameType = ::std::os::raw::c_uchar;
pub type TThostFtdcSHFEUploadFileNameType = ::std::os::raw::c_uchar;
pub type TThostFtdcCFFEXUploadFileNameType = ::std::os::raw::c_uchar;
pub type TThostFtdcCombDirectionType = ::std::os::raw::c_uchar;
pub type TThostFtdcStrikeOffsetTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcReserveOpenAccStasType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcLoginRemarkType��һ����¼��ע����"]
#[doc = ""]
pub type TThostFtdcLoginRemarkType = [::std::os::raw::c_uchar; 36usize];
#[doc = ""]
#[doc = "TFtdcInvestUnitIDType��һ��Ͷ�ʵ�Ԫ��������"]
#[doc = ""]
pub type TThostFtdcInvestUnitIDType = [::std::os::raw::c_uchar; 17usize];
#[doc = ""]
#[doc = "TFtdcBulletinIDType��һ������������"]
#[doc = ""]
pub type TThostFtdcBulletinIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcNewsTypeType��һ��������������"]
#[doc = ""]
pub type TThostFtdcNewsTypeType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcNewsUrgencyType��һ�������\u{336}�����"]
#[doc = ""]
pub type TThostFtdcNewsUrgencyType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcAbstractType��һ����ϢժҪ����"]
#[doc = ""]
pub type TThostFtdcAbstractType = [::std::os::raw::c_uchar; 81usize];
#[doc = ""]
#[doc = "TFtdcComeFromType��һ����Ϣ��Դ����"]
#[doc = ""]
pub type TThostFtdcComeFromType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcURLLinkType��һ��WEB��\u{5b7}����"]
#[doc = ""]
pub type TThostFtdcURLLinkType = [::std::os::raw::c_uchar; 201usize];
#[doc = ""]
#[doc = "TFtdcLongIndividualNameType��һ����������������"]
#[doc = ""]
pub type TThostFtdcLongIndividualNameType = [::std::os::raw::c_uchar; 161usize];
#[doc = ""]
#[doc = "TFtdcLongFBEBankAccountNameType��һ�������������˻�������"]
#[doc = ""]
pub type TThostFtdcLongFBEBankAccountNameType = [::std::os::raw::c_uchar; 161usize];
#[doc = ""]
#[doc = "TFtdcDateTimeType��һ������ʱ������"]
#[doc = ""]
pub type TThostFtdcDateTimeType = [::std::os::raw::c_uchar; 17usize];
pub type TThostFtdcWeakPasswordSourceType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcRandomStringType��һ�����������"]
#[doc = ""]
pub type TThostFtdcRandomStringType = [::std::os::raw::c_uchar; 17usize];
pub type TThostFtdcOptSelfCloseFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcBizTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcAppTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcAppIDType��һ��App��������"]
#[doc = ""]
pub type TThostFtdcAppIDType = [::std::os::raw::c_uchar; 33usize];
#[doc = ""]
#[doc = "TFtdcSystemInfoLenType��һ��ϵͳ��Ϣ��������"]
#[doc = ""]
pub type TThostFtdcSystemInfoLenType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcAdditionalInfoLenType��һ��������Ϣ��������"]
#[doc = ""]
pub type TThostFtdcAdditionalInfoLenType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcClientSystemInfoType��һ�������ն�ϵͳ��Ϣ����"]
#[doc = ""]
pub type TThostFtdcClientSystemInfoType = [::std::os::raw::c_uchar; 273usize];
#[doc = ""]
#[doc = "TFtdcAdditionalInfoType��һ��ϵͳ�ⲿ��Ϣ����"]
#[doc = ""]
pub type TThostFtdcAdditionalInfoType = [::std::os::raw::c_uchar; 261usize];
#[doc = ""]
#[doc = "TFtdcBase64ClientSystemInfoType��һ��base64�����ն�ϵͳ��Ϣ����"]
#[doc = ""]
pub type TThostFtdcBase64ClientSystemInfoType = [::std::os::raw::c_uchar; 365usize];
#[doc = ""]
#[doc = "TFtdcBase64AdditionalInfoType��һ��base64ϵͳ�ⲿ��Ϣ����"]
#[doc = ""]
pub type TThostFtdcBase64AdditionalInfoType = [::std::os::raw::c_uchar; 349usize];
#[doc = ""]
#[doc = "TFtdcCurrentAuthMethodType��һ����ǰ���õ���\u{5a4}ģʽ��0����������\u{5a4}ģʽ A�ӵ�λ��ʼ���һλ����ͼƬ��\u{5a4}�룬�����ڶ�λ������\u{32c}���\u{e8ec}��������λ����������\u{5a4}������"]
#[doc = ""]
pub type TThostFtdcCurrentAuthMethodType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcCaptchaInfoLenType��һ��ͼƬ��\u{5a4}��Ϣ��������"]
#[doc = ""]
pub type TThostFtdcCaptchaInfoLenType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcCaptchaInfoType��һ��ͼƬ��\u{5a4}��Ϣ����"]
#[doc = ""]
pub type TThostFtdcCaptchaInfoType = [::std::os::raw::c_uchar; 2561usize];
#[doc = ""]
#[doc = "TFtdcUserTextSeqType��һ���û�������\u{5a4}��ı������"]
#[doc = ""]
pub type TThostFtdcUserTextSeqType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcHandshakeDataType��һ������������������"]
#[doc = ""]
pub type TThostFtdcHandshakeDataType = [::std::os::raw::c_uchar; 301usize];
#[doc = ""]
#[doc = "TFtdcHandshakeDataLenType��һ�������������ݳ�������"]
#[doc = ""]
pub type TThostFtdcHandshakeDataLenType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcCryptoKeyVersionType��һ��api��front\u{368}����Կ�汾������"]
#[doc = ""]
pub type TThostFtdcCryptoKeyVersionType = [::std::os::raw::c_uchar; 31usize];
#[doc = ""]
#[doc = "TFtdcRsaKeyVersionType��һ����Կ�汾������"]
#[doc = ""]
pub type TThostFtdcRsaKeyVersionType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcSoftwareProviderIDType��һ������������ID����"]
#[doc = ""]
pub type TThostFtdcSoftwareProviderIDType = [::std::os::raw::c_uchar; 22usize];
#[doc = ""]
#[doc = "TFtdcCollectTimeType��һ����Ϣ�ɼ�ʱ������"]
#[doc = ""]
pub type TThostFtdcCollectTimeType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcQueryFreqType��һ����ѯƵ������"]
#[doc = ""]
pub type TThostFtdcQueryFreqType = ::std::os::raw::c_int;
pub type TThostFtdcResponseValueType = ::std::os::raw::c_uchar;
pub type TThostFtdcOTCTradeTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcMatchTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcOTCTraderIDType��һ��OTC����Ա��������"]
#[doc = ""]
pub type TThostFtdcOTCTraderIDType = [::std::os::raw::c_uchar; 31usize];
#[doc = ""]
#[doc = "TFtdcRiskValueType��һ���ڻ�����\u{5b5}����"]
#[doc = ""]
pub type TThostFtdcRiskValueType = f64;
#[doc = ""]
#[doc = "TFtdcIDBNameType��һ������������������"]
#[doc = ""]
pub type TThostFtdcIDBNameType = [::std::os::raw::c_uchar; 100usize];
#[doc = ""]
#[doc = "TFtdcDiscountRatioType��һ���ۿ�������"]
#[doc = ""]
pub type TThostFtdcDiscountRatioType = f64;
pub type TThostFtdcAuthTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcClassTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcTradingTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcProductStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcSyncDeltaStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcActionDirectionType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcSyncDescriptionType��һ��\u{5f7}ƽ��������"]
#[doc = ""]
pub type TThostFtdcSyncDescriptionType = [::std::os::raw::c_uchar; 257usize];
#[doc = "��Ϣ�\u{5b7}�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcDisseminationField {
    #[doc = "����ϵ�к�"]
    pub SequenceSeries: TThostFtdcSequenceSeriesType,
    #[doc = "���к�"]
    pub SequenceNo: TThostFtdcSequenceNoType,
}
#[test]
fn bindgen_test_layout_CThostFtdcDisseminationField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcDisseminationField>(),
        8usize,
        concat!("Size of: ", stringify!(CThostFtdcDisseminationField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcDisseminationField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcDisseminationField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDisseminationField>())).SequenceSeries as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDisseminationField),
            "::",
            stringify!(SequenceSeries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDisseminationField>())).SequenceNo as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDisseminationField),
            "::",
            stringify!(SequenceNo)
        )
    );
}
#[doc = "�û���¼����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqUserLoginField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "�û��˲�Ʒ��Ϣ"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "�ӿڶ˲�Ʒ��Ϣ"]
    pub InterfaceProductInfo: TThostFtdcProductInfoType,
    #[doc = "Э����Ϣ"]
    pub ProtocolInfo: TThostFtdcProtocolInfoType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��\u{32c}����"]
    pub OneTimePassword: TThostFtdcPasswordType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "��¼��ע"]
    pub LoginRemark: TThostFtdcLoginRemarkType,
    #[doc = "�ն�IP�˿�"]
    pub ClientIPPort: TThostFtdcIPPortType,
    #[doc = "�ն�IP��\u{5b7}"]
    pub ClientIPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcReqUserLoginField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcReqUserLoginField>(),
        264usize,
        concat!("Size of: ", stringify!(CThostFtdcReqUserLoginField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcReqUserLoginField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcReqUserLoginField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginField>())).TradingDay as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginField>())).BrokerID as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginField>())).UserID as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginField>())).Password as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginField),
            "::",
            stringify!(Password)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginField>())).UserProductInfo as *const _
                as usize
        },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginField),
            "::",
            stringify!(UserProductInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginField>())).InterfaceProductInfo as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginField),
            "::",
            stringify!(InterfaceProductInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginField>())).ProtocolInfo as *const _
                as usize
        },
        99usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginField),
            "::",
            stringify!(ProtocolInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginField>())).MacAddress as *const _ as usize
        },
        110usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginField>())).OneTimePassword as *const _
                as usize
        },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginField),
            "::",
            stringify!(OneTimePassword)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginField>())).reserve1 as *const _ as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginField>())).LoginRemark as *const _ as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginField),
            "::",
            stringify!(LoginRemark)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginField>())).ClientIPPort as *const _
                as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginField),
            "::",
            stringify!(ClientIPPort)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginField>())).ClientIPAddress as *const _
                as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginField),
            "::",
            stringify!(ClientIPAddress)
        )
    );
}
impl Default for CThostFtdcReqUserLoginField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�û���¼Ӧ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspUserLoginField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "��¼�ɹ�ʱ��"]
    pub LoginTime: TThostFtdcTimeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "����ϵͳ����"]
    pub SystemName: TThostFtdcSystemNameType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "��\u{f1a35}�����"]
    pub MaxOrderRef: TThostFtdcOrderRefType,
    #[doc = "������ʱ��"]
    pub SHFETime: TThostFtdcTimeType,
    #[doc = "������ʱ��"]
    pub DCETime: TThostFtdcTimeType,
    #[doc = "\u{5a3}����ʱ��"]
    pub CZCETime: TThostFtdcTimeType,
    #[doc = "�н���ʱ��"]
    pub FFEXTime: TThostFtdcTimeType,
    #[doc = "��Դ����ʱ��"]
    pub INETime: TThostFtdcTimeType,
}
#[test]
fn bindgen_test_layout_CThostFtdcRspUserLoginField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcRspUserLoginField>(),
        156usize,
        concat!("Size of: ", stringify!(CThostFtdcRspUserLoginField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcRspUserLoginField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcRspUserLoginField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspUserLoginField>())).TradingDay as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspUserLoginField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspUserLoginField>())).LoginTime as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspUserLoginField),
            "::",
            stringify!(LoginTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspUserLoginField>())).BrokerID as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspUserLoginField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspUserLoginField>())).UserID as *const _ as usize
        },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspUserLoginField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspUserLoginField>())).SystemName as *const _ as usize
        },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspUserLoginField),
            "::",
            stringify!(SystemName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspUserLoginField>())).FrontID as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspUserLoginField),
            "::",
            stringify!(FrontID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspUserLoginField>())).SessionID as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspUserLoginField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspUserLoginField>())).MaxOrderRef as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspUserLoginField),
            "::",
            stringify!(MaxOrderRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspUserLoginField>())).SHFETime as *const _ as usize
        },
        109usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspUserLoginField),
            "::",
            stringify!(SHFETime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspUserLoginField>())).DCETime as *const _ as usize
        },
        118usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspUserLoginField),
            "::",
            stringify!(DCETime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspUserLoginField>())).CZCETime as *const _ as usize
        },
        127usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspUserLoginField),
            "::",
            stringify!(CZCETime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspUserLoginField>())).FFEXTime as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspUserLoginField),
            "::",
            stringify!(FFEXTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspUserLoginField>())).INETime as *const _ as usize
        },
        145usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspUserLoginField),
            "::",
            stringify!(INETime)
        )
    );
}
impl Default for CThostFtdcRspUserLoginField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�û��ǳ�����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcUserLogoutField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcUserLogoutField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcUserLogoutField>(),
        27usize,
        concat!("Size of: ", stringify!(CThostFtdcUserLogoutField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcUserLogoutField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcUserLogoutField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserLogoutField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserLogoutField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserLogoutField>())).UserID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserLogoutField),
            "::",
            stringify!(UserID)
        )
    );
}
#[doc = "ǿ�ƽ���Ա�˳�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcForceUserLogoutField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcForceUserLogoutField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcForceUserLogoutField>(),
        27usize,
        concat!("Size of: ", stringify!(CThostFtdcForceUserLogoutField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcForceUserLogoutField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcForceUserLogoutField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForceUserLogoutField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForceUserLogoutField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForceUserLogoutField>())).UserID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForceUserLogoutField),
            "::",
            stringify!(UserID)
        )
    );
}
#[doc = "�ͻ�����\u{5a4}����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqAuthenticateField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�û��˲�Ʒ��Ϣ"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "��\u{5a4}��"]
    pub AuthCode: TThostFtdcAuthCodeType,
    #[doc = "App����"]
    pub AppID: TThostFtdcAppIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcReqAuthenticateField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcReqAuthenticateField>(),
        88usize,
        concat!("Size of: ", stringify!(CThostFtdcReqAuthenticateField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcReqAuthenticateField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcReqAuthenticateField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqAuthenticateField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqAuthenticateField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqAuthenticateField>())).UserID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqAuthenticateField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqAuthenticateField>())).UserProductInfo as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqAuthenticateField),
            "::",
            stringify!(UserProductInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqAuthenticateField>())).AuthCode as *const _ as usize
        },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqAuthenticateField),
            "::",
            stringify!(AuthCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqAuthenticateField>())).AppID as *const _ as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqAuthenticateField),
            "::",
            stringify!(AppID)
        )
    );
}
impl Default for CThostFtdcReqAuthenticateField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�ͻ�����\u{5a4}��Ӧ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspAuthenticateField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�û��˲�Ʒ��Ϣ"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "App����"]
    pub AppID: TThostFtdcAppIDType,
    #[doc = "App����"]
    pub AppType: TThostFtdcAppTypeType,
}
#[test]
fn bindgen_test_layout_CThostFtdcRspAuthenticateField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcRspAuthenticateField>(),
        72usize,
        concat!("Size of: ", stringify!(CThostFtdcRspAuthenticateField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcRspAuthenticateField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcRspAuthenticateField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspAuthenticateField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspAuthenticateField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspAuthenticateField>())).UserID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspAuthenticateField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspAuthenticateField>())).UserProductInfo as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspAuthenticateField),
            "::",
            stringify!(UserProductInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspAuthenticateField>())).AppID as *const _ as usize
        },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspAuthenticateField),
            "::",
            stringify!(AppID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspAuthenticateField>())).AppType as *const _ as usize
        },
        71usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspAuthenticateField),
            "::",
            stringify!(AppType)
        )
    );
}
impl Default for CThostFtdcRspAuthenticateField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�ͻ�����\u{5a4}��Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcAuthenticationInfoField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�û��˲�Ʒ��Ϣ"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "��\u{5a4}��Ϣ"]
    pub AuthInfo: TThostFtdcAuthInfoType,
    #[doc = "�Ƿ�Ϊ��\u{5a4}���"]
    pub IsResult: TThostFtdcBoolType,
    #[doc = "App����"]
    pub AppID: TThostFtdcAppIDType,
    #[doc = "App����"]
    pub AppType: TThostFtdcAppTypeType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "�ն�IP��\u{5b7}"]
    pub ClientIPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcAuthenticationInfoField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcAuthenticationInfoField>(),
        256usize,
        concat!("Size of: ", stringify!(CThostFtdcAuthenticationInfoField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcAuthenticationInfoField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcAuthenticationInfoField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAuthenticationInfoField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAuthenticationInfoField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAuthenticationInfoField>())).UserID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAuthenticationInfoField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAuthenticationInfoField>())).UserProductInfo
                as *const _ as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAuthenticationInfoField),
            "::",
            stringify!(UserProductInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAuthenticationInfoField>())).AuthInfo as *const _
                as usize
        },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAuthenticationInfoField),
            "::",
            stringify!(AuthInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAuthenticationInfoField>())).IsResult as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAuthenticationInfoField),
            "::",
            stringify!(IsResult)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAuthenticationInfoField>())).AppID as *const _ as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAuthenticationInfoField),
            "::",
            stringify!(AppID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAuthenticationInfoField>())).AppType as *const _
                as usize
        },
        205usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAuthenticationInfoField),
            "::",
            stringify!(AppType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAuthenticationInfoField>())).reserve1 as *const _
                as usize
        },
        206usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAuthenticationInfoField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAuthenticationInfoField>())).ClientIPAddress
                as *const _ as usize
        },
        222usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAuthenticationInfoField),
            "::",
            stringify!(ClientIPAddress)
        )
    );
}
impl Default for CThostFtdcAuthenticationInfoField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�û���¼Ӧ��2"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspUserLogin2Field {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "��¼�ɹ�ʱ��"]
    pub LoginTime: TThostFtdcTimeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "����ϵͳ����"]
    pub SystemName: TThostFtdcSystemNameType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "��\u{f1a35}�����"]
    pub MaxOrderRef: TThostFtdcOrderRefType,
    #[doc = "������ʱ��"]
    pub SHFETime: TThostFtdcTimeType,
    #[doc = "������ʱ��"]
    pub DCETime: TThostFtdcTimeType,
    #[doc = "\u{5a3}����ʱ��"]
    pub CZCETime: TThostFtdcTimeType,
    #[doc = "�н���ʱ��"]
    pub FFEXTime: TThostFtdcTimeType,
    #[doc = "��Դ����ʱ��"]
    pub INETime: TThostFtdcTimeType,
    #[doc = "�����"]
    pub RandomString: TThostFtdcRandomStringType,
}
#[test]
fn bindgen_test_layout_CThostFtdcRspUserLogin2Field() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcRspUserLogin2Field>(),
        172usize,
        concat!("Size of: ", stringify!(CThostFtdcRspUserLogin2Field))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcRspUserLogin2Field>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcRspUserLogin2Field))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspUserLogin2Field>())).TradingDay as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspUserLogin2Field),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspUserLogin2Field>())).LoginTime as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspUserLogin2Field),
            "::",
            stringify!(LoginTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspUserLogin2Field>())).BrokerID as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspUserLogin2Field),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspUserLogin2Field>())).UserID as *const _ as usize
        },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspUserLogin2Field),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspUserLogin2Field>())).SystemName as *const _ as usize
        },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspUserLogin2Field),
            "::",
            stringify!(SystemName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspUserLogin2Field>())).FrontID as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspUserLogin2Field),
            "::",
            stringify!(FrontID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspUserLogin2Field>())).SessionID as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspUserLogin2Field),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspUserLogin2Field>())).MaxOrderRef as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspUserLogin2Field),
            "::",
            stringify!(MaxOrderRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspUserLogin2Field>())).SHFETime as *const _ as usize
        },
        109usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspUserLogin2Field),
            "::",
            stringify!(SHFETime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspUserLogin2Field>())).DCETime as *const _ as usize
        },
        118usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspUserLogin2Field),
            "::",
            stringify!(DCETime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspUserLogin2Field>())).CZCETime as *const _ as usize
        },
        127usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspUserLogin2Field),
            "::",
            stringify!(CZCETime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspUserLogin2Field>())).FFEXTime as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspUserLogin2Field),
            "::",
            stringify!(FFEXTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspUserLogin2Field>())).INETime as *const _ as usize
        },
        145usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspUserLogin2Field),
            "::",
            stringify!(INETime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspUserLogin2Field>())).RandomString as *const _
                as usize
        },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspUserLogin2Field),
            "::",
            stringify!(RandomString)
        )
    );
}
impl Default for CThostFtdcRspUserLogin2Field {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "����ת�ʱ���ͷ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcTransferHeaderField {
    #[doc = "�汾�ţ�������1.0"]
    pub Version: TThostFtdcVersionType,
    #[doc = "���״��룬����"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "�������ڣ����\u{e8ec}��ʽ��yyyymmdd"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ�䣬���\u{e8ec}��ʽ��hhmmss"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ�ţ�N/A"]
    pub TradeSerial: TThostFtdcTradeSerialType,
    #[doc = "�ڻ���˾���룬����"]
    pub FutureID: TThostFtdcFutureIDType,
    #[doc = "���д��룬���ݲ�ѯ���еõ�������"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з����Ĵ��룬���ݲ�ѯ���еõ�������"]
    pub BankBrchID: TThostFtdcBankBrchIDType,
    #[doc = "����Ա��N/A"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "�����豸���\u{363}�N/A"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "��¼����N/A"]
    pub RecordNum: TThostFtdcRecordNumType,
    #[doc = "�Ự��ţ�N/A"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�����ţ�N/A"]
    pub RequestID: TThostFtdcRequestIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcTransferHeaderField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcTransferHeaderField>(),
        96usize,
        concat!("Size of: ", stringify!(CThostFtdcTransferHeaderField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcTransferHeaderField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcTransferHeaderField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferHeaderField>())).Version as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferHeaderField),
            "::",
            stringify!(Version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferHeaderField>())).TradeCode as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferHeaderField),
            "::",
            stringify!(TradeCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferHeaderField>())).TradeDate as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferHeaderField),
            "::",
            stringify!(TradeDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferHeaderField>())).TradeTime as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferHeaderField),
            "::",
            stringify!(TradeTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferHeaderField>())).TradeSerial as *const _
                as usize
        },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferHeaderField),
            "::",
            stringify!(TradeSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferHeaderField>())).FutureID as *const _ as usize
        },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferHeaderField),
            "::",
            stringify!(FutureID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferHeaderField>())).BankID as *const _ as usize
        },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferHeaderField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferHeaderField>())).BankBrchID as *const _
                as usize
        },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferHeaderField),
            "::",
            stringify!(BankBrchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferHeaderField>())).OperNo as *const _ as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferHeaderField),
            "::",
            stringify!(OperNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferHeaderField>())).DeviceID as *const _ as usize
        },
        75usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferHeaderField),
            "::",
            stringify!(DeviceID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferHeaderField>())).RecordNum as *const _ as usize
        },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferHeaderField),
            "::",
            stringify!(RecordNum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferHeaderField>())).SessionID as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferHeaderField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferHeaderField>())).RequestID as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferHeaderField),
            "::",
            stringify!(RequestID)
        )
    );
}
#[doc = "�����ʽ�ת�ڻ�����TradeCode=202001"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcTransferBankToFutureReqField {
    #[doc = "�ڻ��ʽ��˻�"]
    pub FutureAccount: TThostFtdcAccountIDType,
    #[doc = "�����־"]
    pub FuturePwdFlag: TThostFtdcFuturePwdFlagType,
    #[doc = "����"]
    pub FutureAccPwd: TThostFtdcFutureAccPwdType,
    #[doc = "ת�˽��"]
    pub TradeAmt: TThostFtdcMoneyType,
    #[doc = "�ͻ�������"]
    pub CustFee: TThostFtdcMoneyType,
    #[doc = "���\u{5a3}�RMB-����� USD-��Բ HKD-��Ԫ"]
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
}
#[test]
fn bindgen_test_layout_CThostFtdcTransferBankToFutureReqField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcTransferBankToFutureReqField>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcTransferBankToFutureReqField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcTransferBankToFutureReqField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcTransferBankToFutureReqField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferBankToFutureReqField>())).FutureAccount
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferBankToFutureReqField),
            "::",
            stringify!(FutureAccount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferBankToFutureReqField>())).FuturePwdFlag
                as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferBankToFutureReqField),
            "::",
            stringify!(FuturePwdFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferBankToFutureReqField>())).FutureAccPwd
                as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferBankToFutureReqField),
            "::",
            stringify!(FutureAccPwd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferBankToFutureReqField>())).TradeAmt as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferBankToFutureReqField),
            "::",
            stringify!(TradeAmt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferBankToFutureReqField>())).CustFee as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferBankToFutureReqField),
            "::",
            stringify!(CustFee)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferBankToFutureReqField>())).CurrencyCode
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferBankToFutureReqField),
            "::",
            stringify!(CurrencyCode)
        )
    );
}
#[doc = "�����ʽ�ת�ڻ�������Ӧ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTransferBankToFutureRspField {
    #[doc = "��Ӧ����"]
    pub RetCode: TThostFtdcRetCodeType,
    #[doc = "��Ӧ��Ϣ"]
    pub RetInfo: TThostFtdcRetInfoType,
    #[doc = "�ʽ��˻�"]
    pub FutureAccount: TThostFtdcAccountIDType,
    #[doc = "ת�ʽ��"]
    pub TradeAmt: TThostFtdcMoneyType,
    #[doc = "Ӧ�տͻ�������"]
    pub CustFee: TThostFtdcMoneyType,
    #[doc = "����"]
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
}
#[test]
fn bindgen_test_layout_CThostFtdcTransferBankToFutureRspField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcTransferBankToFutureRspField>(),
        176usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcTransferBankToFutureRspField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcTransferBankToFutureRspField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcTransferBankToFutureRspField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferBankToFutureRspField>())).RetCode as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferBankToFutureRspField),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferBankToFutureRspField>())).RetInfo as *const _
                as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferBankToFutureRspField),
            "::",
            stringify!(RetInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferBankToFutureRspField>())).FutureAccount
                as *const _ as usize
        },
        134usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferBankToFutureRspField),
            "::",
            stringify!(FutureAccount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferBankToFutureRspField>())).TradeAmt as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferBankToFutureRspField),
            "::",
            stringify!(TradeAmt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferBankToFutureRspField>())).CustFee as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferBankToFutureRspField),
            "::",
            stringify!(CustFee)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferBankToFutureRspField>())).CurrencyCode
                as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferBankToFutureRspField),
            "::",
            stringify!(CurrencyCode)
        )
    );
}
impl Default for CThostFtdcTransferBankToFutureRspField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�ڻ��ʽ�ת��������TradeCode=202002"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcTransferFutureToBankReqField {
    #[doc = "�ڻ��ʽ��˻�"]
    pub FutureAccount: TThostFtdcAccountIDType,
    #[doc = "�����־"]
    pub FuturePwdFlag: TThostFtdcFuturePwdFlagType,
    #[doc = "����"]
    pub FutureAccPwd: TThostFtdcFutureAccPwdType,
    #[doc = "ת�˽��"]
    pub TradeAmt: TThostFtdcMoneyType,
    #[doc = "�ͻ�������"]
    pub CustFee: TThostFtdcMoneyType,
    #[doc = "���\u{5a3}�RMB-����� USD-��Բ HKD-��Ԫ"]
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
}
#[test]
fn bindgen_test_layout_CThostFtdcTransferFutureToBankReqField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcTransferFutureToBankReqField>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcTransferFutureToBankReqField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcTransferFutureToBankReqField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcTransferFutureToBankReqField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferFutureToBankReqField>())).FutureAccount
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferFutureToBankReqField),
            "::",
            stringify!(FutureAccount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferFutureToBankReqField>())).FuturePwdFlag
                as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferFutureToBankReqField),
            "::",
            stringify!(FuturePwdFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferFutureToBankReqField>())).FutureAccPwd
                as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferFutureToBankReqField),
            "::",
            stringify!(FutureAccPwd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferFutureToBankReqField>())).TradeAmt as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferFutureToBankReqField),
            "::",
            stringify!(TradeAmt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferFutureToBankReqField>())).CustFee as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferFutureToBankReqField),
            "::",
            stringify!(CustFee)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferFutureToBankReqField>())).CurrencyCode
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferFutureToBankReqField),
            "::",
            stringify!(CurrencyCode)
        )
    );
}
#[doc = "�ڻ��ʽ�ת����������Ӧ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTransferFutureToBankRspField {
    #[doc = "��Ӧ����"]
    pub RetCode: TThostFtdcRetCodeType,
    #[doc = "��Ӧ��Ϣ"]
    pub RetInfo: TThostFtdcRetInfoType,
    #[doc = "�ʽ��˻�"]
    pub FutureAccount: TThostFtdcAccountIDType,
    #[doc = "ת�ʽ��"]
    pub TradeAmt: TThostFtdcMoneyType,
    #[doc = "Ӧ�տͻ�������"]
    pub CustFee: TThostFtdcMoneyType,
    #[doc = "����"]
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
}
#[test]
fn bindgen_test_layout_CThostFtdcTransferFutureToBankRspField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcTransferFutureToBankRspField>(),
        176usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcTransferFutureToBankRspField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcTransferFutureToBankRspField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcTransferFutureToBankRspField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferFutureToBankRspField>())).RetCode as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferFutureToBankRspField),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferFutureToBankRspField>())).RetInfo as *const _
                as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferFutureToBankRspField),
            "::",
            stringify!(RetInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferFutureToBankRspField>())).FutureAccount
                as *const _ as usize
        },
        134usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferFutureToBankRspField),
            "::",
            stringify!(FutureAccount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferFutureToBankRspField>())).TradeAmt as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferFutureToBankRspField),
            "::",
            stringify!(TradeAmt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferFutureToBankRspField>())).CustFee as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferFutureToBankRspField),
            "::",
            stringify!(CustFee)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferFutureToBankRspField>())).CurrencyCode
                as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferFutureToBankRspField),
            "::",
            stringify!(CurrencyCode)
        )
    );
}
impl Default for CThostFtdcTransferFutureToBankRspField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ�����ʽ�����TradeCode=204002"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcTransferQryBankReqField {
    #[doc = "�ڻ��ʽ��˻�"]
    pub FutureAccount: TThostFtdcAccountIDType,
    #[doc = "�����־"]
    pub FuturePwdFlag: TThostFtdcFuturePwdFlagType,
    #[doc = "����"]
    pub FutureAccPwd: TThostFtdcFutureAccPwdType,
    #[doc = "���\u{5a3}�RMB-����� USD-��Բ HKD-��Ԫ"]
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
}
#[test]
fn bindgen_test_layout_CThostFtdcTransferQryBankReqField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcTransferQryBankReqField>(),
        35usize,
        concat!("Size of: ", stringify!(CThostFtdcTransferQryBankReqField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcTransferQryBankReqField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcTransferQryBankReqField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferQryBankReqField>())).FutureAccount as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferQryBankReqField),
            "::",
            stringify!(FutureAccount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferQryBankReqField>())).FuturePwdFlag as *const _
                as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferQryBankReqField),
            "::",
            stringify!(FuturePwdFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferQryBankReqField>())).FutureAccPwd as *const _
                as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferQryBankReqField),
            "::",
            stringify!(FutureAccPwd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferQryBankReqField>())).CurrencyCode as *const _
                as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferQryBankReqField),
            "::",
            stringify!(CurrencyCode)
        )
    );
}
#[doc = "��ѯ�����ʽ�������Ӧ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTransferQryBankRspField {
    #[doc = "��Ӧ����"]
    pub RetCode: TThostFtdcRetCodeType,
    #[doc = "��Ӧ��Ϣ"]
    pub RetInfo: TThostFtdcRetInfoType,
    #[doc = "�ʽ��˻�"]
    pub FutureAccount: TThostFtdcAccountIDType,
    #[doc = "�������"]
    pub TradeAmt: TThostFtdcMoneyType,
    #[doc = "���п������"]
    pub UseAmt: TThostFtdcMoneyType,
    #[doc = "���п�ȡ���"]
    pub FetchAmt: TThostFtdcMoneyType,
    #[doc = "����"]
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
}
#[test]
fn bindgen_test_layout_CThostFtdcTransferQryBankRspField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcTransferQryBankRspField>(),
        184usize,
        concat!("Size of: ", stringify!(CThostFtdcTransferQryBankRspField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcTransferQryBankRspField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcTransferQryBankRspField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferQryBankRspField>())).RetCode as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferQryBankRspField),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferQryBankRspField>())).RetInfo as *const _
                as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferQryBankRspField),
            "::",
            stringify!(RetInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferQryBankRspField>())).FutureAccount as *const _
                as usize
        },
        134usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferQryBankRspField),
            "::",
            stringify!(FutureAccount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferQryBankRspField>())).TradeAmt as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferQryBankRspField),
            "::",
            stringify!(TradeAmt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferQryBankRspField>())).UseAmt as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferQryBankRspField),
            "::",
            stringify!(UseAmt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferQryBankRspField>())).FetchAmt as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferQryBankRspField),
            "::",
            stringify!(FetchAmt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferQryBankRspField>())).CurrencyCode as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferQryBankRspField),
            "::",
            stringify!(CurrencyCode)
        )
    );
}
impl Default for CThostFtdcTransferQryBankRspField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ���н�����ϸ����TradeCode=204999"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcTransferQryDetailReqField {
    #[doc = "�ڻ��ʽ��˻�"]
    pub FutureAccount: TThostFtdcAccountIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcTransferQryDetailReqField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcTransferQryDetailReqField>(),
        13usize,
        concat!("Size of: ", stringify!(CThostFtdcTransferQryDetailReqField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcTransferQryDetailReqField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcTransferQryDetailReqField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferQryDetailReqField>())).FutureAccount
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferQryDetailReqField),
            "::",
            stringify!(FutureAccount)
        )
    );
}
#[doc = "��ѯ���н�����ϸ������Ӧ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTransferQryDetailRspField {
    #[doc = "��������"]
    pub TradeDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "���״���"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "�ڻ���ˮ��"]
    pub FutureSerial: TThostFtdcTradeSerialNoType,
    #[doc = "�ڻ���˾����"]
    pub FutureID: TThostFtdcFutureIDType,
    #[doc = "�ʽ��ʺ�"]
    pub FutureAccount: TThostFtdcFutureAccountType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcTradeSerialNoType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з����Ĵ���"]
    pub BankBrchID: TThostFtdcBankBrchIDType,
    #[doc = "�����˺�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "\u{5a4}������"]
    pub CertCode: TThostFtdcCertCodeType,
    #[doc = "���Ҵ���"]
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
    #[doc = "�������"]
    pub TxAmount: TThostFtdcMoneyType,
    #[doc = "��Ч��־"]
    pub Flag: TThostFtdcTransferValidFlagType,
}
#[test]
fn bindgen_test_layout_CThostFtdcTransferQryDetailRspField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcTransferQryDetailRspField>(),
        168usize,
        concat!("Size of: ", stringify!(CThostFtdcTransferQryDetailRspField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcTransferQryDetailRspField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcTransferQryDetailRspField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferQryDetailRspField>())).TradeDate as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferQryDetailRspField),
            "::",
            stringify!(TradeDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferQryDetailRspField>())).TradeTime as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferQryDetailRspField),
            "::",
            stringify!(TradeTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferQryDetailRspField>())).TradeCode as *const _
                as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferQryDetailRspField),
            "::",
            stringify!(TradeCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferQryDetailRspField>())).FutureSerial as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferQryDetailRspField),
            "::",
            stringify!(FutureSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferQryDetailRspField>())).FutureID as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferQryDetailRspField),
            "::",
            stringify!(FutureID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferQryDetailRspField>())).FutureAccount
                as *const _ as usize
        },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferQryDetailRspField),
            "::",
            stringify!(FutureAccount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferQryDetailRspField>())).BankSerial as *const _
                as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferQryDetailRspField),
            "::",
            stringify!(BankSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferQryDetailRspField>())).BankID as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferQryDetailRspField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferQryDetailRspField>())).BankBrchID as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferQryDetailRspField),
            "::",
            stringify!(BankBrchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferQryDetailRspField>())).BankAccount as *const _
                as usize
        },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferQryDetailRspField),
            "::",
            stringify!(BankAccount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferQryDetailRspField>())).CertCode as *const _
                as usize
        },
        122usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferQryDetailRspField),
            "::",
            stringify!(CertCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferQryDetailRspField>())).CurrencyCode as *const _
                as usize
        },
        143usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferQryDetailRspField),
            "::",
            stringify!(CurrencyCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferQryDetailRspField>())).TxAmount as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferQryDetailRspField),
            "::",
            stringify!(TxAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferQryDetailRspField>())).Flag as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferQryDetailRspField),
            "::",
            stringify!(Flag)
        )
    );
}
impl Default for CThostFtdcTransferQryDetailRspField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��Ӧ��Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspInfoField {
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
#[test]
fn bindgen_test_layout_CThostFtdcRspInfoField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcRspInfoField>(),
        88usize,
        concat!("Size of: ", stringify!(CThostFtdcRspInfoField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcRspInfoField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcRspInfoField))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcRspInfoField>())).ErrorID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspInfoField),
            "::",
            stringify!(ErrorID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcRspInfoField>())).ErrorMsg as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspInfoField),
            "::",
            stringify!(ErrorMsg)
        )
    );
}
impl Default for CThostFtdcRspInfoField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "����������"]
    pub ExchangeName: TThostFtdcExchangeNameType,
    #[doc = "����������"]
    pub ExchangeProperty: TThostFtdcExchangePropertyType,
}
#[test]
fn bindgen_test_layout_CThostFtdcExchangeField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcExchangeField>(),
        71usize,
        concat!("Size of: ", stringify!(CThostFtdcExchangeField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcExchangeField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcExchangeField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeField>())).ExchangeID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeField>())).ExchangeName as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeField),
            "::",
            stringify!(ExchangeName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeField>())).ExchangeProperty as *const _
                as usize
        },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeField),
            "::",
            stringify!(ExchangeProperty)
        )
    );
}
impl Default for CThostFtdcExchangeField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��Ʒ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcProductField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��Ʒ����"]
    pub ProductName: TThostFtdcProductNameType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ʒ����"]
    pub ProductClass: TThostFtdcProductClassType,
    #[doc = "��Լ��������"]
    pub VolumeMultiple: TThostFtdcVolumeMultipleType,
    #[doc = "��С�䶯��λ"]
    pub PriceTick: TThostFtdcPriceType,
    #[doc = "�м۵�����µ���"]
    pub MaxMarketOrderVolume: TThostFtdcVolumeType,
    #[doc = "�м۵���С�µ���"]
    pub MinMarketOrderVolume: TThostFtdcVolumeType,
    #[doc = "�\u{7bc}۵�����µ���"]
    pub MaxLimitOrderVolume: TThostFtdcVolumeType,
    #[doc = "�\u{7bc}۵���С�µ���"]
    pub MinLimitOrderVolume: TThostFtdcVolumeType,
    #[doc = "�\u{5b2}�����"]
    pub PositionType: TThostFtdcPositionTypeType,
    #[doc = "�\u{5b2}���������"]
    pub PositionDateType: TThostFtdcPositionDateTypeType,
    #[doc = "ƽ�\u{5b4}�������"]
    pub CloseDealType: TThostFtdcCloseDealTypeType,
    #[doc = "���ױ�������"]
    pub TradeCurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "��Ѻ�ʽ���÷�Χ"]
    pub MortgageFundUseRange: TThostFtdcMortgageFundUseRangeType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldInstrumentIDType,
    #[doc = "��Լ������Ʒ����"]
    pub UnderlyingMultiple: TThostFtdcUnderlyingMultipleType,
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcInstrumentIDType,
    #[doc = "��������Ʒ����"]
    pub ExchangeProductID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcProductField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcProductField>(),
        312usize,
        concat!("Size of: ", stringify!(CThostFtdcProductField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcProductField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcProductField))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcProductField>())).reserve1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcProductField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcProductField>())).ProductName as *const _ as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcProductField),
            "::",
            stringify!(ProductName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcProductField>())).ExchangeID as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcProductField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcProductField>())).ProductClass as *const _ as usize
        },
        61usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcProductField),
            "::",
            stringify!(ProductClass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcProductField>())).VolumeMultiple as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcProductField),
            "::",
            stringify!(VolumeMultiple)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcProductField>())).PriceTick as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcProductField),
            "::",
            stringify!(PriceTick)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcProductField>())).MaxMarketOrderVolume as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcProductField),
            "::",
            stringify!(MaxMarketOrderVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcProductField>())).MinMarketOrderVolume as *const _
                as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcProductField),
            "::",
            stringify!(MinMarketOrderVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcProductField>())).MaxLimitOrderVolume as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcProductField),
            "::",
            stringify!(MaxLimitOrderVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcProductField>())).MinLimitOrderVolume as *const _
                as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcProductField),
            "::",
            stringify!(MinLimitOrderVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcProductField>())).PositionType as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcProductField),
            "::",
            stringify!(PositionType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcProductField>())).PositionDateType as *const _ as usize
        },
        97usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcProductField),
            "::",
            stringify!(PositionDateType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcProductField>())).CloseDealType as *const _ as usize
        },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcProductField),
            "::",
            stringify!(CloseDealType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcProductField>())).TradeCurrencyID as *const _ as usize
        },
        99usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcProductField),
            "::",
            stringify!(TradeCurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcProductField>())).MortgageFundUseRange as *const _
                as usize
        },
        103usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcProductField),
            "::",
            stringify!(MortgageFundUseRange)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcProductField>())).reserve2 as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcProductField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcProductField>())).UnderlyingMultiple as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcProductField),
            "::",
            stringify!(UnderlyingMultiple)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcProductField>())).ProductID as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcProductField),
            "::",
            stringify!(ProductID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcProductField>())).ExchangeProductID as *const _
                as usize
        },
        225usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcProductField),
            "::",
            stringify!(ExchangeProductID)
        )
    );
}
impl Default for CThostFtdcProductField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��Լ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInstrumentField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ����"]
    pub InstrumentName: TThostFtdcInstrumentNameType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve3: TThostFtdcOldInstrumentIDType,
    #[doc = "��Ʒ����"]
    pub ProductClass: TThostFtdcProductClassType,
    #[doc = "�������"]
    pub DeliveryYear: TThostFtdcYearType,
    #[doc = "������"]
    pub DeliveryMonth: TThostFtdcMonthType,
    #[doc = "�м۵�����µ���"]
    pub MaxMarketOrderVolume: TThostFtdcVolumeType,
    #[doc = "�м۵���С�µ���"]
    pub MinMarketOrderVolume: TThostFtdcVolumeType,
    #[doc = "�\u{7bc}۵�����µ���"]
    pub MaxLimitOrderVolume: TThostFtdcVolumeType,
    #[doc = "�\u{7bc}۵���С�µ���"]
    pub MinLimitOrderVolume: TThostFtdcVolumeType,
    #[doc = "��Լ��������"]
    pub VolumeMultiple: TThostFtdcVolumeMultipleType,
    #[doc = "��С�䶯��λ"]
    pub PriceTick: TThostFtdcPriceType,
    #[doc = "������"]
    pub CreateDate: TThostFtdcDateType,
    #[doc = "������"]
    pub OpenDate: TThostFtdcDateType,
    #[doc = "������"]
    pub ExpireDate: TThostFtdcDateType,
    #[doc = "��ʼ������"]
    pub StartDelivDate: TThostFtdcDateType,
    #[doc = "����������"]
    pub EndDelivDate: TThostFtdcDateType,
    #[doc = "��Լ��������״\u{32c}"]
    pub InstLifePhase: TThostFtdcInstLifePhaseType,
    #[doc = "��ǰ�Ƿ���"]
    pub IsTrading: TThostFtdcBoolType,
    #[doc = "�\u{5b2}�����"]
    pub PositionType: TThostFtdcPositionTypeType,
    #[doc = "�\u{5b2}���������"]
    pub PositionDateType: TThostFtdcPositionDateTypeType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub LongMarginRatio: TThostFtdcRatioType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub ShortMarginRatio: TThostFtdcRatioType,
    #[doc = "�Ƿ�ʹ�ô�\u{ed65}�\u{7f1}�\u{5a4}���㷨"]
    pub MaxMarginSideAlgorithm: TThostFtdcMaxMarginSideAlgorithmType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve4: TThostFtdcOldInstrumentIDType,
    #[doc = "\u{5b4}�м�"]
    pub StrikePrice: TThostFtdcPriceType,
    #[doc = "��Ȩ����"]
    pub OptionsType: TThostFtdcOptionsTypeType,
    #[doc = "��Լ������Ʒ����"]
    pub UnderlyingMultiple: TThostFtdcUnderlyingMultipleType,
    #[doc = "�������"]
    pub CombinationType: TThostFtdcCombinationTypeType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcInstrumentIDType,
    #[doc = "������Ʒ����"]
    pub UnderlyingInstrID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcInstrumentField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcInstrumentField>(),
        616usize,
        concat!("Size of: ", stringify!(CThostFtdcInstrumentField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcInstrumentField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcInstrumentField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).reserve1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).ExchangeID as *const _ as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).InstrumentName as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(InstrumentName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).reserve2 as *const _ as usize
        },
        61usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).reserve3 as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(reserve3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).ProductClass as *const _ as usize
        },
        123usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(ProductClass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).DeliveryYear as *const _ as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(DeliveryYear)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).DeliveryMonth as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(DeliveryMonth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).MaxMarketOrderVolume as *const _
                as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(MaxMarketOrderVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).MinMarketOrderVolume as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(MinMarketOrderVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).MaxLimitOrderVolume as *const _
                as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(MaxLimitOrderVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).MinLimitOrderVolume as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(MinLimitOrderVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).VolumeMultiple as *const _
                as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(VolumeMultiple)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).PriceTick as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(PriceTick)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).CreateDate as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(CreateDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).OpenDate as *const _ as usize
        },
        169usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(OpenDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).ExpireDate as *const _ as usize
        },
        178usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(ExpireDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).StartDelivDate as *const _
                as usize
        },
        187usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(StartDelivDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).EndDelivDate as *const _ as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(EndDelivDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).InstLifePhase as *const _ as usize
        },
        205usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(InstLifePhase)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).IsTrading as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(IsTrading)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).PositionType as *const _ as usize
        },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(PositionType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).PositionDateType as *const _
                as usize
        },
        213usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(PositionDateType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).LongMarginRatio as *const _
                as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(LongMarginRatio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).ShortMarginRatio as *const _
                as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(ShortMarginRatio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).MaxMarginSideAlgorithm as *const _
                as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(MaxMarginSideAlgorithm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).reserve4 as *const _ as usize
        },
        233usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(reserve4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).StrikePrice as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(StrikePrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).OptionsType as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(OptionsType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).UnderlyingMultiple as *const _
                as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(UnderlyingMultiple)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).CombinationType as *const _
                as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(CombinationType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).InstrumentID as *const _ as usize
        },
        289usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).ExchangeInstID as *const _
                as usize
        },
        370usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(ExchangeInstID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).ProductID as *const _ as usize
        },
        451usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(ProductID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentField>())).UnderlyingInstrID as *const _
                as usize
        },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentField),
            "::",
            stringify!(UnderlyingInstrID)
        )
    );
}
impl Default for CThostFtdcInstrumentField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���\u{379}�˾"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBrokerField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{379}�˾���"]
    pub BrokerAbbr: TThostFtdcBrokerAbbrType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerName: TThostFtdcBrokerNameType,
    #[doc = "�Ƿ��Ծ"]
    pub IsActive: TThostFtdcBoolType,
}
#[test]
fn bindgen_test_layout_CThostFtdcBrokerField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcBrokerField>(),
        108usize,
        concat!("Size of: ", stringify!(CThostFtdcBrokerField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcBrokerField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcBrokerField))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcBrokerField>())).BrokerID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerField>())).BrokerAbbr as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerField),
            "::",
            stringify!(BrokerAbbr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerField>())).BrokerName as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerField),
            "::",
            stringify!(BrokerName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcBrokerField>())).IsActive as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerField),
            "::",
            stringify!(IsActive)
        )
    );
}
impl Default for CThostFtdcBrokerField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "����������Ա"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTraderField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "��װ����"]
    pub InstallCount: TThostFtdcInstallCountType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcTraderField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcTraderField>(),
        100usize,
        concat!("Size of: ", stringify!(CThostFtdcTraderField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcTraderField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcTraderField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTraderField>())).ExchangeID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTraderField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcTraderField>())).TraderID as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTraderField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTraderField>())).ParticipantID as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTraderField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcTraderField>())).Password as *const _ as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTraderField),
            "::",
            stringify!(Password)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTraderField>())).InstallCount as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTraderField),
            "::",
            stringify!(InstallCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcTraderField>())).BrokerID as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTraderField),
            "::",
            stringify!(BrokerID)
        )
    );
}
impl Default for CThostFtdcTraderField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "Ͷ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInvestorField {
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���߷������"]
    pub InvestorGroupID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ��������"]
    pub InvestorName: TThostFtdcPartyNameType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�Ƿ��Ծ"]
    pub IsActive: TThostFtdcBoolType,
    #[doc = "��ϵ�绰"]
    pub Telephone: TThostFtdcTelephoneType,
    #[doc = "\u{368}Ѷ��\u{5b7}"]
    pub Address: TThostFtdcAddressType,
    #[doc = "��������"]
    pub OpenDate: TThostFtdcDateType,
    #[doc = "�\u{5bb}�"]
    pub Mobile: TThostFtdcMobileType,
    #[doc = "��������ģ�����"]
    pub CommModelID: TThostFtdcInvestorIDType,
    #[doc = "��\u{5a4}����ģ�����"]
    pub MarginModelID: TThostFtdcInvestorIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcInvestorField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcInvestorField>(),
        396usize,
        concat!("Size of: ", stringify!(CThostFtdcInvestorField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcInvestorField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcInvestorField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorField>())).InvestorID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorField>())).BrokerID as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorField>())).InvestorGroupID as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorField),
            "::",
            stringify!(InvestorGroupID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorField>())).InvestorName as *const _ as usize
        },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorField),
            "::",
            stringify!(InvestorName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorField>())).IdentifiedCardType as *const _
                as usize
        },
        118usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorField),
            "::",
            stringify!(IdentifiedCardType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorField>())).IdentifiedCardNo as *const _
                as usize
        },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorField),
            "::",
            stringify!(IdentifiedCardNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorField>())).IsActive as *const _ as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorField),
            "::",
            stringify!(IsActive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorField>())).Telephone as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorField),
            "::",
            stringify!(Telephone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcInvestorField>())).Address as *const _ as usize },
        217usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorField),
            "::",
            stringify!(Address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorField>())).OpenDate as *const _ as usize
        },
        318usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorField),
            "::",
            stringify!(OpenDate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcInvestorField>())).Mobile as *const _ as usize },
        327usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorField),
            "::",
            stringify!(Mobile)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorField>())).CommModelID as *const _ as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorField),
            "::",
            stringify!(CommModelID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorField>())).MarginModelID as *const _ as usize
        },
        381usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorField),
            "::",
            stringify!(MarginModelID)
        )
    );
}
impl Default for CThostFtdcInvestorField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���ױ���"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcTradingCodeField {
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "�Ƿ��Ծ"]
    pub IsActive: TThostFtdcBoolType,
    #[doc = "���ױ�������"]
    pub ClientIDType: TThostFtdcClientIDTypeType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "ҵ������"]
    pub BizType: TThostFtdcBizTypeType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcTradingCodeField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcTradingCodeField>(),
        76usize,
        concat!("Size of: ", stringify!(CThostFtdcTradingCodeField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcTradingCodeField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcTradingCodeField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingCodeField>())).InvestorID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingCodeField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingCodeField>())).BrokerID as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingCodeField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingCodeField>())).ExchangeID as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingCodeField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingCodeField>())).ClientID as *const _ as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingCodeField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingCodeField>())).IsActive as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingCodeField),
            "::",
            stringify!(IsActive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingCodeField>())).ClientIDType as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingCodeField),
            "::",
            stringify!(ClientIDType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingCodeField>())).BranchID as *const _ as usize
        },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingCodeField),
            "::",
            stringify!(BranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingCodeField>())).BizType as *const _ as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingCodeField),
            "::",
            stringify!(BizType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingCodeField>())).InvestUnitID as *const _ as usize
        },
        59usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingCodeField),
            "::",
            stringify!(InvestUnitID)
        )
    );
}
#[doc = "��Ա����;��\u{379}�˾������ձ�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcPartBrokerField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�Ƿ��Ծ"]
    pub IsActive: TThostFtdcBoolType,
}
#[test]
fn bindgen_test_layout_CThostFtdcPartBrokerField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcPartBrokerField>(),
        36usize,
        concat!("Size of: ", stringify!(CThostFtdcPartBrokerField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcPartBrokerField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcPartBrokerField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcPartBrokerField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcPartBrokerField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcPartBrokerField>())).ExchangeID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcPartBrokerField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcPartBrokerField>())).ParticipantID as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcPartBrokerField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcPartBrokerField>())).IsActive as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcPartBrokerField),
            "::",
            stringify!(IsActive)
        )
    );
}
#[doc = "�����û�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSuperUserField {
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�û�����"]
    pub UserName: TThostFtdcUserNameType,
    #[doc = "����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "�Ƿ��Ծ"]
    pub IsActive: TThostFtdcBoolType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSuperUserField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSuperUserField>(),
        144usize,
        concat!("Size of: ", stringify!(CThostFtdcSuperUserField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSuperUserField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcSuperUserField))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcSuperUserField>())).UserID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSuperUserField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSuperUserField>())).UserName as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSuperUserField),
            "::",
            stringify!(UserName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSuperUserField>())).Password as *const _ as usize
        },
        97usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSuperUserField),
            "::",
            stringify!(Password)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSuperUserField>())).IsActive as *const _ as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSuperUserField),
            "::",
            stringify!(IsActive)
        )
    );
}
impl Default for CThostFtdcSuperUserField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�����û�����Ȩ��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcSuperUserFunctionField {
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "���\u{734}���"]
    pub FunctionCode: TThostFtdcFunctionCodeType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSuperUserFunctionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSuperUserFunctionField>(),
        17usize,
        concat!("Size of: ", stringify!(CThostFtdcSuperUserFunctionField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSuperUserFunctionField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcSuperUserFunctionField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSuperUserFunctionField>())).UserID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSuperUserFunctionField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSuperUserFunctionField>())).FunctionCode as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSuperUserFunctionField),
            "::",
            stringify!(FunctionCode)
        )
    );
}
#[doc = "Ͷ������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInvestorGroupField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���߷������"]
    pub InvestorGroupID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ���߷�������"]
    pub InvestorGroupName: TThostFtdcInvestorGroupNameType,
}
#[test]
fn bindgen_test_layout_CThostFtdcInvestorGroupField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcInvestorGroupField>(),
        65usize,
        concat!("Size of: ", stringify!(CThostFtdcInvestorGroupField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcInvestorGroupField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcInvestorGroupField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorGroupField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorGroupField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorGroupField>())).InvestorGroupID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorGroupField),
            "::",
            stringify!(InvestorGroupID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorGroupField>())).InvestorGroupName as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorGroupField),
            "::",
            stringify!(InvestorGroupName)
        )
    );
}
impl Default for CThostFtdcInvestorGroupField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�ʽ��˻�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcTradingAccountField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ϴ���Ѻ���"]
    pub PreMortgage: TThostFtdcMoneyType,
    #[doc = "�ϴ����ö��"]
    pub PreCredit: TThostFtdcMoneyType,
    #[doc = "�ϴδ���"]
    pub PreDeposit: TThostFtdcMoneyType,
    #[doc = "�ϴν���\u{5fc}����"]
    pub PreBalance: TThostFtdcMoneyType,
    #[doc = "�ϴ�ռ�õı�\u{5a4}��"]
    pub PreMargin: TThostFtdcMoneyType,
    #[doc = "��Ϣ����"]
    pub InterestBase: TThostFtdcMoneyType,
    #[doc = "��Ϣ����"]
    pub Interest: TThostFtdcMoneyType,
    #[doc = "�����"]
    pub Deposit: TThostFtdcMoneyType,
    #[doc = "������"]
    pub Withdraw: TThostFtdcMoneyType,
    #[doc = "����ı�\u{5a4}��"]
    pub FrozenMargin: TThostFtdcMoneyType,
    #[doc = "������ʽ�"]
    pub FrozenCash: TThostFtdcMoneyType,
    #[doc = "�����������"]
    pub FrozenCommission: TThostFtdcMoneyType,
    #[doc = "��ǰ��\u{5a4}���\u{736}�"]
    pub CurrMargin: TThostFtdcMoneyType,
    #[doc = "�ʽ���"]
    pub CashIn: TThostFtdcMoneyType,
    #[doc = "������"]
    pub Commission: TThostFtdcMoneyType,
    #[doc = "ƽ��ӯ��"]
    pub CloseProfit: TThostFtdcMoneyType,
    #[doc = "�\u{5b2}�ӯ��"]
    pub PositionProfit: TThostFtdcMoneyType,
    #[doc = "�ڻ�����\u{5fc}����"]
    pub Balance: TThostFtdcMoneyType,
    #[doc = "�����ʽ�"]
    pub Available: TThostFtdcMoneyType,
    #[doc = "��ȡ�ʽ�"]
    pub WithdrawQuota: TThostFtdcMoneyType,
    #[doc = "����\u{5fc}����"]
    pub Reserve: TThostFtdcMoneyType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "���ö��"]
    pub Credit: TThostFtdcMoneyType,
    #[doc = "��Ѻ���"]
    pub Mortgage: TThostFtdcMoneyType,
    #[doc = "��������\u{5a4}��"]
    pub ExchangeMargin: TThostFtdcMoneyType,
    #[doc = "Ͷ���\u{7fd}��\u{ec63}\u{5a4}��"]
    pub DeliveryMargin: TThostFtdcMoneyType,
    #[doc = "���������\u{ec63}\u{5a4}��"]
    pub ExchangeDeliveryMargin: TThostFtdcMoneyType,
    #[doc = "�����ڻ�����\u{5fc}����"]
    pub ReserveBalance: TThostFtdcMoneyType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "�ϴλ���������"]
    pub PreFundMortgageIn: TThostFtdcMoneyType,
    #[doc = "�ϴλ����ʳ����"]
    pub PreFundMortgageOut: TThostFtdcMoneyType,
    #[doc = "����������"]
    pub FundMortgageIn: TThostFtdcMoneyType,
    #[doc = "�����ʳ����"]
    pub FundMortgageOut: TThostFtdcMoneyType,
    #[doc = "������Ѻ���"]
    pub FundMortgageAvailable: TThostFtdcMoneyType,
    #[doc = "����Ѻ���ҽ��"]
    pub MortgageableFund: TThostFtdcMoneyType,
    #[doc = "�����Ʒռ�ñ�\u{5a4}��"]
    pub SpecProductMargin: TThostFtdcMoneyType,
    #[doc = "�����Ʒ���ᱣ\u{5a4}��"]
    pub SpecProductFrozenMargin: TThostFtdcMoneyType,
    #[doc = "�����Ʒ������"]
    pub SpecProductCommission: TThostFtdcMoneyType,
    #[doc = "�����Ʒ����������"]
    pub SpecProductFrozenCommission: TThostFtdcMoneyType,
    #[doc = "�����Ʒ�\u{5b2}�ӯ��"]
    pub SpecProductPositionProfit: TThostFtdcMoneyType,
    #[doc = "�����Ʒƽ��ӯ��"]
    pub SpecProductCloseProfit: TThostFtdcMoneyType,
    #[doc = "���ݳ\u{5b2}�ӯ���㷨����������Ʒ�\u{5b2}�ӯ��"]
    pub SpecProductPositionProfitByAlg: TThostFtdcMoneyType,
    #[doc = "�����Ʒ��������\u{5a4}��"]
    pub SpecProductExchangeMargin: TThostFtdcMoneyType,
    #[doc = "ҵ������"]
    pub BizType: TThostFtdcBizTypeType,
    #[doc = "��ʱ���㶳����"]
    pub FrozenSwap: TThostFtdcMoneyType,
    #[doc = "ʣ�\u{efb}����"]
    pub RemainSwap: TThostFtdcMoneyType,
}
#[test]
fn bindgen_test_layout_CThostFtdcTradingAccountField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcTradingAccountField>(),
        400usize,
        concat!("Size of: ", stringify!(CThostFtdcTradingAccountField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcTradingAccountField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcTradingAccountField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).AccountID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).PreMortgage as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(PreMortgage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).PreCredit as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(PreCredit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).PreDeposit as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(PreDeposit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).PreBalance as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(PreBalance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).PreMargin as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(PreMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).InterestBase as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(InterestBase)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).Interest as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(Interest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).Deposit as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(Deposit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).Withdraw as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(Withdraw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).FrozenMargin as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(FrozenMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).FrozenCash as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(FrozenCash)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).FrozenCommission as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(FrozenCommission)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).CurrMargin as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(CurrMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).CashIn as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(CashIn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).Commission as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(Commission)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).CloseProfit as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(CloseProfit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).PositionProfit as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(PositionProfit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).Balance as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(Balance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).Available as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(Available)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).WithdrawQuota as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(WithdrawQuota)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).Reserve as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(Reserve)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).TradingDay as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).SettlementID as *const _
                as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(SettlementID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).Credit as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(Credit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).Mortgage as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(Mortgage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).ExchangeMargin as *const _
                as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(ExchangeMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).DeliveryMargin as *const _
                as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(DeliveryMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).ExchangeDeliveryMargin
                as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(ExchangeDeliveryMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).ReserveBalance as *const _
                as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(ReserveBalance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).CurrencyID as *const _
                as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).PreFundMortgageIn as *const _
                as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(PreFundMortgageIn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).PreFundMortgageOut as *const _
                as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(PreFundMortgageOut)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).FundMortgageIn as *const _
                as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(FundMortgageIn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).FundMortgageOut as *const _
                as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(FundMortgageOut)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).FundMortgageAvailable
                as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(FundMortgageAvailable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).MortgageableFund as *const _
                as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(MortgageableFund)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).SpecProductMargin as *const _
                as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(SpecProductMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).SpecProductFrozenMargin
                as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(SpecProductFrozenMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).SpecProductCommission
                as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(SpecProductCommission)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).SpecProductFrozenCommission
                as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(SpecProductFrozenCommission)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).SpecProductPositionProfit
                as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(SpecProductPositionProfit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).SpecProductCloseProfit
                as *const _ as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(SpecProductCloseProfit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).SpecProductPositionProfitByAlg
                as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(SpecProductPositionProfitByAlg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).SpecProductExchangeMargin
                as *const _ as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(SpecProductExchangeMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).BizType as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(BizType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).FrozenSwap as *const _
                as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(FrozenSwap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountField>())).RemainSwap as *const _
                as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountField),
            "::",
            stringify!(RemainSwap)
        )
    );
}
#[doc = "Ͷ���\u{7f3}\u{5b2}�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInvestorPositionField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "�\u{5b2}\u{5b6}�շ���"]
    pub PosiDirection: TThostFtdcPosiDirectionType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "�\u{5b2}�����"]
    pub PositionDate: TThostFtdcPositionDateType,
    #[doc = "���ճ\u{5b2}�"]
    pub YdPosition: TThostFtdcVolumeType,
    #[doc = "���ճ\u{5b2}�"]
    pub Position: TThostFtdcVolumeType,
    #[doc = "��ͷ����"]
    pub LongFrozen: TThostFtdcVolumeType,
    #[doc = "��ͷ����"]
    pub ShortFrozen: TThostFtdcVolumeType,
    #[doc = "���\u{5b6}�����"]
    pub LongFrozenAmount: TThostFtdcMoneyType,
    #[doc = "���\u{5b6}�����"]
    pub ShortFrozenAmount: TThostFtdcMoneyType,
    #[doc = "������"]
    pub OpenVolume: TThostFtdcVolumeType,
    #[doc = "ƽ����"]
    pub CloseVolume: TThostFtdcVolumeType,
    #[doc = "���\u{5bd}��"]
    pub OpenAmount: TThostFtdcMoneyType,
    #[doc = "ƽ�\u{5bd}��"]
    pub CloseAmount: TThostFtdcMoneyType,
    #[doc = "�\u{5b2}\u{5b3}ɱ�"]
    pub PositionCost: TThostFtdcMoneyType,
    #[doc = "�ϴ�ռ�õı�\u{5a4}��"]
    pub PreMargin: TThostFtdcMoneyType,
    #[doc = "ռ�õı�\u{5a4}��"]
    pub UseMargin: TThostFtdcMoneyType,
    #[doc = "����ı�\u{5a4}��"]
    pub FrozenMargin: TThostFtdcMoneyType,
    #[doc = "������ʽ�"]
    pub FrozenCash: TThostFtdcMoneyType,
    #[doc = "�����������"]
    pub FrozenCommission: TThostFtdcMoneyType,
    #[doc = "�ʽ���"]
    pub CashIn: TThostFtdcMoneyType,
    #[doc = "������"]
    pub Commission: TThostFtdcMoneyType,
    #[doc = "ƽ��ӯ��"]
    pub CloseProfit: TThostFtdcMoneyType,
    #[doc = "�\u{5b2}�ӯ��"]
    pub PositionProfit: TThostFtdcMoneyType,
    #[doc = "�ϴν����"]
    pub PreSettlementPrice: TThostFtdcPriceType,
    #[doc = "���ν����"]
    pub SettlementPrice: TThostFtdcPriceType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "���\u{5b3}ɱ�"]
    pub OpenCost: TThostFtdcMoneyType,
    #[doc = "��������\u{5a4}��"]
    pub ExchangeMargin: TThostFtdcMoneyType,
    #[doc = "��ϳɽ��γɵĳ\u{5b2}�"]
    pub CombPosition: TThostFtdcVolumeType,
    #[doc = "��϶�ͷ����"]
    pub CombLongFrozen: TThostFtdcVolumeType,
    #[doc = "��Ͽ�ͷ����"]
    pub CombShortFrozen: TThostFtdcVolumeType,
    #[doc = "���ն���ƽ��ӯ��"]
    pub CloseProfitByDate: TThostFtdcMoneyType,
    #[doc = "��ʶԳ�ƽ��ӯ��"]
    pub CloseProfitByTrade: TThostFtdcMoneyType,
    #[doc = "���ճ\u{5b2}�"]
    pub TodayPosition: TThostFtdcVolumeType,
    #[doc = "��\u{5a4}����"]
    pub MarginRateByMoney: TThostFtdcRatioType,
    #[doc = "��\u{5a4}����(������)"]
    pub MarginRateByVolume: TThostFtdcRatioType,
    #[doc = "\u{5b4}�ж���"]
    pub StrikeFrozen: TThostFtdcVolumeType,
    #[doc = "\u{5b4}�ж�����"]
    pub StrikeFrozenAmount: TThostFtdcMoneyType,
    #[doc = "����\u{5b4}�ж���"]
    pub AbandonFrozen: TThostFtdcVolumeType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "\u{5b4}�ж�������"]
    pub YdStrikeFrozen: TThostFtdcVolumeType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "�������\u{5b2}\u{5b3}ɱ���\u{5b5}��\u{5bb}�д�����ʹ��"]
    pub PositionCostOffset: TThostFtdcMoneyType,
    #[doc = "tas�\u{5b2}�����"]
    pub TasPosition: TThostFtdcVolumeType,
    #[doc = "tas�\u{5b2}\u{5b3}ɱ�"]
    pub TasPositionCost: TThostFtdcMoneyType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcInvestorPositionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcInvestorPositionField>(),
        472usize,
        concat!("Size of: ", stringify!(CThostFtdcInvestorPositionField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcInvestorPositionField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcInvestorPositionField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).reserve1 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).BrokerID as *const _
                as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).InvestorID as *const _
                as usize
        },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).PosiDirection as *const _
                as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(PosiDirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).HedgeFlag as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).PositionDate as *const _
                as usize
        },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(PositionDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).YdPosition as *const _
                as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(YdPosition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).Position as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(Position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).LongFrozen as *const _
                as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(LongFrozen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).ShortFrozen as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(ShortFrozen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).LongFrozenAmount as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(LongFrozenAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).ShortFrozenAmount
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(ShortFrozenAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).OpenVolume as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(OpenVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).CloseVolume as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(CloseVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).OpenAmount as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(OpenAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).CloseAmount as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(CloseAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).PositionCost as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(PositionCost)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).PreMargin as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(PreMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).UseMargin as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(UseMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).FrozenMargin as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(FrozenMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).FrozenCash as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(FrozenCash)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).FrozenCommission as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(FrozenCommission)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).CashIn as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(CashIn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).Commission as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(Commission)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).CloseProfit as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(CloseProfit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).PositionProfit as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(PositionProfit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).PreSettlementPrice
                as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(PreSettlementPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).SettlementPrice as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(SettlementPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).TradingDay as *const _
                as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).SettlementID as *const _
                as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(SettlementID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).OpenCost as *const _
                as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(OpenCost)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).ExchangeMargin as *const _
                as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(ExchangeMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).CombPosition as *const _
                as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(CombPosition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).CombLongFrozen as *const _
                as usize
        },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(CombLongFrozen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).CombShortFrozen as *const _
                as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(CombShortFrozen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).CloseProfitByDate
                as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(CloseProfitByDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).CloseProfitByTrade
                as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(CloseProfitByTrade)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).TodayPosition as *const _
                as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(TodayPosition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).MarginRateByMoney
                as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(MarginRateByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).MarginRateByVolume
                as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(MarginRateByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).StrikeFrozen as *const _
                as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(StrikeFrozen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).StrikeFrozenAmount
                as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(StrikeFrozenAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).AbandonFrozen as *const _
                as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(AbandonFrozen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).ExchangeID as *const _
                as usize
        },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).YdStrikeFrozen as *const _
                as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(YdStrikeFrozen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).InvestUnitID as *const _
                as usize
        },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).PositionCostOffset
                as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(PositionCostOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).TasPosition as *const _
                as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(TasPosition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).TasPositionCost as *const _
                as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(TasPositionCost)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionField>())).InstrumentID as *const _
                as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcInvestorPositionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��Լ��\u{5a4}����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInstrumentMarginRateField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��ͷ��\u{5a4}���"]
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��ͷ��\u{5a4}���"]
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "�Ƿ���Խ�������ȡ"]
    pub IsRelative: TThostFtdcBoolType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcInstrumentMarginRateField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcInstrumentMarginRateField>(),
        208usize,
        concat!("Size of: ", stringify!(CThostFtdcInstrumentMarginRateField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcInstrumentMarginRateField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcInstrumentMarginRateField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentMarginRateField>())).reserve1 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentMarginRateField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentMarginRateField>())).InvestorRange
                as *const _ as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentMarginRateField),
            "::",
            stringify!(InvestorRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentMarginRateField>())).BrokerID as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentMarginRateField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentMarginRateField>())).InvestorID as *const _
                as usize
        },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentMarginRateField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentMarginRateField>())).HedgeFlag as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentMarginRateField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentMarginRateField>())).LongMarginRatioByMoney
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentMarginRateField),
            "::",
            stringify!(LongMarginRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentMarginRateField>())).LongMarginRatioByVolume
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentMarginRateField),
            "::",
            stringify!(LongMarginRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentMarginRateField>())).ShortMarginRatioByMoney
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentMarginRateField),
            "::",
            stringify!(ShortMarginRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentMarginRateField>())).ShortMarginRatioByVolume
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentMarginRateField),
            "::",
            stringify!(ShortMarginRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentMarginRateField>())).IsRelative as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentMarginRateField),
            "::",
            stringify!(IsRelative)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentMarginRateField>())).ExchangeID as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentMarginRateField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentMarginRateField>())).InvestUnitID as *const _
                as usize
        },
        109usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentMarginRateField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentMarginRateField>())).InstrumentID as *const _
                as usize
        },
        126usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentMarginRateField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcInstrumentMarginRateField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��Լ��������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInstrumentCommissionRateField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "������������"]
    pub OpenRatioByMoney: TThostFtdcRatioType,
    #[doc = "����������"]
    pub OpenRatioByVolume: TThostFtdcRatioType,
    #[doc = "ƽ����������"]
    pub CloseRatioByMoney: TThostFtdcRatioType,
    #[doc = "ƽ��������"]
    pub CloseRatioByVolume: TThostFtdcRatioType,
    #[doc = "ƽ����������"]
    pub CloseTodayRatioByMoney: TThostFtdcRatioType,
    #[doc = "ƽ��������"]
    pub CloseTodayRatioByVolume: TThostFtdcRatioType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "ҵ������"]
    pub BizType: TThostFtdcBizTypeType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcInstrumentCommissionRateField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcInstrumentCommissionRateField>(),
        216usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcInstrumentCommissionRateField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcInstrumentCommissionRateField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcInstrumentCommissionRateField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentCommissionRateField>())).reserve1 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentCommissionRateField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentCommissionRateField>())).InvestorRange
                as *const _ as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentCommissionRateField),
            "::",
            stringify!(InvestorRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentCommissionRateField>())).BrokerID as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentCommissionRateField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentCommissionRateField>())).InvestorID
                as *const _ as usize
        },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentCommissionRateField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentCommissionRateField>())).OpenRatioByMoney
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentCommissionRateField),
            "::",
            stringify!(OpenRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentCommissionRateField>())).OpenRatioByVolume
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentCommissionRateField),
            "::",
            stringify!(OpenRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentCommissionRateField>())).CloseRatioByMoney
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentCommissionRateField),
            "::",
            stringify!(CloseRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentCommissionRateField>())).CloseRatioByVolume
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentCommissionRateField),
            "::",
            stringify!(CloseRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentCommissionRateField>()))
                .CloseTodayRatioByMoney as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentCommissionRateField),
            "::",
            stringify!(CloseTodayRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentCommissionRateField>()))
                .CloseTodayRatioByVolume as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentCommissionRateField),
            "::",
            stringify!(CloseTodayRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentCommissionRateField>())).ExchangeID
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentCommissionRateField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentCommissionRateField>())).BizType as *const _
                as usize
        },
        113usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentCommissionRateField),
            "::",
            stringify!(BizType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentCommissionRateField>())).InvestUnitID
                as *const _ as usize
        },
        114usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentCommissionRateField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentCommissionRateField>())).InstrumentID
                as *const _ as usize
        },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentCommissionRateField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcInstrumentCommissionRateField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcDepthMarketDataField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "���¼�"]
    pub LastPrice: TThostFtdcPriceType,
    #[doc = "�ϴν����"]
    pub PreSettlementPrice: TThostFtdcPriceType,
    #[doc = "������"]
    pub PreClosePrice: TThostFtdcPriceType,
    #[doc = "��\u{5b2}���"]
    pub PreOpenInterest: TThostFtdcLargeVolumeType,
    #[doc = "����"]
    pub OpenPrice: TThostFtdcPriceType,
    #[doc = "��\u{7fc}�"]
    pub HighestPrice: TThostFtdcPriceType,
    #[doc = "��ͼ�"]
    pub LowestPrice: TThostFtdcPriceType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "�ɽ����"]
    pub Turnover: TThostFtdcMoneyType,
    #[doc = "�\u{5b2}���"]
    pub OpenInterest: TThostFtdcLargeVolumeType,
    #[doc = "������"]
    pub ClosePrice: TThostFtdcPriceType,
    #[doc = "���ν����"]
    pub SettlementPrice: TThostFtdcPriceType,
    #[doc = "��\u{363}���"]
    pub UpperLimitPrice: TThostFtdcPriceType,
    #[doc = "��\u{363}���"]
    pub LowerLimitPrice: TThostFtdcPriceType,
    #[doc = "����ʵ��"]
    pub PreDelta: TThostFtdcRatioType,
    #[doc = "����ʵ��"]
    pub CurrDelta: TThostFtdcRatioType,
    #[doc = "����\u{7b8}�ʱ��"]
    pub UpdateTime: TThostFtdcTimeType,
    #[doc = "����\u{7b8}ĺ���"]
    pub UpdateMillisec: TThostFtdcMillisecType,
    #[doc = "�����һ"]
    pub BidPrice1: TThostFtdcPriceType,
    #[doc = "������һ"]
    pub BidVolume1: TThostFtdcVolumeType,
    #[doc = "������һ"]
    pub AskPrice1: TThostFtdcPriceType,
    #[doc = "������һ"]
    pub AskVolume1: TThostFtdcVolumeType,
    #[doc = "����۶�"]
    pub BidPrice2: TThostFtdcPriceType,
    #[doc = "��������"]
    pub BidVolume2: TThostFtdcVolumeType,
    #[doc = "�����۶�"]
    pub AskPrice2: TThostFtdcPriceType,
    #[doc = "��������"]
    pub AskVolume2: TThostFtdcVolumeType,
    #[doc = "�������"]
    pub BidPrice3: TThostFtdcPriceType,
    #[doc = "��������"]
    pub BidVolume3: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub AskPrice3: TThostFtdcPriceType,
    #[doc = "��������"]
    pub AskVolume3: TThostFtdcVolumeType,
    #[doc = "�������"]
    pub BidPrice4: TThostFtdcPriceType,
    #[doc = "��������"]
    pub BidVolume4: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub AskPrice4: TThostFtdcPriceType,
    #[doc = "��������"]
    pub AskVolume4: TThostFtdcVolumeType,
    #[doc = "�������"]
    pub BidPrice5: TThostFtdcPriceType,
    #[doc = "��������"]
    pub BidVolume5: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub AskPrice5: TThostFtdcPriceType,
    #[doc = "��������"]
    pub AskVolume5: TThostFtdcVolumeType,
    #[doc = "���վ���"]
    pub AveragePrice: TThostFtdcPriceType,
    #[doc = "ҵ������"]
    pub ActionDay: TThostFtdcDateType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "�ϴ���"]
    pub BandingUpperPrice: TThostFtdcPriceType,
    #[doc = "�´���"]
    pub BandingLowerPrice: TThostFtdcPriceType,
}
#[test]
fn bindgen_test_layout_CThostFtdcDepthMarketDataField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcDepthMarketDataField>(),
        584usize,
        concat!("Size of: ", stringify!(CThostFtdcDepthMarketDataField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcDepthMarketDataField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcDepthMarketDataField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).TradingDay as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).reserve1 as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).ExchangeID as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).reserve2 as *const _ as usize
        },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).LastPrice as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(LastPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).PreSettlementPrice
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(PreSettlementPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).PreClosePrice as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(PreClosePrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).PreOpenInterest as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(PreOpenInterest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).OpenPrice as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(OpenPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).HighestPrice as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(HighestPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).LowestPrice as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(LowestPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).Volume as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(Volume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).Turnover as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(Turnover)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).OpenInterest as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(OpenInterest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).ClosePrice as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(ClosePrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).SettlementPrice as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(SettlementPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).UpperLimitPrice as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(UpperLimitPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).LowerLimitPrice as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(LowerLimitPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).PreDelta as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(PreDelta)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).CurrDelta as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(CurrDelta)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).UpdateTime as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(UpdateTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).UpdateMillisec as *const _
                as usize
        },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(UpdateMillisec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).BidPrice1 as *const _
                as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(BidPrice1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).BidVolume1 as *const _
                as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(BidVolume1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).AskPrice1 as *const _
                as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(AskPrice1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).AskVolume1 as *const _
                as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(AskVolume1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).BidPrice2 as *const _
                as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(BidPrice2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).BidVolume2 as *const _
                as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(BidVolume2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).AskPrice2 as *const _
                as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(AskPrice2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).AskVolume2 as *const _
                as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(AskVolume2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).BidPrice3 as *const _
                as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(BidPrice3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).BidVolume3 as *const _
                as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(BidVolume3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).AskPrice3 as *const _
                as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(AskPrice3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).AskVolume3 as *const _
                as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(AskVolume3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).BidPrice4 as *const _
                as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(BidPrice4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).BidVolume4 as *const _
                as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(BidVolume4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).AskPrice4 as *const _
                as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(AskPrice4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).AskVolume4 as *const _
                as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(AskVolume4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).BidPrice5 as *const _
                as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(BidPrice5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).BidVolume5 as *const _
                as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(BidVolume5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).AskPrice5 as *const _
                as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(AskPrice5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).AskVolume5 as *const _
                as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(AskVolume5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).AveragePrice as *const _
                as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(AveragePrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).ActionDay as *const _
                as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(ActionDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).InstrumentID as *const _
                as usize
        },
        401usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).ExchangeInstID as *const _
                as usize
        },
        482usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(ExchangeInstID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).BandingUpperPrice as *const _
                as usize
        },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(BandingUpperPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepthMarketDataField>())).BandingLowerPrice as *const _
                as usize
        },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepthMarketDataField),
            "::",
            stringify!(BandingLowerPrice)
        )
    );
}
impl Default for CThostFtdcDepthMarketDataField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "Ͷ���ߺ�Լ����Ȩ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInstrumentTradingRightField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "����Ȩ��"]
    pub TradingRight: TThostFtdcTradingRightType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcInstrumentTradingRightField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcInstrumentTradingRightField>(),
        138usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcInstrumentTradingRightField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcInstrumentTradingRightField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcInstrumentTradingRightField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentTradingRightField>())).reserve1 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentTradingRightField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentTradingRightField>())).InvestorRange
                as *const _ as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentTradingRightField),
            "::",
            stringify!(InvestorRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentTradingRightField>())).BrokerID as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentTradingRightField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentTradingRightField>())).InvestorID as *const _
                as usize
        },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentTradingRightField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentTradingRightField>())).TradingRight
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentTradingRightField),
            "::",
            stringify!(TradingRight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentTradingRightField>())).InstrumentID
                as *const _ as usize
        },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentTradingRightField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcInstrumentTradingRightField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���\u{379}�˾�û�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBrokerUserField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�û�����"]
    pub UserName: TThostFtdcUserNameType,
    #[doc = "�û�����"]
    pub UserType: TThostFtdcUserTypeType,
    #[doc = "�Ƿ��Ծ"]
    pub IsActive: TThostFtdcBoolType,
    #[doc = "�Ƿ�ʹ������"]
    pub IsUsingOTP: TThostFtdcBoolType,
    #[doc = "�Ƿ�ǿ���ն���\u{5a4}"]
    pub IsAuthForce: TThostFtdcBoolType,
}
#[test]
fn bindgen_test_layout_CThostFtdcBrokerUserField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcBrokerUserField>(),
        124usize,
        concat!("Size of: ", stringify!(CThostFtdcBrokerUserField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcBrokerUserField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcBrokerUserField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserField>())).UserID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserField>())).UserName as *const _ as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserField),
            "::",
            stringify!(UserName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserField>())).UserType as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserField),
            "::",
            stringify!(UserType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserField>())).IsActive as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserField),
            "::",
            stringify!(IsActive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserField>())).IsUsingOTP as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserField),
            "::",
            stringify!(IsUsingOTP)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserField>())).IsAuthForce as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserField),
            "::",
            stringify!(IsAuthForce)
        )
    );
}
impl Default for CThostFtdcBrokerUserField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���\u{379}�˾�û�����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBrokerUserPasswordField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "�ϴ��\u{7b8}�ʱ��"]
    pub LastUpdateTime: TThostFtdcDateTimeType,
    #[doc = "�ϴε�½ʱ��"]
    pub LastLoginTime: TThostFtdcDateTimeType,
    #[doc = "�������ʱ��"]
    pub ExpireDate: TThostFtdcDateType,
    #[doc = "���������ʱ��"]
    pub WeakExpireDate: TThostFtdcDateType,
}
#[test]
fn bindgen_test_layout_CThostFtdcBrokerUserPasswordField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcBrokerUserPasswordField>(),
        120usize,
        concat!("Size of: ", stringify!(CThostFtdcBrokerUserPasswordField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcBrokerUserPasswordField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcBrokerUserPasswordField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserPasswordField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserPasswordField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserPasswordField>())).UserID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserPasswordField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserPasswordField>())).Password as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserPasswordField),
            "::",
            stringify!(Password)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserPasswordField>())).LastUpdateTime as *const _
                as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserPasswordField),
            "::",
            stringify!(LastUpdateTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserPasswordField>())).LastLoginTime as *const _
                as usize
        },
        85usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserPasswordField),
            "::",
            stringify!(LastLoginTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserPasswordField>())).ExpireDate as *const _
                as usize
        },
        102usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserPasswordField),
            "::",
            stringify!(ExpireDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserPasswordField>())).WeakExpireDate as *const _
                as usize
        },
        111usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserPasswordField),
            "::",
            stringify!(WeakExpireDate)
        )
    );
}
impl Default for CThostFtdcBrokerUserPasswordField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���\u{379}�˾�û�����Ȩ��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcBrokerUserFunctionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "���\u{379}�˾���\u{734}���"]
    pub BrokerFunctionCode: TThostFtdcBrokerFunctionCodeType,
}
#[test]
fn bindgen_test_layout_CThostFtdcBrokerUserFunctionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcBrokerUserFunctionField>(),
        28usize,
        concat!("Size of: ", stringify!(CThostFtdcBrokerUserFunctionField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcBrokerUserFunctionField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcBrokerUserFunctionField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserFunctionField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserFunctionField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserFunctionField>())).UserID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserFunctionField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserFunctionField>())).BrokerFunctionCode
                as *const _ as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserFunctionField),
            "::",
            stringify!(BrokerFunctionCode)
        )
    );
}
#[doc = "����������Ա���\u{33b}�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTraderOfferField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "���ر������"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "����������Ա����״\u{32c}"]
    pub TraderConnectStatus: TThostFtdcTraderConnectStatusType,
    #[doc = "�����������������"]
    pub ConnectRequestDate: TThostFtdcDateType,
    #[doc = "�������������ʱ��"]
    pub ConnectRequestTime: TThostFtdcTimeType,
    #[doc = "�ϴα�������"]
    pub LastReportDate: TThostFtdcDateType,
    #[doc = "�ϴα���ʱ��"]
    pub LastReportTime: TThostFtdcTimeType,
    #[doc = "�����������"]
    pub ConnectDate: TThostFtdcDateType,
    #[doc = "�������ʱ��"]
    pub ConnectTime: TThostFtdcTimeType,
    #[doc = "��������"]
    pub StartDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub StartTime: TThostFtdcTimeType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��ϯλ���ɽ����"]
    pub MaxTradeID: TThostFtdcTradeIDType,
    #[doc = "��ϯλ��\u{f1a35}�����"]
    pub MaxOrderMessageReference: TThostFtdcReturnCodeType,
}
#[test]
fn bindgen_test_layout_CThostFtdcTraderOfferField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcTraderOfferField>(),
        224usize,
        concat!("Size of: ", stringify!(CThostFtdcTraderOfferField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcTraderOfferField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcTraderOfferField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTraderOfferField>())).ExchangeID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTraderOfferField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTraderOfferField>())).TraderID as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTraderOfferField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTraderOfferField>())).ParticipantID as *const _
                as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTraderOfferField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTraderOfferField>())).Password as *const _ as usize
        },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTraderOfferField),
            "::",
            stringify!(Password)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTraderOfferField>())).InstallID as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTraderOfferField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTraderOfferField>())).OrderLocalID as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTraderOfferField),
            "::",
            stringify!(OrderLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTraderOfferField>())).TraderConnectStatus as *const _
                as usize
        },
        101usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTraderOfferField),
            "::",
            stringify!(TraderConnectStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTraderOfferField>())).ConnectRequestDate as *const _
                as usize
        },
        102usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTraderOfferField),
            "::",
            stringify!(ConnectRequestDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTraderOfferField>())).ConnectRequestTime as *const _
                as usize
        },
        111usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTraderOfferField),
            "::",
            stringify!(ConnectRequestTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTraderOfferField>())).LastReportDate as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTraderOfferField),
            "::",
            stringify!(LastReportDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTraderOfferField>())).LastReportTime as *const _
                as usize
        },
        129usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTraderOfferField),
            "::",
            stringify!(LastReportTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTraderOfferField>())).ConnectDate as *const _ as usize
        },
        138usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTraderOfferField),
            "::",
            stringify!(ConnectDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTraderOfferField>())).ConnectTime as *const _ as usize
        },
        147usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTraderOfferField),
            "::",
            stringify!(ConnectTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTraderOfferField>())).StartDate as *const _ as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTraderOfferField),
            "::",
            stringify!(StartDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTraderOfferField>())).StartTime as *const _ as usize
        },
        165usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTraderOfferField),
            "::",
            stringify!(StartTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTraderOfferField>())).TradingDay as *const _ as usize
        },
        174usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTraderOfferField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTraderOfferField>())).BrokerID as *const _ as usize
        },
        183usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTraderOfferField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTraderOfferField>())).MaxTradeID as *const _ as usize
        },
        194usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTraderOfferField),
            "::",
            stringify!(MaxTradeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTraderOfferField>())).MaxOrderMessageReference
                as *const _ as usize
        },
        215usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTraderOfferField),
            "::",
            stringify!(MaxOrderMessageReference)
        )
    );
}
impl Default for CThostFtdcTraderOfferField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "Ͷ���\u{7fd}�����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSettlementInfoField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "���"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "��Ϣ����"]
    pub Content: TThostFtdcContentType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSettlementInfoField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSettlementInfoField>(),
        564usize,
        concat!("Size of: ", stringify!(CThostFtdcSettlementInfoField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSettlementInfoField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcSettlementInfoField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSettlementInfoField>())).TradingDay as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSettlementInfoField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSettlementInfoField>())).SettlementID as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSettlementInfoField),
            "::",
            stringify!(SettlementID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSettlementInfoField>())).BrokerID as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSettlementInfoField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSettlementInfoField>())).InvestorID as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSettlementInfoField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSettlementInfoField>())).SequenceNo as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSettlementInfoField),
            "::",
            stringify!(SequenceNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSettlementInfoField>())).Content as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSettlementInfoField),
            "::",
            stringify!(Content)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSettlementInfoField>())).AccountID as *const _ as usize
        },
        545usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSettlementInfoField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSettlementInfoField>())).CurrencyID as *const _
                as usize
        },
        558usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSettlementInfoField),
            "::",
            stringify!(CurrencyID)
        )
    );
}
impl Default for CThostFtdcSettlementInfoField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��Լ��\u{5a4}���ʵ���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInstrumentMarginRateAdjustField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��ͷ��\u{5a4}���"]
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��ͷ��\u{5a4}���"]
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "�Ƿ���Խ�������ȡ"]
    pub IsRelative: TThostFtdcBoolType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcInstrumentMarginRateAdjustField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcInstrumentMarginRateAdjustField>(),
        184usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcInstrumentMarginRateAdjustField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcInstrumentMarginRateAdjustField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcInstrumentMarginRateAdjustField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentMarginRateAdjustField>())).reserve1
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentMarginRateAdjustField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentMarginRateAdjustField>())).InvestorRange
                as *const _ as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentMarginRateAdjustField),
            "::",
            stringify!(InvestorRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentMarginRateAdjustField>())).BrokerID
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentMarginRateAdjustField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentMarginRateAdjustField>())).InvestorID
                as *const _ as usize
        },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentMarginRateAdjustField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentMarginRateAdjustField>())).HedgeFlag
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentMarginRateAdjustField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentMarginRateAdjustField>()))
                .LongMarginRatioByMoney as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentMarginRateAdjustField),
            "::",
            stringify!(LongMarginRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentMarginRateAdjustField>()))
                .LongMarginRatioByVolume as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentMarginRateAdjustField),
            "::",
            stringify!(LongMarginRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentMarginRateAdjustField>()))
                .ShortMarginRatioByMoney as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentMarginRateAdjustField),
            "::",
            stringify!(ShortMarginRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentMarginRateAdjustField>()))
                .ShortMarginRatioByVolume as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentMarginRateAdjustField),
            "::",
            stringify!(ShortMarginRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentMarginRateAdjustField>())).IsRelative
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentMarginRateAdjustField),
            "::",
            stringify!(IsRelative)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentMarginRateAdjustField>())).InstrumentID
                as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentMarginRateAdjustField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcInstrumentMarginRateAdjustField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��������\u{5a4}����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeMarginRateField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��ͷ��\u{5a4}���"]
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��ͷ��\u{5a4}���"]
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcExchangeMarginRateField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcExchangeMarginRateField>(),
        176usize,
        concat!("Size of: ", stringify!(CThostFtdcExchangeMarginRateField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcExchangeMarginRateField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcExchangeMarginRateField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeMarginRateField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeMarginRateField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeMarginRateField>())).reserve1 as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeMarginRateField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeMarginRateField>())).HedgeFlag as *const _
                as usize
        },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeMarginRateField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeMarginRateField>())).LongMarginRatioByMoney
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeMarginRateField),
            "::",
            stringify!(LongMarginRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeMarginRateField>())).LongMarginRatioByVolume
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeMarginRateField),
            "::",
            stringify!(LongMarginRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeMarginRateField>())).ShortMarginRatioByMoney
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeMarginRateField),
            "::",
            stringify!(ShortMarginRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeMarginRateField>())).ShortMarginRatioByVolume
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeMarginRateField),
            "::",
            stringify!(ShortMarginRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeMarginRateField>())).ExchangeID as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeMarginRateField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeMarginRateField>())).InstrumentID as *const _
                as usize
        },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeMarginRateField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcExchangeMarginRateField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��������\u{5a4}���ʵ���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeMarginRateAdjustField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "���潻����Ͷ���߶�ͷ��\u{5a4}����"]
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "���潻����Ͷ���߶�ͷ��\u{5a4}���"]
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "���潻����Ͷ���߿�ͷ��\u{5a4}����"]
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "���潻����Ͷ���߿�ͷ��\u{5a4}���"]
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "��������ͷ��\u{5a4}����"]
    pub ExchLongMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��������ͷ��\u{5a4}���"]
    pub ExchLongMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "��������ͷ��\u{5a4}����"]
    pub ExchShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��������ͷ��\u{5a4}���"]
    pub ExchShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "�����潻����Ͷ���߶�ͷ��\u{5a4}����"]
    pub NoLongMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "�����潻����Ͷ���߶�ͷ��\u{5a4}���"]
    pub NoLongMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "�����潻����Ͷ���߿�ͷ��\u{5a4}����"]
    pub NoShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "�����潻����Ͷ���߿�ͷ��\u{5a4}���"]
    pub NoShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcExchangeMarginRateAdjustField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcExchangeMarginRateAdjustField>(),
        232usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcExchangeMarginRateAdjustField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcExchangeMarginRateAdjustField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcExchangeMarginRateAdjustField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeMarginRateAdjustField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeMarginRateAdjustField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeMarginRateAdjustField>())).reserve1 as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeMarginRateAdjustField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeMarginRateAdjustField>())).HedgeFlag
                as *const _ as usize
        },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeMarginRateAdjustField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeMarginRateAdjustField>()))
                .LongMarginRatioByMoney as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeMarginRateAdjustField),
            "::",
            stringify!(LongMarginRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeMarginRateAdjustField>()))
                .LongMarginRatioByVolume as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeMarginRateAdjustField),
            "::",
            stringify!(LongMarginRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeMarginRateAdjustField>()))
                .ShortMarginRatioByMoney as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeMarginRateAdjustField),
            "::",
            stringify!(ShortMarginRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeMarginRateAdjustField>()))
                .ShortMarginRatioByVolume as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeMarginRateAdjustField),
            "::",
            stringify!(ShortMarginRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeMarginRateAdjustField>()))
                .ExchLongMarginRatioByMoney as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeMarginRateAdjustField),
            "::",
            stringify!(ExchLongMarginRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeMarginRateAdjustField>()))
                .ExchLongMarginRatioByVolume as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeMarginRateAdjustField),
            "::",
            stringify!(ExchLongMarginRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeMarginRateAdjustField>()))
                .ExchShortMarginRatioByMoney as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeMarginRateAdjustField),
            "::",
            stringify!(ExchShortMarginRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeMarginRateAdjustField>()))
                .ExchShortMarginRatioByVolume as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeMarginRateAdjustField),
            "::",
            stringify!(ExchShortMarginRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeMarginRateAdjustField>()))
                .NoLongMarginRatioByMoney as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeMarginRateAdjustField),
            "::",
            stringify!(NoLongMarginRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeMarginRateAdjustField>()))
                .NoLongMarginRatioByVolume as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeMarginRateAdjustField),
            "::",
            stringify!(NoLongMarginRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeMarginRateAdjustField>()))
                .NoShortMarginRatioByMoney as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeMarginRateAdjustField),
            "::",
            stringify!(NoShortMarginRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeMarginRateAdjustField>()))
                .NoShortMarginRatioByVolume as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeMarginRateAdjustField),
            "::",
            stringify!(NoShortMarginRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeMarginRateAdjustField>())).InstrumentID
                as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeMarginRateAdjustField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcExchangeMarginRateAdjustField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcExchangeRateField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Դ����"]
    pub FromCurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "Դ���\u{5b5}�λ����"]
    pub FromCurrencyUnit: TThostFtdcCurrencyUnitType,
    #[doc = "Ŀ�����"]
    pub ToCurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "����"]
    pub ExchangeRate: TThostFtdcExchangeRateType,
}
#[test]
fn bindgen_test_layout_CThostFtdcExchangeRateField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcExchangeRateField>(),
        40usize,
        concat!("Size of: ", stringify!(CThostFtdcExchangeRateField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcExchangeRateField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcExchangeRateField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeRateField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeRateField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeRateField>())).FromCurrencyID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeRateField),
            "::",
            stringify!(FromCurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeRateField>())).FromCurrencyUnit as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeRateField),
            "::",
            stringify!(FromCurrencyUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeRateField>())).ToCurrencyID as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeRateField),
            "::",
            stringify!(ToCurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeRateField>())).ExchangeRate as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeRateField),
            "::",
            stringify!(ExchangeRate)
        )
    );
}
#[doc = "��������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcSettlementRefField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSettlementRefField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSettlementRefField>(),
        16usize,
        concat!("Size of: ", stringify!(CThostFtdcSettlementRefField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSettlementRefField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcSettlementRefField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSettlementRefField>())).TradingDay as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSettlementRefField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSettlementRefField>())).SettlementID as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSettlementRefField),
            "::",
            stringify!(SettlementID)
        )
    );
}
#[doc = "��ǰʱ��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcCurrentTimeField {
    #[doc = "��ǰ����"]
    pub CurrDate: TThostFtdcDateType,
    #[doc = "��ǰʱ��"]
    pub CurrTime: TThostFtdcTimeType,
    #[doc = "��ǰʱ�䣨���룩"]
    pub CurrMillisec: TThostFtdcMillisecType,
    #[doc = "ҵ������"]
    pub ActionDay: TThostFtdcDateType,
}
#[test]
fn bindgen_test_layout_CThostFtdcCurrentTimeField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcCurrentTimeField>(),
        36usize,
        concat!("Size of: ", stringify!(CThostFtdcCurrentTimeField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcCurrentTimeField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcCurrentTimeField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCurrentTimeField>())).CurrDate as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCurrentTimeField),
            "::",
            stringify!(CurrDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCurrentTimeField>())).CurrTime as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCurrentTimeField),
            "::",
            stringify!(CurrTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCurrentTimeField>())).CurrMillisec as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCurrentTimeField),
            "::",
            stringify!(CurrMillisec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCurrentTimeField>())).ActionDay as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCurrentTimeField),
            "::",
            stringify!(ActionDay)
        )
    );
}
#[doc = "\u{368}Ѷ�\u{5f6}�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcCommPhaseField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "\u{368}Ѷʱ�α��"]
    pub CommPhaseNo: TThostFtdcCommPhaseNoType,
    #[doc = "ϵͳ���"]
    pub SystemID: TThostFtdcSystemIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcCommPhaseField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcCommPhaseField>(),
        34usize,
        concat!("Size of: ", stringify!(CThostFtdcCommPhaseField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcCommPhaseField>(),
        2usize,
        concat!("Alignment of ", stringify!(CThostFtdcCommPhaseField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCommPhaseField>())).TradingDay as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCommPhaseField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCommPhaseField>())).CommPhaseNo as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCommPhaseField),
            "::",
            stringify!(CommPhaseNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCommPhaseField>())).SystemID as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCommPhaseField),
            "::",
            stringify!(SystemID)
        )
    );
}
#[doc = "��¼��Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcLoginInfoField {
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��¼����"]
    pub LoginDate: TThostFtdcDateType,
    #[doc = "��¼ʱ��"]
    pub LoginTime: TThostFtdcTimeType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "�û��˲�Ʒ��Ϣ"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "�ӿڶ˲�Ʒ��Ϣ"]
    pub InterfaceProductInfo: TThostFtdcProductInfoType,
    #[doc = "Э����Ϣ"]
    pub ProtocolInfo: TThostFtdcProtocolInfoType,
    #[doc = "ϵͳ����"]
    pub SystemName: TThostFtdcSystemNameType,
    #[doc = "����,������"]
    pub PasswordDeprecated: TThostFtdcPasswordType,
    #[doc = "��\u{f1a35}�����"]
    pub MaxOrderRef: TThostFtdcOrderRefType,
    #[doc = "������ʱ��"]
    pub SHFETime: TThostFtdcTimeType,
    #[doc = "������ʱ��"]
    pub DCETime: TThostFtdcTimeType,
    #[doc = "\u{5a3}����ʱ��"]
    pub CZCETime: TThostFtdcTimeType,
    #[doc = "�н���ʱ��"]
    pub FFEXTime: TThostFtdcTimeType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��\u{32c}����"]
    pub OneTimePassword: TThostFtdcPasswordType,
    #[doc = "��Դ����ʱ��"]
    pub INETime: TThostFtdcTimeType,
    #[doc = "��ѯʱ�Ƿ���Ҫ����"]
    pub IsQryControl: TThostFtdcBoolType,
    #[doc = "��¼��ע"]
    pub LoginRemark: TThostFtdcLoginRemarkType,
    #[doc = "����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcLoginInfoField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcLoginInfoField>(),
        420usize,
        concat!("Size of: ", stringify!(CThostFtdcLoginInfoField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcLoginInfoField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcLoginInfoField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLoginInfoField>())).FrontID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLoginInfoField),
            "::",
            stringify!(FrontID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLoginInfoField>())).SessionID as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLoginInfoField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLoginInfoField>())).BrokerID as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLoginInfoField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcLoginInfoField>())).UserID as *const _ as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLoginInfoField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLoginInfoField>())).LoginDate as *const _ as usize
        },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLoginInfoField),
            "::",
            stringify!(LoginDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLoginInfoField>())).LoginTime as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLoginInfoField),
            "::",
            stringify!(LoginTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLoginInfoField>())).reserve1 as *const _ as usize
        },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLoginInfoField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLoginInfoField>())).UserProductInfo as *const _
                as usize
        },
        69usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLoginInfoField),
            "::",
            stringify!(UserProductInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLoginInfoField>())).InterfaceProductInfo as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLoginInfoField),
            "::",
            stringify!(InterfaceProductInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLoginInfoField>())).ProtocolInfo as *const _ as usize
        },
        91usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLoginInfoField),
            "::",
            stringify!(ProtocolInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLoginInfoField>())).SystemName as *const _ as usize
        },
        102usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLoginInfoField),
            "::",
            stringify!(SystemName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLoginInfoField>())).PasswordDeprecated as *const _
                as usize
        },
        143usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLoginInfoField),
            "::",
            stringify!(PasswordDeprecated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLoginInfoField>())).MaxOrderRef as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLoginInfoField),
            "::",
            stringify!(MaxOrderRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLoginInfoField>())).SHFETime as *const _ as usize
        },
        197usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLoginInfoField),
            "::",
            stringify!(SHFETime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLoginInfoField>())).DCETime as *const _ as usize
        },
        206usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLoginInfoField),
            "::",
            stringify!(DCETime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLoginInfoField>())).CZCETime as *const _ as usize
        },
        215usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLoginInfoField),
            "::",
            stringify!(CZCETime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLoginInfoField>())).FFEXTime as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLoginInfoField),
            "::",
            stringify!(FFEXTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLoginInfoField>())).MacAddress as *const _ as usize
        },
        233usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLoginInfoField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLoginInfoField>())).OneTimePassword as *const _
                as usize
        },
        254usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLoginInfoField),
            "::",
            stringify!(OneTimePassword)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLoginInfoField>())).INETime as *const _ as usize
        },
        295usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLoginInfoField),
            "::",
            stringify!(INETime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLoginInfoField>())).IsQryControl as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLoginInfoField),
            "::",
            stringify!(IsQryControl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLoginInfoField>())).LoginRemark as *const _ as usize
        },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLoginInfoField),
            "::",
            stringify!(LoginRemark)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLoginInfoField>())).Password as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLoginInfoField),
            "::",
            stringify!(Password)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLoginInfoField>())).IPAddress as *const _ as usize
        },
        385usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLoginInfoField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcLoginInfoField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��¼��Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcLogoutAllField {
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "ϵͳ����"]
    pub SystemName: TThostFtdcSystemNameType,
}
#[test]
fn bindgen_test_layout_CThostFtdcLogoutAllField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcLogoutAllField>(),
        52usize,
        concat!("Size of: ", stringify!(CThostFtdcLogoutAllField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcLogoutAllField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcLogoutAllField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLogoutAllField>())).FrontID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLogoutAllField),
            "::",
            stringify!(FrontID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLogoutAllField>())).SessionID as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLogoutAllField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLogoutAllField>())).SystemName as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLogoutAllField),
            "::",
            stringify!(SystemName)
        )
    );
}
impl Default for CThostFtdcLogoutAllField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "ǰ��״\u{32c}"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcFrontStatusField {
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�ϴα�������"]
    pub LastReportDate: TThostFtdcDateType,
    #[doc = "�ϴα���ʱ��"]
    pub LastReportTime: TThostFtdcTimeType,
    #[doc = "�Ƿ��Ծ"]
    pub IsActive: TThostFtdcBoolType,
}
#[test]
fn bindgen_test_layout_CThostFtdcFrontStatusField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcFrontStatusField>(),
        28usize,
        concat!("Size of: ", stringify!(CThostFtdcFrontStatusField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcFrontStatusField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcFrontStatusField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFrontStatusField>())).FrontID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFrontStatusField),
            "::",
            stringify!(FrontID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFrontStatusField>())).LastReportDate as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFrontStatusField),
            "::",
            stringify!(LastReportDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFrontStatusField>())).LastReportTime as *const _
                as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFrontStatusField),
            "::",
            stringify!(LastReportTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFrontStatusField>())).IsActive as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFrontStatusField),
            "::",
            stringify!(IsActive)
        )
    );
}
#[doc = "�û�������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcUserPasswordUpdateField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "ԭ���Ŀ���"]
    pub OldPassword: TThostFtdcPasswordType,
    #[doc = "�µĿ���"]
    pub NewPassword: TThostFtdcPasswordType,
}
#[test]
fn bindgen_test_layout_CThostFtdcUserPasswordUpdateField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcUserPasswordUpdateField>(),
        109usize,
        concat!("Size of: ", stringify!(CThostFtdcUserPasswordUpdateField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcUserPasswordUpdateField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcUserPasswordUpdateField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserPasswordUpdateField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserPasswordUpdateField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserPasswordUpdateField>())).UserID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserPasswordUpdateField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserPasswordUpdateField>())).OldPassword as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserPasswordUpdateField),
            "::",
            stringify!(OldPassword)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserPasswordUpdateField>())).NewPassword as *const _
                as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserPasswordUpdateField),
            "::",
            stringify!(NewPassword)
        )
    );
}
impl Default for CThostFtdcUserPasswordUpdateField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���뱨��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInputOrderField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��������"]
    pub OrderRef: TThostFtdcOrderRefType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�����۸�����"]
    pub OrderPriceType: TThostFtdcOrderPriceTypeType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "��Ͽ�ƽ��־"]
    pub CombOffsetFlag: TThostFtdcCombOffsetFlagType,
    #[doc = "���Ͷ���ױ���־"]
    pub CombHedgeFlag: TThostFtdcCombHedgeFlagType,
    #[doc = "�۸�"]
    pub LimitPrice: TThostFtdcPriceType,
    #[doc = "����"]
    pub VolumeTotalOriginal: TThostFtdcVolumeType,
    #[doc = "��Ч������"]
    pub TimeCondition: TThostFtdcTimeConditionType,
    #[doc = "GTD����"]
    pub GTDDate: TThostFtdcDateType,
    #[doc = "�ɽ�������"]
    pub VolumeCondition: TThostFtdcVolumeConditionType,
    #[doc = "��С�ɽ���"]
    pub MinVolume: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub ContingentCondition: TThostFtdcContingentConditionType,
    #[doc = "\u{5b9}���"]
    pub StopPrice: TThostFtdcPriceType,
    #[doc = "ǿƽԭ��"]
    pub ForceCloseReason: TThostFtdcForceCloseReasonType,
    #[doc = "�Զ������־"]
    pub IsAutoSuspend: TThostFtdcBoolType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "�û�ǿ����־"]
    pub UserForceClose: TThostFtdcBoolType,
    #[doc = "��������־"]
    pub IsSwapOrder: TThostFtdcBoolType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "�ʽ��˺�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "���ױ���"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcInputOrderField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcInputOrderField>(),
        392usize,
        concat!("Size of: ", stringify!(CThostFtdcInputOrderField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcInputOrderField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcInputOrderField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderField>())).InvestorID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderField>())).reserve1 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderField>())).OrderRef as *const _ as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderField),
            "::",
            stringify!(OrderRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderField>())).UserID as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderField>())).OrderPriceType as *const _
                as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderField),
            "::",
            stringify!(OrderPriceType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderField>())).Direction as *const _ as usize
        },
        85usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderField),
            "::",
            stringify!(Direction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderField>())).CombOffsetFlag as *const _
                as usize
        },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderField),
            "::",
            stringify!(CombOffsetFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderField>())).CombHedgeFlag as *const _ as usize
        },
        91usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderField),
            "::",
            stringify!(CombHedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderField>())).LimitPrice as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderField),
            "::",
            stringify!(LimitPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderField>())).VolumeTotalOriginal as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderField),
            "::",
            stringify!(VolumeTotalOriginal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderField>())).TimeCondition as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderField),
            "::",
            stringify!(TimeCondition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderField>())).GTDDate as *const _ as usize
        },
        109usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderField),
            "::",
            stringify!(GTDDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderField>())).VolumeCondition as *const _
                as usize
        },
        118usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderField),
            "::",
            stringify!(VolumeCondition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderField>())).MinVolume as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderField),
            "::",
            stringify!(MinVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderField>())).ContingentCondition as *const _
                as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderField),
            "::",
            stringify!(ContingentCondition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderField>())).StopPrice as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderField),
            "::",
            stringify!(StopPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderField>())).ForceCloseReason as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderField),
            "::",
            stringify!(ForceCloseReason)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderField>())).IsAutoSuspend as *const _ as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderField),
            "::",
            stringify!(IsAutoSuspend)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderField>())).BusinessUnit as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderField),
            "::",
            stringify!(BusinessUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderField>())).RequestID as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderField>())).UserForceClose as *const _
                as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderField),
            "::",
            stringify!(UserForceClose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderField>())).IsSwapOrder as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderField),
            "::",
            stringify!(IsSwapOrder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderField>())).ExchangeID as *const _ as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderField>())).InvestUnitID as *const _ as usize
        },
        189usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderField>())).AccountID as *const _ as usize
        },
        206usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderField>())).CurrencyID as *const _ as usize
        },
        219usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderField>())).ClientID as *const _ as usize
        },
        223usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderField>())).reserve2 as *const _ as usize
        },
        234usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderField>())).MacAddress as *const _ as usize
        },
        250usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderField>())).InstrumentID as *const _ as usize
        },
        271usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderField>())).IPAddress as *const _ as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcInputOrderField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOrderField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��������"]
    pub OrderRef: TThostFtdcOrderRefType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�����۸�����"]
    pub OrderPriceType: TThostFtdcOrderPriceTypeType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "��Ͽ�ƽ��־"]
    pub CombOffsetFlag: TThostFtdcCombOffsetFlagType,
    #[doc = "���Ͷ���ױ���־"]
    pub CombHedgeFlag: TThostFtdcCombHedgeFlagType,
    #[doc = "�۸�"]
    pub LimitPrice: TThostFtdcPriceType,
    #[doc = "����"]
    pub VolumeTotalOriginal: TThostFtdcVolumeType,
    #[doc = "��Ч������"]
    pub TimeCondition: TThostFtdcTimeConditionType,
    #[doc = "GTD����"]
    pub GTDDate: TThostFtdcDateType,
    #[doc = "�ɽ�������"]
    pub VolumeCondition: TThostFtdcVolumeConditionType,
    #[doc = "��С�ɽ���"]
    pub MinVolume: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub ContingentCondition: TThostFtdcContingentConditionType,
    #[doc = "\u{5b9}���"]
    pub StopPrice: TThostFtdcPriceType,
    #[doc = "ǿƽԭ��"]
    pub ForceCloseReason: TThostFtdcForceCloseReasonType,
    #[doc = "�Զ������־"]
    pub IsAutoSuspend: TThostFtdcBoolType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "���ر������"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�����ύ״\u{32c}"]
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    #[doc = "������ʾ���"]
    pub NotifySequence: TThostFtdcSequenceNoType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "�������"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "������Դ"]
    pub OrderSource: TThostFtdcOrderSourceType,
    #[doc = "����״\u{32c}"]
    pub OrderStatus: TThostFtdcOrderStatusType,
    #[doc = "��������"]
    pub OrderType: TThostFtdcOrderTypeType,
    #[doc = "��ɽ�����"]
    pub VolumeTraded: TThostFtdcVolumeType,
    #[doc = "ʣ������"]
    pub VolumeTotal: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub InsertDate: TThostFtdcDateType,
    #[doc = "ί��ʱ��"]
    pub InsertTime: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub ActiveTime: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub SuspendTime: TThostFtdcTimeType,
    #[doc = "����\u{7b8}�ʱ��"]
    pub UpdateTime: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub CancelTime: TThostFtdcTimeType,
    #[doc = "����\u{7b8}Ľ���������Ա����"]
    pub ActiveTraderID: TThostFtdcTraderIDType,
    #[doc = "�����Ա���"]
    pub ClearingPartID: TThostFtdcParticipantIDType,
    #[doc = "���"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�û��˲�Ʒ��Ϣ"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "״\u{32c}��Ϣ"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "�û�ǿ����־"]
    pub UserForceClose: TThostFtdcBoolType,
    #[doc = "�����û�����"]
    pub ActiveUserID: TThostFtdcUserIDType,
    #[doc = "���\u{379}�˾�������"]
    pub BrokerOrderSeq: TThostFtdcSequenceNoType,
    #[doc = "��ر���"]
    pub RelativeOrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "\u{5a3}�����ɽ�����"]
    pub ZCETotalTradedVolume: TThostFtdcVolumeType,
    #[doc = "��������־"]
    pub IsSwapOrder: TThostFtdcBoolType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "�ʽ��˺�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve3: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcOrderField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcOrderField>(),
        856usize,
        concat!("Size of: ", stringify!(CThostFtdcOrderField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcOrderField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcOrderField))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOrderField>())).BrokerID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOrderField>())).InvestorID as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOrderField>())).reserve1 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOrderField>())).OrderRef as *const _ as usize },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(OrderRef)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOrderField>())).UserID as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderField>())).OrderPriceType as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(OrderPriceType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOrderField>())).Direction as *const _ as usize },
        85usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(Direction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderField>())).CombOffsetFlag as *const _ as usize
        },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(CombOffsetFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderField>())).CombHedgeFlag as *const _ as usize
        },
        91usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(CombHedgeFlag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOrderField>())).LimitPrice as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(LimitPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderField>())).VolumeTotalOriginal as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(VolumeTotalOriginal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderField>())).TimeCondition as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(TimeCondition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOrderField>())).GTDDate as *const _ as usize },
        109usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(GTDDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderField>())).VolumeCondition as *const _ as usize
        },
        118usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(VolumeCondition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOrderField>())).MinVolume as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(MinVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderField>())).ContingentCondition as *const _
                as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(ContingentCondition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOrderField>())).StopPrice as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(StopPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderField>())).ForceCloseReason as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(ForceCloseReason)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderField>())).IsAutoSuspend as *const _ as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(IsAutoSuspend)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderField>())).BusinessUnit as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(BusinessUnit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOrderField>())).RequestID as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderField>())).OrderLocalID as *const _ as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(OrderLocalID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOrderField>())).ExchangeID as *const _ as usize },
        185usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderField>())).ParticipantID as *const _ as usize
        },
        194usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOrderField>())).ClientID as *const _ as usize },
        205usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOrderField>())).reserve2 as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOrderField>())).TraderID as *const _ as usize },
        247usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOrderField>())).InstallID as *const _ as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderField>())).OrderSubmitStatus as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(OrderSubmitStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderField>())).NotifySequence as *const _ as usize
        },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(NotifySequence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOrderField>())).TradingDay as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderField>())).SettlementID as *const _ as usize
        },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(SettlementID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOrderField>())).OrderSysID as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(OrderSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderField>())).OrderSource as *const _ as usize
        },
        317usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(OrderSource)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderField>())).OrderStatus as *const _ as usize
        },
        318usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(OrderStatus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOrderField>())).OrderType as *const _ as usize },
        319usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(OrderType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderField>())).VolumeTraded as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(VolumeTraded)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderField>())).VolumeTotal as *const _ as usize
        },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(VolumeTotal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOrderField>())).InsertDate as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(InsertDate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOrderField>())).InsertTime as *const _ as usize },
        337usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(InsertTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOrderField>())).ActiveTime as *const _ as usize },
        346usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(ActiveTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderField>())).SuspendTime as *const _ as usize
        },
        355usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(SuspendTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOrderField>())).UpdateTime as *const _ as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(UpdateTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOrderField>())).CancelTime as *const _ as usize },
        373usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(CancelTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderField>())).ActiveTraderID as *const _ as usize
        },
        382usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(ActiveTraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderField>())).ClearingPartID as *const _ as usize
        },
        403usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(ClearingPartID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOrderField>())).SequenceNo as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(SequenceNo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOrderField>())).FrontID as *const _ as usize },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(FrontID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOrderField>())).SessionID as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderField>())).UserProductInfo as *const _ as usize
        },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(UserProductInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOrderField>())).StatusMsg as *const _ as usize },
        439usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(StatusMsg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderField>())).UserForceClose as *const _ as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(UserForceClose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderField>())).ActiveUserID as *const _ as usize
        },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(ActiveUserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderField>())).BrokerOrderSeq as *const _ as usize
        },
        540usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(BrokerOrderSeq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderField>())).RelativeOrderSysID as *const _ as usize
        },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(RelativeOrderSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderField>())).ZCETotalTradedVolume as *const _
                as usize
        },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(ZCETotalTradedVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderField>())).IsSwapOrder as *const _ as usize
        },
        572usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(IsSwapOrder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOrderField>())).BranchID as *const _ as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(BranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderField>())).InvestUnitID as *const _ as usize
        },
        585usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOrderField>())).AccountID as *const _ as usize },
        602usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOrderField>())).CurrencyID as *const _ as usize },
        615usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOrderField>())).reserve3 as *const _ as usize },
        619usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(reserve3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOrderField>())).MacAddress as *const _ as usize },
        635usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderField>())).InstrumentID as *const _ as usize
        },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderField>())).ExchangeInstID as *const _ as usize
        },
        737usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(ExchangeInstID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOrderField>())).IPAddress as *const _ as usize },
        818usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcOrderField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "����������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeOrderField {
    #[doc = "�����۸�����"]
    pub OrderPriceType: TThostFtdcOrderPriceTypeType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "��Ͽ�ƽ��־"]
    pub CombOffsetFlag: TThostFtdcCombOffsetFlagType,
    #[doc = "���Ͷ���ױ���־"]
    pub CombHedgeFlag: TThostFtdcCombHedgeFlagType,
    #[doc = "�۸�"]
    pub LimitPrice: TThostFtdcPriceType,
    #[doc = "����"]
    pub VolumeTotalOriginal: TThostFtdcVolumeType,
    #[doc = "��Ч������"]
    pub TimeCondition: TThostFtdcTimeConditionType,
    #[doc = "GTD����"]
    pub GTDDate: TThostFtdcDateType,
    #[doc = "�ɽ�������"]
    pub VolumeCondition: TThostFtdcVolumeConditionType,
    #[doc = "��С�ɽ���"]
    pub MinVolume: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub ContingentCondition: TThostFtdcContingentConditionType,
    #[doc = "\u{5b9}���"]
    pub StopPrice: TThostFtdcPriceType,
    #[doc = "ǿƽԭ��"]
    pub ForceCloseReason: TThostFtdcForceCloseReasonType,
    #[doc = "�Զ������־"]
    pub IsAutoSuspend: TThostFtdcBoolType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "���ر������"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�����ύ״\u{32c}"]
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    #[doc = "������ʾ���"]
    pub NotifySequence: TThostFtdcSequenceNoType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "�������"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "������Դ"]
    pub OrderSource: TThostFtdcOrderSourceType,
    #[doc = "����״\u{32c}"]
    pub OrderStatus: TThostFtdcOrderStatusType,
    #[doc = "��������"]
    pub OrderType: TThostFtdcOrderTypeType,
    #[doc = "��ɽ�����"]
    pub VolumeTraded: TThostFtdcVolumeType,
    #[doc = "ʣ������"]
    pub VolumeTotal: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub InsertDate: TThostFtdcDateType,
    #[doc = "ί��ʱ��"]
    pub InsertTime: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub ActiveTime: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub SuspendTime: TThostFtdcTimeType,
    #[doc = "����\u{7b8}�ʱ��"]
    pub UpdateTime: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub CancelTime: TThostFtdcTimeType,
    #[doc = "����\u{7b8}Ľ���������Ա����"]
    pub ActiveTraderID: TThostFtdcTraderIDType,
    #[doc = "�����Ա���"]
    pub ClearingPartID: TThostFtdcParticipantIDType,
    #[doc = "���"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcExchangeOrderField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcExchangeOrderField>(),
        504usize,
        concat!("Size of: ", stringify!(CThostFtdcExchangeOrderField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcExchangeOrderField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcExchangeOrderField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).OrderPriceType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(OrderPriceType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).Direction as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(Direction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).CombOffsetFlag as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(CombOffsetFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).CombHedgeFlag as *const _
                as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(CombHedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).LimitPrice as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(LimitPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).VolumeTotalOriginal as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(VolumeTotalOriginal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).TimeCondition as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(TimeCondition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).GTDDate as *const _ as usize
        },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(GTDDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).VolumeCondition as *const _
                as usize
        },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(VolumeCondition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).MinVolume as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(MinVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).ContingentCondition as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(ContingentCondition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).StopPrice as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(StopPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).ForceCloseReason as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(ForceCloseReason)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).IsAutoSuspend as *const _
                as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(IsAutoSuspend)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).BusinessUnit as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(BusinessUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).RequestID as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).OrderLocalID as *const _
                as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(OrderLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).ExchangeID as *const _ as usize
        },
        105usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).ParticipantID as *const _
                as usize
        },
        114usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).ClientID as *const _ as usize
        },
        125usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).reserve1 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).TraderID as *const _ as usize
        },
        167usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).InstallID as *const _ as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).OrderSubmitStatus as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(OrderSubmitStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).NotifySequence as *const _
                as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(NotifySequence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).TradingDay as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).SettlementID as *const _
                as usize
        },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(SettlementID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).OrderSysID as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(OrderSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).OrderSource as *const _
                as usize
        },
        237usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(OrderSource)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).OrderStatus as *const _
                as usize
        },
        238usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(OrderStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).OrderType as *const _ as usize
        },
        239usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(OrderType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).VolumeTraded as *const _
                as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(VolumeTraded)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).VolumeTotal as *const _
                as usize
        },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(VolumeTotal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).InsertDate as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(InsertDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).InsertTime as *const _ as usize
        },
        257usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(InsertTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).ActiveTime as *const _ as usize
        },
        266usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(ActiveTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).SuspendTime as *const _
                as usize
        },
        275usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(SuspendTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).UpdateTime as *const _ as usize
        },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(UpdateTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).CancelTime as *const _ as usize
        },
        293usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(CancelTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).ActiveTraderID as *const _
                as usize
        },
        302usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(ActiveTraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).ClearingPartID as *const _
                as usize
        },
        323usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(ClearingPartID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).SequenceNo as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(SequenceNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).BranchID as *const _ as usize
        },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(BranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).reserve2 as *const _ as usize
        },
        349usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).MacAddress as *const _ as usize
        },
        365usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).ExchangeInstID as *const _
                as usize
        },
        386usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(ExchangeInstID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderField>())).IPAddress as *const _ as usize
        },
        467usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcExchangeOrderField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��������������ʧ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeOrderInsertErrorField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "���ر������"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
#[test]
fn bindgen_test_layout_CThostFtdcExchangeOrderInsertErrorField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcExchangeOrderInsertErrorField>(),
        152usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcExchangeOrderInsertErrorField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcExchangeOrderInsertErrorField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcExchangeOrderInsertErrorField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderInsertErrorField>())).ExchangeID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderInsertErrorField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderInsertErrorField>())).ParticipantID
                as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderInsertErrorField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderInsertErrorField>())).TraderID as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderInsertErrorField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderInsertErrorField>())).InstallID
                as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderInsertErrorField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderInsertErrorField>())).OrderLocalID
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderInsertErrorField),
            "::",
            stringify!(OrderLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderInsertErrorField>())).ErrorID as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderInsertErrorField),
            "::",
            stringify!(ErrorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderInsertErrorField>())).ErrorMsg as *const _
                as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderInsertErrorField),
            "::",
            stringify!(ErrorMsg)
        )
    );
}
impl Default for CThostFtdcExchangeOrderInsertErrorField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���뱨������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInputOrderActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "������������"]
    pub OrderActionRef: TThostFtdcOrderActionRefType,
    #[doc = "��������"]
    pub OrderRef: TThostFtdcOrderRefType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "�������"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "������־"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "�۸�"]
    pub LimitPrice: TThostFtdcPriceType,
    #[doc = "�����仯"]
    pub VolumeChange: TThostFtdcVolumeType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcInputOrderActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcInputOrderActionField>(),
        320usize,
        concat!("Size of: ", stringify!(CThostFtdcInputOrderActionField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcInputOrderActionField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcInputOrderActionField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderActionField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderActionField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderActionField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderActionField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderActionField>())).OrderActionRef as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderActionField),
            "::",
            stringify!(OrderActionRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderActionField>())).OrderRef as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderActionField),
            "::",
            stringify!(OrderRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderActionField>())).RequestID as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderActionField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderActionField>())).FrontID as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderActionField),
            "::",
            stringify!(FrontID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderActionField>())).SessionID as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderActionField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderActionField>())).ExchangeID as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderActionField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderActionField>())).OrderSysID as *const _
                as usize
        },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderActionField),
            "::",
            stringify!(OrderSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderActionField>())).ActionFlag as *const _
                as usize
        },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderActionField),
            "::",
            stringify!(ActionFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderActionField>())).LimitPrice as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderActionField),
            "::",
            stringify!(LimitPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderActionField>())).VolumeChange as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderActionField),
            "::",
            stringify!(VolumeChange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderActionField>())).UserID as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderActionField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderActionField>())).reserve1 as *const _
                as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderActionField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderActionField>())).InvestUnitID as *const _
                as usize
        },
        147usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderActionField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderActionField>())).reserve2 as *const _
                as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderActionField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderActionField>())).MacAddress as *const _
                as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderActionField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderActionField>())).InstrumentID as *const _
                as usize
        },
        201usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderActionField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOrderActionField>())).IPAddress as *const _
                as usize
        },
        282usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOrderActionField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcInputOrderActionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOrderActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "������������"]
    pub OrderActionRef: TThostFtdcOrderActionRefType,
    #[doc = "��������"]
    pub OrderRef: TThostFtdcOrderRefType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "�������"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "������־"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "�۸�"]
    pub LimitPrice: TThostFtdcPriceType,
    #[doc = "�����仯"]
    pub VolumeChange: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub ActionDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub ActionTime: TThostFtdcTimeType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "���ر������"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "�������ر��"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "��������״\u{32c}"]
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "״\u{32c}��Ϣ"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcOrderActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcOrderActionField>(),
        520usize,
        concat!("Size of: ", stringify!(CThostFtdcOrderActionField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcOrderActionField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcOrderActionField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderActionField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderActionField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderActionField>())).InvestorID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderActionField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderActionField>())).OrderActionRef as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderActionField),
            "::",
            stringify!(OrderActionRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderActionField>())).OrderRef as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderActionField),
            "::",
            stringify!(OrderRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderActionField>())).RequestID as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderActionField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderActionField>())).FrontID as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderActionField),
            "::",
            stringify!(FrontID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderActionField>())).SessionID as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderActionField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderActionField>())).ExchangeID as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderActionField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderActionField>())).OrderSysID as *const _ as usize
        },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderActionField),
            "::",
            stringify!(OrderSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderActionField>())).ActionFlag as *const _ as usize
        },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderActionField),
            "::",
            stringify!(ActionFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderActionField>())).LimitPrice as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderActionField),
            "::",
            stringify!(LimitPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderActionField>())).VolumeChange as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderActionField),
            "::",
            stringify!(VolumeChange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderActionField>())).ActionDate as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderActionField),
            "::",
            stringify!(ActionDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderActionField>())).ActionTime as *const _ as usize
        },
        109usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderActionField),
            "::",
            stringify!(ActionTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderActionField>())).TraderID as *const _ as usize
        },
        118usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderActionField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderActionField>())).InstallID as *const _ as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderActionField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderActionField>())).OrderLocalID as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderActionField),
            "::",
            stringify!(OrderLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderActionField>())).ActionLocalID as *const _
                as usize
        },
        157usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderActionField),
            "::",
            stringify!(ActionLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderActionField>())).ParticipantID as *const _
                as usize
        },
        170usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderActionField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderActionField>())).ClientID as *const _ as usize
        },
        181usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderActionField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderActionField>())).BusinessUnit as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderActionField),
            "::",
            stringify!(BusinessUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderActionField>())).OrderActionStatus as *const _
                as usize
        },
        213usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderActionField),
            "::",
            stringify!(OrderActionStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderActionField>())).UserID as *const _ as usize
        },
        214usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderActionField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderActionField>())).StatusMsg as *const _ as usize
        },
        230usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderActionField),
            "::",
            stringify!(StatusMsg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderActionField>())).reserve1 as *const _ as usize
        },
        311usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderActionField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderActionField>())).BranchID as *const _ as usize
        },
        342usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderActionField),
            "::",
            stringify!(BranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderActionField>())).InvestUnitID as *const _ as usize
        },
        351usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderActionField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderActionField>())).reserve2 as *const _ as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderActionField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderActionField>())).MacAddress as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderActionField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderActionField>())).InstrumentID as *const _ as usize
        },
        405usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderActionField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOrderActionField>())).IPAddress as *const _ as usize
        },
        486usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOrderActionField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcOrderActionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��������������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeOrderActionField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "�������"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "������־"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "�۸�"]
    pub LimitPrice: TThostFtdcPriceType,
    #[doc = "�����仯"]
    pub VolumeChange: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub ActionDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub ActionTime: TThostFtdcTimeType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "���ر������"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "�������ر��"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "��������״\u{32c}"]
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcExchangeOrderActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcExchangeOrderActionField>(),
        256usize,
        concat!("Size of: ", stringify!(CThostFtdcExchangeOrderActionField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcExchangeOrderActionField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcExchangeOrderActionField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderActionField>())).ExchangeID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderActionField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderActionField>())).OrderSysID as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderActionField),
            "::",
            stringify!(OrderSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderActionField>())).ActionFlag as *const _
                as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderActionField),
            "::",
            stringify!(ActionFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderActionField>())).LimitPrice as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderActionField),
            "::",
            stringify!(LimitPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderActionField>())).VolumeChange as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderActionField),
            "::",
            stringify!(VolumeChange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderActionField>())).ActionDate as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderActionField),
            "::",
            stringify!(ActionDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderActionField>())).ActionTime as *const _
                as usize
        },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderActionField),
            "::",
            stringify!(ActionTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderActionField>())).TraderID as *const _
                as usize
        },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderActionField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderActionField>())).InstallID as *const _
                as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderActionField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderActionField>())).OrderLocalID as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderActionField),
            "::",
            stringify!(OrderLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderActionField>())).ActionLocalID as *const _
                as usize
        },
        101usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderActionField),
            "::",
            stringify!(ActionLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderActionField>())).ParticipantID as *const _
                as usize
        },
        114usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderActionField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderActionField>())).ClientID as *const _
                as usize
        },
        125usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderActionField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderActionField>())).BusinessUnit as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderActionField),
            "::",
            stringify!(BusinessUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderActionField>())).OrderActionStatus
                as *const _ as usize
        },
        157usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderActionField),
            "::",
            stringify!(OrderActionStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderActionField>())).UserID as *const _
                as usize
        },
        158usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderActionField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderActionField>())).BranchID as *const _
                as usize
        },
        174usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderActionField),
            "::",
            stringify!(BranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderActionField>())).reserve1 as *const _
                as usize
        },
        183usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderActionField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderActionField>())).MacAddress as *const _
                as usize
        },
        199usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderActionField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderActionField>())).IPAddress as *const _
                as usize
        },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderActionField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcExchangeOrderActionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��������������ʧ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeOrderActionErrorField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "�������"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "���ر������"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "�������ر��"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
#[test]
fn bindgen_test_layout_CThostFtdcExchangeOrderActionErrorField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcExchangeOrderActionErrorField>(),
        172usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcExchangeOrderActionErrorField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcExchangeOrderActionErrorField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcExchangeOrderActionErrorField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderActionErrorField>())).ExchangeID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderActionErrorField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderActionErrorField>())).OrderSysID
                as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderActionErrorField),
            "::",
            stringify!(OrderSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderActionErrorField>())).TraderID as *const _
                as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderActionErrorField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderActionErrorField>())).InstallID
                as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderActionErrorField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderActionErrorField>())).OrderLocalID
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderActionErrorField),
            "::",
            stringify!(OrderLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderActionErrorField>())).ActionLocalID
                as *const _ as usize
        },
        69usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderActionErrorField),
            "::",
            stringify!(ActionLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderActionErrorField>())).ErrorID as *const _
                as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderActionErrorField),
            "::",
            stringify!(ErrorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOrderActionErrorField>())).ErrorMsg as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOrderActionErrorField),
            "::",
            stringify!(ErrorMsg)
        )
    );
}
impl Default for CThostFtdcExchangeOrderActionErrorField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�������ɽ�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeTradeField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "�ɽ����"]
    pub TradeID: TThostFtdcTradeIDType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "�������"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "���\u{5fd}�ɫ"]
    pub TradingRole: TThostFtdcTradingRoleType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "��ƽ��־"]
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "�۸�"]
    pub Price: TThostFtdcPriceType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "�ɽ�ʱ��"]
    pub TradeDate: TThostFtdcDateType,
    #[doc = "�ɽ�ʱ��"]
    pub TradeTime: TThostFtdcTimeType,
    #[doc = "�ɽ�����"]
    pub TradeType: TThostFtdcTradeTypeType,
    #[doc = "�ɽ�����Դ"]
    pub PriceSource: TThostFtdcPriceSourceType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "���ر������"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "�����Ա���"]
    pub ClearingPartID: TThostFtdcParticipantIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "���"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "�ɽ���Դ"]
    pub TradeSource: TThostFtdcTradeSourceType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcExchangeTradeField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcExchangeTradeField>(),
        304usize,
        concat!("Size of: ", stringify!(CThostFtdcExchangeTradeField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcExchangeTradeField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcExchangeTradeField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeTradeField>())).ExchangeID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeTradeField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeTradeField>())).TradeID as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeTradeField),
            "::",
            stringify!(TradeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeTradeField>())).Direction as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeTradeField),
            "::",
            stringify!(Direction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeTradeField>())).OrderSysID as *const _ as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeTradeField),
            "::",
            stringify!(OrderSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeTradeField>())).ParticipantID as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeTradeField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeTradeField>())).ClientID as *const _ as usize
        },
        63usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeTradeField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeTradeField>())).TradingRole as *const _
                as usize
        },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeTradeField),
            "::",
            stringify!(TradingRole)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeTradeField>())).reserve1 as *const _ as usize
        },
        75usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeTradeField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeTradeField>())).OffsetFlag as *const _ as usize
        },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeTradeField),
            "::",
            stringify!(OffsetFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeTradeField>())).HedgeFlag as *const _ as usize
        },
        107usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeTradeField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeTradeField>())).Price as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeTradeField),
            "::",
            stringify!(Price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeTradeField>())).Volume as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeTradeField),
            "::",
            stringify!(Volume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeTradeField>())).TradeDate as *const _ as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeTradeField),
            "::",
            stringify!(TradeDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeTradeField>())).TradeTime as *const _ as usize
        },
        133usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeTradeField),
            "::",
            stringify!(TradeTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeTradeField>())).TradeType as *const _ as usize
        },
        142usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeTradeField),
            "::",
            stringify!(TradeType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeTradeField>())).PriceSource as *const _
                as usize
        },
        143usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeTradeField),
            "::",
            stringify!(PriceSource)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeTradeField>())).TraderID as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeTradeField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeTradeField>())).OrderLocalID as *const _
                as usize
        },
        165usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeTradeField),
            "::",
            stringify!(OrderLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeTradeField>())).ClearingPartID as *const _
                as usize
        },
        178usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeTradeField),
            "::",
            stringify!(ClearingPartID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeTradeField>())).BusinessUnit as *const _
                as usize
        },
        189usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeTradeField),
            "::",
            stringify!(BusinessUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeTradeField>())).SequenceNo as *const _ as usize
        },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeTradeField),
            "::",
            stringify!(SequenceNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeTradeField>())).TradeSource as *const _
                as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeTradeField),
            "::",
            stringify!(TradeSource)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeTradeField>())).ExchangeInstID as *const _
                as usize
        },
        217usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeTradeField),
            "::",
            stringify!(ExchangeInstID)
        )
    );
}
impl Default for CThostFtdcExchangeTradeField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�ɽ�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTradeField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��������"]
    pub OrderRef: TThostFtdcOrderRefType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "�ɽ����"]
    pub TradeID: TThostFtdcTradeIDType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "�������"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "���\u{5fd}�ɫ"]
    pub TradingRole: TThostFtdcTradingRoleType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "��ƽ��־"]
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "�۸�"]
    pub Price: TThostFtdcPriceType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "�ɽ�ʱ��"]
    pub TradeDate: TThostFtdcDateType,
    #[doc = "�ɽ�ʱ��"]
    pub TradeTime: TThostFtdcTimeType,
    #[doc = "�ɽ�����"]
    pub TradeType: TThostFtdcTradeTypeType,
    #[doc = "�ɽ�����Դ"]
    pub PriceSource: TThostFtdcPriceSourceType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "���ر������"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "�����Ա���"]
    pub ClearingPartID: TThostFtdcParticipantIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "���"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "���\u{379}�˾�������"]
    pub BrokerOrderSeq: TThostFtdcSequenceNoType,
    #[doc = "�ɽ���Դ"]
    pub TradeSource: TThostFtdcTradeSourceType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcTradeField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcTradeField>(),
        496usize,
        concat!("Size of: ", stringify!(CThostFtdcTradeField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcTradeField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcTradeField))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcTradeField>())).BrokerID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcTradeField>())).InvestorID as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcTradeField>())).reserve1 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcTradeField>())).OrderRef as *const _ as usize },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeField),
            "::",
            stringify!(OrderRef)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcTradeField>())).UserID as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcTradeField>())).ExchangeID as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcTradeField>())).TradeID as *const _ as usize },
        93usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeField),
            "::",
            stringify!(TradeID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcTradeField>())).Direction as *const _ as usize },
        114usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeField),
            "::",
            stringify!(Direction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcTradeField>())).OrderSysID as *const _ as usize },
        115usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeField),
            "::",
            stringify!(OrderSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradeField>())).ParticipantID as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcTradeField>())).ClientID as *const _ as usize },
        147usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradeField>())).TradingRole as *const _ as usize
        },
        158usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeField),
            "::",
            stringify!(TradingRole)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcTradeField>())).reserve2 as *const _ as usize },
        159usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcTradeField>())).OffsetFlag as *const _ as usize },
        190usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeField),
            "::",
            stringify!(OffsetFlag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcTradeField>())).HedgeFlag as *const _ as usize },
        191usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcTradeField>())).Price as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeField),
            "::",
            stringify!(Price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcTradeField>())).Volume as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeField),
            "::",
            stringify!(Volume)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcTradeField>())).TradeDate as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeField),
            "::",
            stringify!(TradeDate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcTradeField>())).TradeTime as *const _ as usize },
        213usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeField),
            "::",
            stringify!(TradeTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcTradeField>())).TradeType as *const _ as usize },
        222usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeField),
            "::",
            stringify!(TradeType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradeField>())).PriceSource as *const _ as usize
        },
        223usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeField),
            "::",
            stringify!(PriceSource)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcTradeField>())).TraderID as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradeField>())).OrderLocalID as *const _ as usize
        },
        245usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeField),
            "::",
            stringify!(OrderLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradeField>())).ClearingPartID as *const _ as usize
        },
        258usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeField),
            "::",
            stringify!(ClearingPartID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradeField>())).BusinessUnit as *const _ as usize
        },
        269usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeField),
            "::",
            stringify!(BusinessUnit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcTradeField>())).SequenceNo as *const _ as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeField),
            "::",
            stringify!(SequenceNo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcTradeField>())).TradingDay as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradeField>())).SettlementID as *const _ as usize
        },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeField),
            "::",
            stringify!(SettlementID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradeField>())).BrokerOrderSeq as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeField),
            "::",
            stringify!(BrokerOrderSeq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradeField>())).TradeSource as *const _ as usize
        },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeField),
            "::",
            stringify!(TradeSource)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradeField>())).InvestUnitID as *const _ as usize
        },
        317usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradeField>())).InstrumentID as *const _ as usize
        },
        334usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradeField>())).ExchangeInstID as *const _ as usize
        },
        415usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeField),
            "::",
            stringify!(ExchangeInstID)
        )
    );
}
impl Default for CThostFtdcTradeField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�û��Ự"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcUserSessionField {
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��¼����"]
    pub LoginDate: TThostFtdcDateType,
    #[doc = "��¼ʱ��"]
    pub LoginTime: TThostFtdcTimeType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "�û��˲�Ʒ��Ϣ"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "�ӿڶ˲�Ʒ��Ϣ"]
    pub InterfaceProductInfo: TThostFtdcProductInfoType,
    #[doc = "Э����Ϣ"]
    pub ProtocolInfo: TThostFtdcProtocolInfoType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��¼��ע"]
    pub LoginRemark: TThostFtdcLoginRemarkType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcUserSessionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcUserSessionField>(),
        192usize,
        concat!("Size of: ", stringify!(CThostFtdcUserSessionField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcUserSessionField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcUserSessionField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserSessionField>())).FrontID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserSessionField),
            "::",
            stringify!(FrontID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserSessionField>())).SessionID as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserSessionField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserSessionField>())).BrokerID as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserSessionField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserSessionField>())).UserID as *const _ as usize
        },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserSessionField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserSessionField>())).LoginDate as *const _ as usize
        },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserSessionField),
            "::",
            stringify!(LoginDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserSessionField>())).LoginTime as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserSessionField),
            "::",
            stringify!(LoginTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserSessionField>())).reserve1 as *const _ as usize
        },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserSessionField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserSessionField>())).UserProductInfo as *const _
                as usize
        },
        69usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserSessionField),
            "::",
            stringify!(UserProductInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserSessionField>())).InterfaceProductInfo as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserSessionField),
            "::",
            stringify!(InterfaceProductInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserSessionField>())).ProtocolInfo as *const _ as usize
        },
        91usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserSessionField),
            "::",
            stringify!(ProtocolInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserSessionField>())).MacAddress as *const _ as usize
        },
        102usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserSessionField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserSessionField>())).LoginRemark as *const _ as usize
        },
        123usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserSessionField),
            "::",
            stringify!(LoginRemark)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserSessionField>())).IPAddress as *const _ as usize
        },
        159usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserSessionField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcUserSessionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ��\u{f1a35}�����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryMaxOrderVolumeField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "��ƽ��־"]
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "���������������"]
    pub MaxVolume: TThostFtdcVolumeType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryMaxOrderVolumeField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryMaxOrderVolumeField>(),
        172usize,
        concat!("Size of: ", stringify!(CThostFtdcQryMaxOrderVolumeField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryMaxOrderVolumeField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryMaxOrderVolumeField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMaxOrderVolumeField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMaxOrderVolumeField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMaxOrderVolumeField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMaxOrderVolumeField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMaxOrderVolumeField>())).reserve1 as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMaxOrderVolumeField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMaxOrderVolumeField>())).Direction as *const _
                as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMaxOrderVolumeField),
            "::",
            stringify!(Direction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMaxOrderVolumeField>())).OffsetFlag as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMaxOrderVolumeField),
            "::",
            stringify!(OffsetFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMaxOrderVolumeField>())).HedgeFlag as *const _
                as usize
        },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMaxOrderVolumeField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMaxOrderVolumeField>())).MaxVolume as *const _
                as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMaxOrderVolumeField),
            "::",
            stringify!(MaxVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMaxOrderVolumeField>())).ExchangeID as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMaxOrderVolumeField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMaxOrderVolumeField>())).InvestUnitID as *const _
                as usize
        },
        73usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMaxOrderVolumeField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMaxOrderVolumeField>())).InstrumentID as *const _
                as usize
        },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMaxOrderVolumeField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcQryMaxOrderVolumeField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "Ͷ���\u{7fd}�����ȷ����Ϣ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcSettlementInfoConfirmField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "ȷ������"]
    pub ConfirmDate: TThostFtdcDateType,
    #[doc = "ȷ��ʱ��"]
    pub ConfirmTime: TThostFtdcTimeType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSettlementInfoConfirmField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSettlementInfoConfirmField>(),
        68usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcSettlementInfoConfirmField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSettlementInfoConfirmField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcSettlementInfoConfirmField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSettlementInfoConfirmField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSettlementInfoConfirmField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSettlementInfoConfirmField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSettlementInfoConfirmField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSettlementInfoConfirmField>())).ConfirmDate as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSettlementInfoConfirmField),
            "::",
            stringify!(ConfirmDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSettlementInfoConfirmField>())).ConfirmTime as *const _
                as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSettlementInfoConfirmField),
            "::",
            stringify!(ConfirmTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSettlementInfoConfirmField>())).SettlementID
                as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSettlementInfoConfirmField),
            "::",
            stringify!(SettlementID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSettlementInfoConfirmField>())).AccountID as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSettlementInfoConfirmField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSettlementInfoConfirmField>())).CurrencyID as *const _
                as usize
        },
        61usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSettlementInfoConfirmField),
            "::",
            stringify!(CurrencyID)
        )
    );
}
#[doc = "�����\u{36c}��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDepositField {
    #[doc = "�������ˮ��"]
    pub DepositSeqNo: TThostFtdcDepositSeqNoType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "�����"]
    pub Deposit: TThostFtdcMoneyType,
    #[doc = "�Ƿ�ǿ�ƽ���"]
    pub IsForce: TThostFtdcBoolType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "�Ƿ��Ǹ�����Ȩ��ת"]
    pub IsFromSopt: TThostFtdcBoolType,
    #[doc = "�ʽ�����"]
    pub TradingPassword: TThostFtdcPasswordType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSyncDepositField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSyncDepositField>(),
        104usize,
        concat!("Size of: ", stringify!(CThostFtdcSyncDepositField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSyncDepositField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcSyncDepositField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDepositField>())).DepositSeqNo as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDepositField),
            "::",
            stringify!(DepositSeqNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDepositField>())).BrokerID as *const _ as usize
        },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDepositField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDepositField>())).InvestorID as *const _ as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDepositField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDepositField>())).Deposit as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDepositField),
            "::",
            stringify!(Deposit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDepositField>())).IsForce as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDepositField),
            "::",
            stringify!(IsForce)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDepositField>())).CurrencyID as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDepositField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDepositField>())).IsFromSopt as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDepositField),
            "::",
            stringify!(IsFromSopt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDepositField>())).TradingPassword as *const _
                as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDepositField),
            "::",
            stringify!(TradingPassword)
        )
    );
}
impl Default for CThostFtdcSyncDepositField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "������Ѻ\u{36c}��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcSyncFundMortgageField {
    #[doc = "������Ѻ��ˮ��"]
    pub MortgageSeqNo: TThostFtdcDepositSeqNoType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Դ����"]
    pub FromCurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "��Ѻ���"]
    pub MortgageAmount: TThostFtdcMoneyType,
    #[doc = "Ŀ�����"]
    pub ToCurrencyID: TThostFtdcCurrencyIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSyncFundMortgageField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSyncFundMortgageField>(),
        64usize,
        concat!("Size of: ", stringify!(CThostFtdcSyncFundMortgageField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSyncFundMortgageField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcSyncFundMortgageField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncFundMortgageField>())).MortgageSeqNo as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncFundMortgageField),
            "::",
            stringify!(MortgageSeqNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncFundMortgageField>())).BrokerID as *const _
                as usize
        },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncFundMortgageField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncFundMortgageField>())).InvestorID as *const _
                as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncFundMortgageField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncFundMortgageField>())).FromCurrencyID as *const _
                as usize
        },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncFundMortgageField),
            "::",
            stringify!(FromCurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncFundMortgageField>())).MortgageAmount as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncFundMortgageField),
            "::",
            stringify!(MortgageAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncFundMortgageField>())).ToCurrencyID as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncFundMortgageField),
            "::",
            stringify!(ToCurrencyID)
        )
    );
}
#[doc = "���\u{379}�˾\u{36c}��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcBrokerSyncField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcBrokerSyncField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcBrokerSyncField>(),
        11usize,
        concat!("Size of: ", stringify!(CThostFtdcBrokerSyncField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcBrokerSyncField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcBrokerSyncField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerSyncField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerSyncField),
            "::",
            stringify!(BrokerID)
        )
    );
}
#[doc = "����\u{36c}���е�Ͷ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncingInvestorField {
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���߷������"]
    pub InvestorGroupID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ��������"]
    pub InvestorName: TThostFtdcPartyNameType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�Ƿ��Ծ"]
    pub IsActive: TThostFtdcBoolType,
    #[doc = "��ϵ�绰"]
    pub Telephone: TThostFtdcTelephoneType,
    #[doc = "\u{368}Ѷ��\u{5b7}"]
    pub Address: TThostFtdcAddressType,
    #[doc = "��������"]
    pub OpenDate: TThostFtdcDateType,
    #[doc = "�\u{5bb}�"]
    pub Mobile: TThostFtdcMobileType,
    #[doc = "��������ģ�����"]
    pub CommModelID: TThostFtdcInvestorIDType,
    #[doc = "��\u{5a4}����ģ�����"]
    pub MarginModelID: TThostFtdcInvestorIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSyncingInvestorField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSyncingInvestorField>(),
        396usize,
        concat!("Size of: ", stringify!(CThostFtdcSyncingInvestorField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSyncingInvestorField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcSyncingInvestorField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorField>())).InvestorID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorField>())).BrokerID as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorField>())).InvestorGroupID as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorField),
            "::",
            stringify!(InvestorGroupID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorField>())).InvestorName as *const _
                as usize
        },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorField),
            "::",
            stringify!(InvestorName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorField>())).IdentifiedCardType
                as *const _ as usize
        },
        118usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorField),
            "::",
            stringify!(IdentifiedCardType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorField>())).IdentifiedCardNo as *const _
                as usize
        },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorField),
            "::",
            stringify!(IdentifiedCardNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorField>())).IsActive as *const _ as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorField),
            "::",
            stringify!(IsActive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorField>())).Telephone as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorField),
            "::",
            stringify!(Telephone)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorField>())).Address as *const _ as usize
        },
        217usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorField),
            "::",
            stringify!(Address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorField>())).OpenDate as *const _ as usize
        },
        318usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorField),
            "::",
            stringify!(OpenDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorField>())).Mobile as *const _ as usize
        },
        327usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorField),
            "::",
            stringify!(Mobile)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorField>())).CommModelID as *const _
                as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorField),
            "::",
            stringify!(CommModelID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorField>())).MarginModelID as *const _
                as usize
        },
        381usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorField),
            "::",
            stringify!(MarginModelID)
        )
    );
}
impl Default for CThostFtdcSyncingInvestorField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "����\u{36c}���еĽ��״���"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcSyncingTradingCodeField {
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "�Ƿ��Ծ"]
    pub IsActive: TThostFtdcBoolType,
    #[doc = "���ױ�������"]
    pub ClientIDType: TThostFtdcClientIDTypeType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSyncingTradingCodeField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSyncingTradingCodeField>(),
        52usize,
        concat!("Size of: ", stringify!(CThostFtdcSyncingTradingCodeField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSyncingTradingCodeField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcSyncingTradingCodeField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingCodeField>())).InvestorID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingCodeField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingCodeField>())).BrokerID as *const _
                as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingCodeField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingCodeField>())).ExchangeID as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingCodeField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingCodeField>())).ClientID as *const _
                as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingCodeField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingCodeField>())).IsActive as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingCodeField),
            "::",
            stringify!(IsActive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingCodeField>())).ClientIDType as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingCodeField),
            "::",
            stringify!(ClientIDType)
        )
    );
}
#[doc = "����\u{36c}���е�Ͷ���߷���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncingInvestorGroupField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���߷������"]
    pub InvestorGroupID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ���߷�������"]
    pub InvestorGroupName: TThostFtdcInvestorGroupNameType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSyncingInvestorGroupField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSyncingInvestorGroupField>(),
        65usize,
        concat!("Size of: ", stringify!(CThostFtdcSyncingInvestorGroupField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSyncingInvestorGroupField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcSyncingInvestorGroupField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorGroupField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorGroupField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorGroupField>())).InvestorGroupID
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorGroupField),
            "::",
            stringify!(InvestorGroupID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorGroupField>())).InvestorGroupName
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorGroupField),
            "::",
            stringify!(InvestorGroupName)
        )
    );
}
impl Default for CThostFtdcSyncingInvestorGroupField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "����\u{36c}���еĽ����˺�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcSyncingTradingAccountField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ϴ���Ѻ���"]
    pub PreMortgage: TThostFtdcMoneyType,
    #[doc = "�ϴ����ö��"]
    pub PreCredit: TThostFtdcMoneyType,
    #[doc = "�ϴδ���"]
    pub PreDeposit: TThostFtdcMoneyType,
    #[doc = "�ϴν���\u{5fc}����"]
    pub PreBalance: TThostFtdcMoneyType,
    #[doc = "�ϴ�ռ�õı�\u{5a4}��"]
    pub PreMargin: TThostFtdcMoneyType,
    #[doc = "��Ϣ����"]
    pub InterestBase: TThostFtdcMoneyType,
    #[doc = "��Ϣ����"]
    pub Interest: TThostFtdcMoneyType,
    #[doc = "�����"]
    pub Deposit: TThostFtdcMoneyType,
    #[doc = "������"]
    pub Withdraw: TThostFtdcMoneyType,
    #[doc = "����ı�\u{5a4}��"]
    pub FrozenMargin: TThostFtdcMoneyType,
    #[doc = "������ʽ�"]
    pub FrozenCash: TThostFtdcMoneyType,
    #[doc = "�����������"]
    pub FrozenCommission: TThostFtdcMoneyType,
    #[doc = "��ǰ��\u{5a4}���\u{736}�"]
    pub CurrMargin: TThostFtdcMoneyType,
    #[doc = "�ʽ���"]
    pub CashIn: TThostFtdcMoneyType,
    #[doc = "������"]
    pub Commission: TThostFtdcMoneyType,
    #[doc = "ƽ��ӯ��"]
    pub CloseProfit: TThostFtdcMoneyType,
    #[doc = "�\u{5b2}�ӯ��"]
    pub PositionProfit: TThostFtdcMoneyType,
    #[doc = "�ڻ�����\u{5fc}����"]
    pub Balance: TThostFtdcMoneyType,
    #[doc = "�����ʽ�"]
    pub Available: TThostFtdcMoneyType,
    #[doc = "��ȡ�ʽ�"]
    pub WithdrawQuota: TThostFtdcMoneyType,
    #[doc = "����\u{5fc}����"]
    pub Reserve: TThostFtdcMoneyType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "���ö��"]
    pub Credit: TThostFtdcMoneyType,
    #[doc = "��Ѻ���"]
    pub Mortgage: TThostFtdcMoneyType,
    #[doc = "��������\u{5a4}��"]
    pub ExchangeMargin: TThostFtdcMoneyType,
    #[doc = "Ͷ���\u{7fd}��\u{ec63}\u{5a4}��"]
    pub DeliveryMargin: TThostFtdcMoneyType,
    #[doc = "���������\u{ec63}\u{5a4}��"]
    pub ExchangeDeliveryMargin: TThostFtdcMoneyType,
    #[doc = "�����ڻ�����\u{5fc}����"]
    pub ReserveBalance: TThostFtdcMoneyType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "�ϴλ���������"]
    pub PreFundMortgageIn: TThostFtdcMoneyType,
    #[doc = "�ϴλ����ʳ����"]
    pub PreFundMortgageOut: TThostFtdcMoneyType,
    #[doc = "����������"]
    pub FundMortgageIn: TThostFtdcMoneyType,
    #[doc = "�����ʳ����"]
    pub FundMortgageOut: TThostFtdcMoneyType,
    #[doc = "������Ѻ���"]
    pub FundMortgageAvailable: TThostFtdcMoneyType,
    #[doc = "����Ѻ���ҽ��"]
    pub MortgageableFund: TThostFtdcMoneyType,
    #[doc = "�����Ʒռ�ñ�\u{5a4}��"]
    pub SpecProductMargin: TThostFtdcMoneyType,
    #[doc = "�����Ʒ���ᱣ\u{5a4}��"]
    pub SpecProductFrozenMargin: TThostFtdcMoneyType,
    #[doc = "�����Ʒ������"]
    pub SpecProductCommission: TThostFtdcMoneyType,
    #[doc = "�����Ʒ����������"]
    pub SpecProductFrozenCommission: TThostFtdcMoneyType,
    #[doc = "�����Ʒ�\u{5b2}�ӯ��"]
    pub SpecProductPositionProfit: TThostFtdcMoneyType,
    #[doc = "�����Ʒƽ��ӯ��"]
    pub SpecProductCloseProfit: TThostFtdcMoneyType,
    #[doc = "���ݳ\u{5b2}�ӯ���㷨����������Ʒ�\u{5b2}�ӯ��"]
    pub SpecProductPositionProfitByAlg: TThostFtdcMoneyType,
    #[doc = "�����Ʒ��������\u{5a4}��"]
    pub SpecProductExchangeMargin: TThostFtdcMoneyType,
    #[doc = "��ʱ���㶳����"]
    pub FrozenSwap: TThostFtdcMoneyType,
    #[doc = "ʣ�\u{efb}����"]
    pub RemainSwap: TThostFtdcMoneyType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSyncingTradingAccountField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSyncingTradingAccountField>(),
        392usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcSyncingTradingAccountField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSyncingTradingAccountField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcSyncingTradingAccountField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).AccountID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).PreMortgage as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(PreMortgage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).PreCredit as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(PreCredit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).PreDeposit as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(PreDeposit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).PreBalance as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(PreBalance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).PreMargin as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(PreMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).InterestBase
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(InterestBase)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).Interest as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(Interest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).Deposit as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(Deposit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).Withdraw as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(Withdraw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).FrozenMargin
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(FrozenMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).FrozenCash as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(FrozenCash)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).FrozenCommission
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(FrozenCommission)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).CurrMargin as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(CurrMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).CashIn as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(CashIn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).Commission as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(Commission)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).CloseProfit as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(CloseProfit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).PositionProfit
                as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(PositionProfit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).Balance as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(Balance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).Available as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(Available)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).WithdrawQuota
                as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(WithdrawQuota)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).Reserve as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(Reserve)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).TradingDay as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).SettlementID
                as *const _ as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(SettlementID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).Credit as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(Credit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).Mortgage as *const _
                as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(Mortgage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).ExchangeMargin
                as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(ExchangeMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).DeliveryMargin
                as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(DeliveryMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).ExchangeDeliveryMargin
                as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(ExchangeDeliveryMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).ReserveBalance
                as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(ReserveBalance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).CurrencyID as *const _
                as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).PreFundMortgageIn
                as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(PreFundMortgageIn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).PreFundMortgageOut
                as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(PreFundMortgageOut)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).FundMortgageIn
                as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(FundMortgageIn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).FundMortgageOut
                as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(FundMortgageOut)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).FundMortgageAvailable
                as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(FundMortgageAvailable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).MortgageableFund
                as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(MortgageableFund)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).SpecProductMargin
                as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(SpecProductMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).SpecProductFrozenMargin
                as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(SpecProductFrozenMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).SpecProductCommission
                as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(SpecProductCommission)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>()))
                .SpecProductFrozenCommission as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(SpecProductFrozenCommission)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>()))
                .SpecProductPositionProfit as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(SpecProductPositionProfit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).SpecProductCloseProfit
                as *const _ as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(SpecProductCloseProfit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>()))
                .SpecProductPositionProfitByAlg as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(SpecProductPositionProfitByAlg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>()))
                .SpecProductExchangeMargin as *const _ as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(SpecProductExchangeMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).FrozenSwap as *const _
                as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(FrozenSwap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingTradingAccountField>())).RemainSwap as *const _
                as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingTradingAccountField),
            "::",
            stringify!(RemainSwap)
        )
    );
}
#[doc = "����\u{36c}���е�Ͷ���\u{7f3}\u{5b2}�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncingInvestorPositionField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "�\u{5b2}\u{5b6}�շ���"]
    pub PosiDirection: TThostFtdcPosiDirectionType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "�\u{5b2}�����"]
    pub PositionDate: TThostFtdcPositionDateType,
    #[doc = "���ճ\u{5b2}�"]
    pub YdPosition: TThostFtdcVolumeType,
    #[doc = "���ճ\u{5b2}�"]
    pub Position: TThostFtdcVolumeType,
    #[doc = "��ͷ����"]
    pub LongFrozen: TThostFtdcVolumeType,
    #[doc = "��ͷ����"]
    pub ShortFrozen: TThostFtdcVolumeType,
    #[doc = "���\u{5b6}�����"]
    pub LongFrozenAmount: TThostFtdcMoneyType,
    #[doc = "���\u{5b6}�����"]
    pub ShortFrozenAmount: TThostFtdcMoneyType,
    #[doc = "������"]
    pub OpenVolume: TThostFtdcVolumeType,
    #[doc = "ƽ����"]
    pub CloseVolume: TThostFtdcVolumeType,
    #[doc = "���\u{5bd}��"]
    pub OpenAmount: TThostFtdcMoneyType,
    #[doc = "ƽ�\u{5bd}��"]
    pub CloseAmount: TThostFtdcMoneyType,
    #[doc = "�\u{5b2}\u{5b3}ɱ�"]
    pub PositionCost: TThostFtdcMoneyType,
    #[doc = "�ϴ�ռ�õı�\u{5a4}��"]
    pub PreMargin: TThostFtdcMoneyType,
    #[doc = "ռ�õı�\u{5a4}��"]
    pub UseMargin: TThostFtdcMoneyType,
    #[doc = "����ı�\u{5a4}��"]
    pub FrozenMargin: TThostFtdcMoneyType,
    #[doc = "������ʽ�"]
    pub FrozenCash: TThostFtdcMoneyType,
    #[doc = "�����������"]
    pub FrozenCommission: TThostFtdcMoneyType,
    #[doc = "�ʽ���"]
    pub CashIn: TThostFtdcMoneyType,
    #[doc = "������"]
    pub Commission: TThostFtdcMoneyType,
    #[doc = "ƽ��ӯ��"]
    pub CloseProfit: TThostFtdcMoneyType,
    #[doc = "�\u{5b2}�ӯ��"]
    pub PositionProfit: TThostFtdcMoneyType,
    #[doc = "�ϴν����"]
    pub PreSettlementPrice: TThostFtdcPriceType,
    #[doc = "���ν����"]
    pub SettlementPrice: TThostFtdcPriceType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "���\u{5b3}ɱ�"]
    pub OpenCost: TThostFtdcMoneyType,
    #[doc = "��������\u{5a4}��"]
    pub ExchangeMargin: TThostFtdcMoneyType,
    #[doc = "��ϳɽ��γɵĳ\u{5b2}�"]
    pub CombPosition: TThostFtdcVolumeType,
    #[doc = "��϶�ͷ����"]
    pub CombLongFrozen: TThostFtdcVolumeType,
    #[doc = "��Ͽ�ͷ����"]
    pub CombShortFrozen: TThostFtdcVolumeType,
    #[doc = "���ն���ƽ��ӯ��"]
    pub CloseProfitByDate: TThostFtdcMoneyType,
    #[doc = "��ʶԳ�ƽ��ӯ��"]
    pub CloseProfitByTrade: TThostFtdcMoneyType,
    #[doc = "���ճ\u{5b2}�"]
    pub TodayPosition: TThostFtdcVolumeType,
    #[doc = "��\u{5a4}����"]
    pub MarginRateByMoney: TThostFtdcRatioType,
    #[doc = "��\u{5a4}����(������)"]
    pub MarginRateByVolume: TThostFtdcRatioType,
    #[doc = "\u{5b4}�ж���"]
    pub StrikeFrozen: TThostFtdcVolumeType,
    #[doc = "\u{5b4}�ж�����"]
    pub StrikeFrozenAmount: TThostFtdcMoneyType,
    #[doc = "����\u{5b4}�ж���"]
    pub AbandonFrozen: TThostFtdcVolumeType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "\u{5b4}�ж�������"]
    pub YdStrikeFrozen: TThostFtdcVolumeType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "�������\u{5b2}\u{5b3}ɱ���\u{5b5}��\u{5bb}�д�����ʹ��"]
    pub PositionCostOffset: TThostFtdcMoneyType,
    #[doc = "tas�\u{5b2}�����"]
    pub TasPosition: TThostFtdcVolumeType,
    #[doc = "tas�\u{5b2}\u{5b3}ɱ�"]
    pub TasPositionCost: TThostFtdcMoneyType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSyncingInvestorPositionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSyncingInvestorPositionField>(),
        472usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcSyncingInvestorPositionField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSyncingInvestorPositionField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcSyncingInvestorPositionField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).reserve1 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).BrokerID as *const _
                as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).InvestorID
                as *const _ as usize
        },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).PosiDirection
                as *const _ as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(PosiDirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).HedgeFlag as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).PositionDate
                as *const _ as usize
        },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(PositionDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).YdPosition
                as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(YdPosition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).Position as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(Position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).LongFrozen
                as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(LongFrozen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).ShortFrozen
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(ShortFrozen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).LongFrozenAmount
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(LongFrozenAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).ShortFrozenAmount
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(ShortFrozenAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).OpenVolume
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(OpenVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).CloseVolume
                as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(CloseVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).OpenAmount
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(OpenAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).CloseAmount
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(CloseAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).PositionCost
                as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(PositionCost)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).PreMargin as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(PreMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).UseMargin as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(UseMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).FrozenMargin
                as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(FrozenMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).FrozenCash
                as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(FrozenCash)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).FrozenCommission
                as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(FrozenCommission)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).CashIn as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(CashIn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).Commission
                as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(Commission)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).CloseProfit
                as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(CloseProfit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).PositionProfit
                as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(PositionProfit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).PreSettlementPrice
                as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(PreSettlementPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).SettlementPrice
                as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(SettlementPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).TradingDay
                as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).SettlementID
                as *const _ as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(SettlementID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).OpenCost as *const _
                as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(OpenCost)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).ExchangeMargin
                as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(ExchangeMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).CombPosition
                as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(CombPosition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).CombLongFrozen
                as *const _ as usize
        },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(CombLongFrozen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).CombShortFrozen
                as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(CombShortFrozen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).CloseProfitByDate
                as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(CloseProfitByDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).CloseProfitByTrade
                as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(CloseProfitByTrade)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).TodayPosition
                as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(TodayPosition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).MarginRateByMoney
                as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(MarginRateByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).MarginRateByVolume
                as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(MarginRateByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).StrikeFrozen
                as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(StrikeFrozen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).StrikeFrozenAmount
                as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(StrikeFrozenAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).AbandonFrozen
                as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(AbandonFrozen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).ExchangeID
                as *const _ as usize
        },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).YdStrikeFrozen
                as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(YdStrikeFrozen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).InvestUnitID
                as *const _ as usize
        },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).PositionCostOffset
                as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(PositionCostOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).TasPosition
                as *const _ as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(TasPosition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).TasPositionCost
                as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(TasPositionCost)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInvestorPositionField>())).InstrumentID
                as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInvestorPositionField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcSyncingInvestorPositionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "����\u{36c}���еĺ�Լ��\u{5a4}����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncingInstrumentMarginRateField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��ͷ��\u{5a4}���"]
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��ͷ��\u{5a4}���"]
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "�Ƿ���Խ�������ȡ"]
    pub IsRelative: TThostFtdcBoolType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSyncingInstrumentMarginRateField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSyncingInstrumentMarginRateField>(),
        184usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcSyncingInstrumentMarginRateField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSyncingInstrumentMarginRateField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcSyncingInstrumentMarginRateField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInstrumentMarginRateField>())).reserve1
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInstrumentMarginRateField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInstrumentMarginRateField>())).InvestorRange
                as *const _ as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInstrumentMarginRateField),
            "::",
            stringify!(InvestorRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInstrumentMarginRateField>())).BrokerID
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInstrumentMarginRateField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInstrumentMarginRateField>())).InvestorID
                as *const _ as usize
        },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInstrumentMarginRateField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInstrumentMarginRateField>())).HedgeFlag
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInstrumentMarginRateField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInstrumentMarginRateField>()))
                .LongMarginRatioByMoney as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInstrumentMarginRateField),
            "::",
            stringify!(LongMarginRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInstrumentMarginRateField>()))
                .LongMarginRatioByVolume as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInstrumentMarginRateField),
            "::",
            stringify!(LongMarginRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInstrumentMarginRateField>()))
                .ShortMarginRatioByMoney as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInstrumentMarginRateField),
            "::",
            stringify!(ShortMarginRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInstrumentMarginRateField>()))
                .ShortMarginRatioByVolume as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInstrumentMarginRateField),
            "::",
            stringify!(ShortMarginRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInstrumentMarginRateField>())).IsRelative
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInstrumentMarginRateField),
            "::",
            stringify!(IsRelative)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInstrumentMarginRateField>())).InstrumentID
                as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInstrumentMarginRateField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcSyncingInstrumentMarginRateField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "����\u{36c}���еĺ�Լ��������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncingInstrumentCommissionRateField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "������������"]
    pub OpenRatioByMoney: TThostFtdcRatioType,
    #[doc = "����������"]
    pub OpenRatioByVolume: TThostFtdcRatioType,
    #[doc = "ƽ����������"]
    pub CloseRatioByMoney: TThostFtdcRatioType,
    #[doc = "ƽ��������"]
    pub CloseRatioByVolume: TThostFtdcRatioType,
    #[doc = "ƽ����������"]
    pub CloseTodayRatioByMoney: TThostFtdcRatioType,
    #[doc = "ƽ��������"]
    pub CloseTodayRatioByVolume: TThostFtdcRatioType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSyncingInstrumentCommissionRateField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSyncingInstrumentCommissionRateField>(),
        192usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcSyncingInstrumentCommissionRateField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSyncingInstrumentCommissionRateField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcSyncingInstrumentCommissionRateField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInstrumentCommissionRateField>())).reserve1
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInstrumentCommissionRateField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInstrumentCommissionRateField>())).InvestorRange
                as *const _ as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInstrumentCommissionRateField),
            "::",
            stringify!(InvestorRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInstrumentCommissionRateField>())).BrokerID
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInstrumentCommissionRateField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInstrumentCommissionRateField>())).InvestorID
                as *const _ as usize
        },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInstrumentCommissionRateField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInstrumentCommissionRateField>()))
                .OpenRatioByMoney as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInstrumentCommissionRateField),
            "::",
            stringify!(OpenRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInstrumentCommissionRateField>()))
                .OpenRatioByVolume as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInstrumentCommissionRateField),
            "::",
            stringify!(OpenRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInstrumentCommissionRateField>()))
                .CloseRatioByMoney as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInstrumentCommissionRateField),
            "::",
            stringify!(CloseRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInstrumentCommissionRateField>()))
                .CloseRatioByVolume as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInstrumentCommissionRateField),
            "::",
            stringify!(CloseRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInstrumentCommissionRateField>()))
                .CloseTodayRatioByMoney as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInstrumentCommissionRateField),
            "::",
            stringify!(CloseTodayRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInstrumentCommissionRateField>()))
                .CloseTodayRatioByVolume as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInstrumentCommissionRateField),
            "::",
            stringify!(CloseTodayRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInstrumentCommissionRateField>())).InstrumentID
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInstrumentCommissionRateField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcSyncingInstrumentCommissionRateField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "����\u{36c}���еĺ�Լ����Ȩ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncingInstrumentTradingRightField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "����Ȩ��"]
    pub TradingRight: TThostFtdcTradingRightType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSyncingInstrumentTradingRightField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSyncingInstrumentTradingRightField>(),
        138usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcSyncingInstrumentTradingRightField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSyncingInstrumentTradingRightField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcSyncingInstrumentTradingRightField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInstrumentTradingRightField>())).reserve1
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInstrumentTradingRightField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInstrumentTradingRightField>())).InvestorRange
                as *const _ as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInstrumentTradingRightField),
            "::",
            stringify!(InvestorRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInstrumentTradingRightField>())).BrokerID
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInstrumentTradingRightField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInstrumentTradingRightField>())).InvestorID
                as *const _ as usize
        },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInstrumentTradingRightField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInstrumentTradingRightField>())).TradingRight
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInstrumentTradingRightField),
            "::",
            stringify!(TradingRight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncingInstrumentTradingRightField>())).InstrumentID
                as *const _ as usize
        },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncingInstrumentTradingRightField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcSyncingInstrumentTradingRightField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryOrderField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "�������"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "��ʼʱ��"]
    pub InsertTimeStart: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub InsertTimeEnd: TThostFtdcTimeType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryOrderField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryOrderField>(),
        201usize,
        concat!("Size of: ", stringify!(CThostFtdcQryOrderField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryOrderField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryOrderField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOrderField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOrderField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOrderField>())).InvestorID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOrderField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOrderField>())).reserve1 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOrderField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOrderField>())).ExchangeID as *const _ as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOrderField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOrderField>())).OrderSysID as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOrderField),
            "::",
            stringify!(OrderSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOrderField>())).InsertTimeStart as *const _ as usize
        },
        85usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOrderField),
            "::",
            stringify!(InsertTimeStart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOrderField>())).InsertTimeEnd as *const _ as usize
        },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOrderField),
            "::",
            stringify!(InsertTimeEnd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOrderField>())).InvestUnitID as *const _ as usize
        },
        103usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOrderField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOrderField>())).InstrumentID as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOrderField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcQryOrderField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ�ɽ�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryTradeField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "�ɽ����"]
    pub TradeID: TThostFtdcTradeIDType,
    #[doc = "��ʼʱ��"]
    pub TradeTimeStart: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub TradeTimeEnd: TThostFtdcTimeType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryTradeField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryTradeField>(),
        201usize,
        concat!("Size of: ", stringify!(CThostFtdcQryTradeField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryTradeField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryTradeField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryTradeField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTradeField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryTradeField>())).InvestorID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTradeField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryTradeField>())).reserve1 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTradeField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryTradeField>())).ExchangeID as *const _ as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTradeField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcQryTradeField>())).TradeID as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTradeField),
            "::",
            stringify!(TradeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryTradeField>())).TradeTimeStart as *const _ as usize
        },
        85usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTradeField),
            "::",
            stringify!(TradeTimeStart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryTradeField>())).TradeTimeEnd as *const _ as usize
        },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTradeField),
            "::",
            stringify!(TradeTimeEnd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryTradeField>())).InvestUnitID as *const _ as usize
        },
        103usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTradeField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryTradeField>())).InstrumentID as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTradeField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcQryTradeField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯͶ���\u{7f3}\u{5b2}�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInvestorPositionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryInvestorPositionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryInvestorPositionField>(),
        162usize,
        concat!("Size of: ", stringify!(CThostFtdcQryInvestorPositionField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryInvestorPositionField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryInvestorPositionField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInvestorPositionField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInvestorPositionField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInvestorPositionField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInvestorPositionField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInvestorPositionField>())).reserve1 as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInvestorPositionField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInvestorPositionField>())).ExchangeID as *const _
                as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInvestorPositionField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInvestorPositionField>())).InvestUnitID as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInvestorPositionField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInvestorPositionField>())).InstrumentID as *const _
                as usize
        },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInvestorPositionField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcQryInvestorPositionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ�ʽ��˻�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryTradingAccountField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "ҵ������"]
    pub BizType: TThostFtdcBizTypeType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryTradingAccountField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryTradingAccountField>(),
        42usize,
        concat!("Size of: ", stringify!(CThostFtdcQryTradingAccountField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryTradingAccountField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryTradingAccountField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryTradingAccountField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTradingAccountField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryTradingAccountField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTradingAccountField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryTradingAccountField>())).CurrencyID as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTradingAccountField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryTradingAccountField>())).BizType as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTradingAccountField),
            "::",
            stringify!(BizType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryTradingAccountField>())).AccountID as *const _
                as usize
        },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTradingAccountField),
            "::",
            stringify!(AccountID)
        )
    );
}
#[doc = "��ѯͶ����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryInvestorField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryInvestorField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryInvestorField>(),
        24usize,
        concat!("Size of: ", stringify!(CThostFtdcQryInvestorField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryInvestorField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryInvestorField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInvestorField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInvestorField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInvestorField>())).InvestorID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInvestorField),
            "::",
            stringify!(InvestorID)
        )
    );
}
#[doc = "��ѯ���ױ���"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryTradingCodeField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "���ױ�������"]
    pub ClientIDType: TThostFtdcClientIDTypeType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryTradingCodeField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryTradingCodeField>(),
        62usize,
        concat!("Size of: ", stringify!(CThostFtdcQryTradingCodeField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryTradingCodeField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryTradingCodeField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryTradingCodeField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTradingCodeField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryTradingCodeField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTradingCodeField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryTradingCodeField>())).ExchangeID as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTradingCodeField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryTradingCodeField>())).ClientID as *const _ as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTradingCodeField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryTradingCodeField>())).ClientIDType as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTradingCodeField),
            "::",
            stringify!(ClientIDType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryTradingCodeField>())).InvestUnitID as *const _
                as usize
        },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTradingCodeField),
            "::",
            stringify!(InvestUnitID)
        )
    );
}
#[doc = "��ѯͶ������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryInvestorGroupField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryInvestorGroupField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryInvestorGroupField>(),
        11usize,
        concat!("Size of: ", stringify!(CThostFtdcQryInvestorGroupField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryInvestorGroupField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryInvestorGroupField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInvestorGroupField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInvestorGroupField),
            "::",
            stringify!(BrokerID)
        )
    );
}
#[doc = "��ѯ��Լ��\u{5a4}����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInstrumentMarginRateField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryInstrumentMarginRateField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryInstrumentMarginRateField>(),
        163usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcQryInstrumentMarginRateField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryInstrumentMarginRateField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryInstrumentMarginRateField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInstrumentMarginRateField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInstrumentMarginRateField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInstrumentMarginRateField>())).InvestorID
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInstrumentMarginRateField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInstrumentMarginRateField>())).reserve1 as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInstrumentMarginRateField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInstrumentMarginRateField>())).HedgeFlag as *const _
                as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInstrumentMarginRateField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInstrumentMarginRateField>())).ExchangeID
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInstrumentMarginRateField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInstrumentMarginRateField>())).InvestUnitID
                as *const _ as usize
        },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInstrumentMarginRateField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInstrumentMarginRateField>())).InstrumentID
                as *const _ as usize
        },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInstrumentMarginRateField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcQryInstrumentMarginRateField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ��������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInstrumentCommissionRateField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryInstrumentCommissionRateField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryInstrumentCommissionRateField>(),
        162usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcQryInstrumentCommissionRateField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryInstrumentCommissionRateField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryInstrumentCommissionRateField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInstrumentCommissionRateField>())).BrokerID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInstrumentCommissionRateField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInstrumentCommissionRateField>())).InvestorID
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInstrumentCommissionRateField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInstrumentCommissionRateField>())).reserve1
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInstrumentCommissionRateField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInstrumentCommissionRateField>())).ExchangeID
                as *const _ as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInstrumentCommissionRateField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInstrumentCommissionRateField>())).InvestUnitID
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInstrumentCommissionRateField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInstrumentCommissionRateField>())).InstrumentID
                as *const _ as usize
        },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInstrumentCommissionRateField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcQryInstrumentCommissionRateField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ��Լ����Ȩ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInstrumentTradingRightField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryInstrumentTradingRightField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryInstrumentTradingRightField>(),
        136usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcQryInstrumentTradingRightField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryInstrumentTradingRightField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryInstrumentTradingRightField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInstrumentTradingRightField>())).BrokerID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInstrumentTradingRightField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInstrumentTradingRightField>())).InvestorID
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInstrumentTradingRightField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInstrumentTradingRightField>())).reserve1
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInstrumentTradingRightField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInstrumentTradingRightField>())).InstrumentID
                as *const _ as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInstrumentTradingRightField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcQryInstrumentTradingRightField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ���\u{379}�˾"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryBrokerField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryBrokerField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryBrokerField>(),
        11usize,
        concat!("Size of: ", stringify!(CThostFtdcQryBrokerField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryBrokerField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryBrokerField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryBrokerField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryBrokerField),
            "::",
            stringify!(BrokerID)
        )
    );
}
#[doc = "��ѯ����Ա"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryTraderField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryTraderField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryTraderField>(),
        41usize,
        concat!("Size of: ", stringify!(CThostFtdcQryTraderField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryTraderField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryTraderField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryTraderField>())).ExchangeID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTraderField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryTraderField>())).ParticipantID as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTraderField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryTraderField>())).TraderID as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTraderField),
            "::",
            stringify!(TraderID)
        )
    );
}
#[doc = "��ѯ�����û�����Ȩ��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQrySuperUserFunctionField {
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQrySuperUserFunctionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQrySuperUserFunctionField>(),
        16usize,
        concat!("Size of: ", stringify!(CThostFtdcQrySuperUserFunctionField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQrySuperUserFunctionField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQrySuperUserFunctionField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQrySuperUserFunctionField>())).UserID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQrySuperUserFunctionField),
            "::",
            stringify!(UserID)
        )
    );
}
#[doc = "��ѯ�û��Ự"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryUserSessionField {
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryUserSessionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryUserSessionField>(),
        36usize,
        concat!("Size of: ", stringify!(CThostFtdcQryUserSessionField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryUserSessionField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryUserSessionField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryUserSessionField>())).FrontID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryUserSessionField),
            "::",
            stringify!(FrontID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryUserSessionField>())).SessionID as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryUserSessionField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryUserSessionField>())).BrokerID as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryUserSessionField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryUserSessionField>())).UserID as *const _ as usize
        },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryUserSessionField),
            "::",
            stringify!(UserID)
        )
    );
}
#[doc = "��ѯ���\u{379}�˾��Ա����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryPartBrokerField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryPartBrokerField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryPartBrokerField>(),
        31usize,
        concat!("Size of: ", stringify!(CThostFtdcQryPartBrokerField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryPartBrokerField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryPartBrokerField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryPartBrokerField>())).ExchangeID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryPartBrokerField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryPartBrokerField>())).BrokerID as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryPartBrokerField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryPartBrokerField>())).ParticipantID as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryPartBrokerField),
            "::",
            stringify!(ParticipantID)
        )
    );
}
#[doc = "��ѯǰ��״\u{32c}"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryFrontStatusField {
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryFrontStatusField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryFrontStatusField>(),
        4usize,
        concat!("Size of: ", stringify!(CThostFtdcQryFrontStatusField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryFrontStatusField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryFrontStatusField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryFrontStatusField>())).FrontID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryFrontStatusField),
            "::",
            stringify!(FrontID)
        )
    );
}
#[doc = "��ѯ����������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryExchangeOrderField {
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryExchangeOrderField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryExchangeOrderField>(),
        164usize,
        concat!("Size of: ", stringify!(CThostFtdcQryExchangeOrderField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryExchangeOrderField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryExchangeOrderField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeOrderField>())).ParticipantID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeOrderField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeOrderField>())).ClientID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeOrderField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeOrderField>())).reserve1 as *const _
                as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeOrderField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeOrderField>())).ExchangeID as *const _
                as usize
        },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeOrderField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeOrderField>())).TraderID as *const _
                as usize
        },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeOrderField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeOrderField>())).ExchangeInstID as *const _
                as usize
        },
        83usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeOrderField),
            "::",
            stringify!(ExchangeInstID)
        )
    );
}
impl Default for CThostFtdcQryExchangeOrderField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ��������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryOrderActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryOrderActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryOrderActionField>(),
        33usize,
        concat!("Size of: ", stringify!(CThostFtdcQryOrderActionField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryOrderActionField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryOrderActionField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOrderActionField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOrderActionField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOrderActionField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOrderActionField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOrderActionField>())).ExchangeID as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOrderActionField),
            "::",
            stringify!(ExchangeID)
        )
    );
}
#[doc = "��ѯ��������������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryExchangeOrderActionField {
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryExchangeOrderActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryExchangeOrderActionField>(),
        52usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcQryExchangeOrderActionField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryExchangeOrderActionField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryExchangeOrderActionField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeOrderActionField>())).ParticipantID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeOrderActionField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeOrderActionField>())).ClientID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeOrderActionField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeOrderActionField>())).ExchangeID as *const _
                as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeOrderActionField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeOrderActionField>())).TraderID as *const _
                as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeOrderActionField),
            "::",
            stringify!(TraderID)
        )
    );
}
#[doc = "��ѯ�����û�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQrySuperUserField {
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQrySuperUserField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQrySuperUserField>(),
        16usize,
        concat!("Size of: ", stringify!(CThostFtdcQrySuperUserField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQrySuperUserField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQrySuperUserField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQrySuperUserField>())).UserID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQrySuperUserField),
            "::",
            stringify!(UserID)
        )
    );
}
#[doc = "��ѯ������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryExchangeField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryExchangeField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryExchangeField>(),
        9usize,
        concat!("Size of: ", stringify!(CThostFtdcQryExchangeField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryExchangeField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryExchangeField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeField>())).ExchangeID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeField),
            "::",
            stringify!(ExchangeID)
        )
    );
}
#[doc = "��ѯ��Ʒ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryProductField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��Ʒ����"]
    pub ProductClass: TThostFtdcProductClassType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryProductField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryProductField>(),
        122usize,
        concat!("Size of: ", stringify!(CThostFtdcQryProductField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryProductField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryProductField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryProductField>())).reserve1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryProductField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryProductField>())).ProductClass as *const _ as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryProductField),
            "::",
            stringify!(ProductClass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryProductField>())).ExchangeID as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryProductField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryProductField>())).ProductID as *const _ as usize
        },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryProductField),
            "::",
            stringify!(ProductID)
        )
    );
}
impl Default for CThostFtdcQryProductField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ��Լ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInstrumentField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve3: TThostFtdcOldInstrumentIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryInstrumentField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryInstrumentField>(),
        345usize,
        concat!("Size of: ", stringify!(CThostFtdcQryInstrumentField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryInstrumentField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryInstrumentField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInstrumentField>())).reserve1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInstrumentField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInstrumentField>())).ExchangeID as *const _ as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInstrumentField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInstrumentField>())).reserve2 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInstrumentField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInstrumentField>())).reserve3 as *const _ as usize
        },
        71usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInstrumentField),
            "::",
            stringify!(reserve3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInstrumentField>())).InstrumentID as *const _
                as usize
        },
        102usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInstrumentField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInstrumentField>())).ExchangeInstID as *const _
                as usize
        },
        183usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInstrumentField),
            "::",
            stringify!(ExchangeInstID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInstrumentField>())).ProductID as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInstrumentField),
            "::",
            stringify!(ProductID)
        )
    );
}
impl Default for CThostFtdcQryInstrumentField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryDepthMarketDataField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryDepthMarketDataField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryDepthMarketDataField>(),
        121usize,
        concat!("Size of: ", stringify!(CThostFtdcQryDepthMarketDataField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryDepthMarketDataField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryDepthMarketDataField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryDepthMarketDataField>())).reserve1 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryDepthMarketDataField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryDepthMarketDataField>())).ExchangeID as *const _
                as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryDepthMarketDataField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryDepthMarketDataField>())).InstrumentID as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryDepthMarketDataField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcQryDepthMarketDataField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ���\u{379}�˾�û�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryBrokerUserField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryBrokerUserField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryBrokerUserField>(),
        27usize,
        concat!("Size of: ", stringify!(CThostFtdcQryBrokerUserField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryBrokerUserField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryBrokerUserField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryBrokerUserField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryBrokerUserField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryBrokerUserField>())).UserID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryBrokerUserField),
            "::",
            stringify!(UserID)
        )
    );
}
#[doc = "��ѯ���\u{379}�˾�û�Ȩ��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryBrokerUserFunctionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryBrokerUserFunctionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryBrokerUserFunctionField>(),
        27usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcQryBrokerUserFunctionField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryBrokerUserFunctionField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryBrokerUserFunctionField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryBrokerUserFunctionField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryBrokerUserFunctionField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryBrokerUserFunctionField>())).UserID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryBrokerUserFunctionField),
            "::",
            stringify!(UserID)
        )
    );
}
#[doc = "��ѯ����Ա���\u{33b}�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryTraderOfferField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryTraderOfferField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryTraderOfferField>(),
        41usize,
        concat!("Size of: ", stringify!(CThostFtdcQryTraderOfferField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryTraderOfferField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryTraderOfferField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryTraderOfferField>())).ExchangeID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTraderOfferField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryTraderOfferField>())).ParticipantID as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTraderOfferField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryTraderOfferField>())).TraderID as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTraderOfferField),
            "::",
            stringify!(TraderID)
        )
    );
}
#[doc = "��ѯ�������ˮ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQrySyncDepositField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�������ˮ��"]
    pub DepositSeqNo: TThostFtdcDepositSeqNoType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQrySyncDepositField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQrySyncDepositField>(),
        26usize,
        concat!("Size of: ", stringify!(CThostFtdcQrySyncDepositField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQrySyncDepositField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQrySyncDepositField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQrySyncDepositField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQrySyncDepositField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQrySyncDepositField>())).DepositSeqNo as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQrySyncDepositField),
            "::",
            stringify!(DepositSeqNo)
        )
    );
}
#[doc = "��ѯͶ���\u{7fd}�����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQrySettlementInfoField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQrySettlementInfoField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQrySettlementInfoField>(),
        50usize,
        concat!("Size of: ", stringify!(CThostFtdcQrySettlementInfoField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQrySettlementInfoField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQrySettlementInfoField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQrySettlementInfoField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQrySettlementInfoField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQrySettlementInfoField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQrySettlementInfoField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQrySettlementInfoField>())).TradingDay as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQrySettlementInfoField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQrySettlementInfoField>())).AccountID as *const _
                as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQrySettlementInfoField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQrySettlementInfoField>())).CurrencyID as *const _
                as usize
        },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQrySettlementInfoField),
            "::",
            stringify!(CurrencyID)
        )
    );
}
#[doc = "��ѯ��������\u{5a4}����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryExchangeMarginRateField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryExchangeMarginRateField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryExchangeMarginRateField>(),
        133usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcQryExchangeMarginRateField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryExchangeMarginRateField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryExchangeMarginRateField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeMarginRateField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeMarginRateField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeMarginRateField>())).reserve1 as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeMarginRateField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeMarginRateField>())).HedgeFlag as *const _
                as usize
        },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeMarginRateField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeMarginRateField>())).ExchangeID as *const _
                as usize
        },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeMarginRateField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeMarginRateField>())).InstrumentID
                as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeMarginRateField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcQryExchangeMarginRateField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ������������\u{5a4}����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryExchangeMarginRateAdjustField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryExchangeMarginRateAdjustField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryExchangeMarginRateAdjustField>(),
        124usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcQryExchangeMarginRateAdjustField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryExchangeMarginRateAdjustField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryExchangeMarginRateAdjustField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeMarginRateAdjustField>())).BrokerID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeMarginRateAdjustField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeMarginRateAdjustField>())).reserve1
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeMarginRateAdjustField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeMarginRateAdjustField>())).HedgeFlag
                as *const _ as usize
        },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeMarginRateAdjustField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeMarginRateAdjustField>())).InstrumentID
                as *const _ as usize
        },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeMarginRateAdjustField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcQryExchangeMarginRateAdjustField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryExchangeRateField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Դ����"]
    pub FromCurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "Ŀ�����"]
    pub ToCurrencyID: TThostFtdcCurrencyIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryExchangeRateField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryExchangeRateField>(),
        19usize,
        concat!("Size of: ", stringify!(CThostFtdcQryExchangeRateField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryExchangeRateField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryExchangeRateField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeRateField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeRateField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeRateField>())).FromCurrencyID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeRateField),
            "::",
            stringify!(FromCurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeRateField>())).ToCurrencyID as *const _
                as usize
        },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeRateField),
            "::",
            stringify!(ToCurrencyID)
        )
    );
}
#[doc = "��ѯ������Ѻ��ˮ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQrySyncFundMortgageField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "������Ѻ��ˮ��"]
    pub MortgageSeqNo: TThostFtdcDepositSeqNoType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQrySyncFundMortgageField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQrySyncFundMortgageField>(),
        26usize,
        concat!("Size of: ", stringify!(CThostFtdcQrySyncFundMortgageField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQrySyncFundMortgageField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQrySyncFundMortgageField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQrySyncFundMortgageField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQrySyncFundMortgageField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQrySyncFundMortgageField>())).MortgageSeqNo as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQrySyncFundMortgageField),
            "::",
            stringify!(MortgageSeqNo)
        )
    );
}
#[doc = "��ѯ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryHisOrderField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "�������"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "��ʼʱ��"]
    pub InsertTimeStart: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub InsertTimeEnd: TThostFtdcTimeType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryHisOrderField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryHisOrderField>(),
        200usize,
        concat!("Size of: ", stringify!(CThostFtdcQryHisOrderField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryHisOrderField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryHisOrderField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryHisOrderField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryHisOrderField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryHisOrderField>())).InvestorID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryHisOrderField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryHisOrderField>())).reserve1 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryHisOrderField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryHisOrderField>())).ExchangeID as *const _ as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryHisOrderField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryHisOrderField>())).OrderSysID as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryHisOrderField),
            "::",
            stringify!(OrderSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryHisOrderField>())).InsertTimeStart as *const _
                as usize
        },
        85usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryHisOrderField),
            "::",
            stringify!(InsertTimeStart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryHisOrderField>())).InsertTimeEnd as *const _
                as usize
        },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryHisOrderField),
            "::",
            stringify!(InsertTimeEnd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryHisOrderField>())).TradingDay as *const _ as usize
        },
        103usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryHisOrderField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryHisOrderField>())).SettlementID as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryHisOrderField),
            "::",
            stringify!(SettlementID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryHisOrderField>())).InstrumentID as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryHisOrderField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcQryHisOrderField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ǰ��Ȩ��Լ��С��\u{5a4}��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOptionInstrMiniMarginField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��λ���\u{5a3}���Ȩ��Լ��С��\u{5a4}��"]
    pub MinMargin: TThostFtdcMoneyType,
    #[doc = "ȡ\u{5b5}��ʽ"]
    pub ValueMethod: TThostFtdcValueMethodType,
    #[doc = "�Ƿ���潻������ȡ"]
    pub IsRelative: TThostFtdcBoolType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcOptionInstrMiniMarginField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcOptionInstrMiniMarginField>(),
        160usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcOptionInstrMiniMarginField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcOptionInstrMiniMarginField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcOptionInstrMiniMarginField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrMiniMarginField>())).reserve1 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrMiniMarginField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrMiniMarginField>())).InvestorRange
                as *const _ as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrMiniMarginField),
            "::",
            stringify!(InvestorRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrMiniMarginField>())).BrokerID as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrMiniMarginField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrMiniMarginField>())).InvestorID as *const _
                as usize
        },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrMiniMarginField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrMiniMarginField>())).MinMargin as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrMiniMarginField),
            "::",
            stringify!(MinMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrMiniMarginField>())).ValueMethod as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrMiniMarginField),
            "::",
            stringify!(ValueMethod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrMiniMarginField>())).IsRelative as *const _
                as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrMiniMarginField),
            "::",
            stringify!(IsRelative)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrMiniMarginField>())).InstrumentID
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrMiniMarginField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcOptionInstrMiniMarginField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ǰ��Ȩ��Լ��\u{5a4}�����ϵ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOptionInstrMarginAdjustField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ����ͷ��\u{5a4}�����ϵ��"]
    pub SShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "Ͷ����ͷ��\u{5a4}�����ϵ��"]
    pub SShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "��\u{5b5}��ͷ��\u{5a4}�����ϵ��"]
    pub HShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��\u{5b5}��ͷ��\u{5a4}�����ϵ��"]
    pub HShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "������ͷ��\u{5a4}�����ϵ��"]
    pub AShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "������ͷ��\u{5a4}�����ϵ��"]
    pub AShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "�Ƿ���潻������ȡ"]
    pub IsRelative: TThostFtdcBoolType,
    #[doc = "�����\u{33f}�ͷ��\u{5a4}�����ϵ��"]
    pub MShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "�����\u{33f}�ͷ��\u{5a4}�����ϵ��"]
    pub MShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcOptionInstrMarginAdjustField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcOptionInstrMarginAdjustField>(),
        216usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcOptionInstrMarginAdjustField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcOptionInstrMarginAdjustField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcOptionInstrMarginAdjustField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrMarginAdjustField>())).reserve1 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrMarginAdjustField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrMarginAdjustField>())).InvestorRange
                as *const _ as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrMarginAdjustField),
            "::",
            stringify!(InvestorRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrMarginAdjustField>())).BrokerID as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrMarginAdjustField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrMarginAdjustField>())).InvestorID
                as *const _ as usize
        },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrMarginAdjustField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrMarginAdjustField>()))
                .SShortMarginRatioByMoney as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrMarginAdjustField),
            "::",
            stringify!(SShortMarginRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrMarginAdjustField>()))
                .SShortMarginRatioByVolume as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrMarginAdjustField),
            "::",
            stringify!(SShortMarginRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrMarginAdjustField>()))
                .HShortMarginRatioByMoney as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrMarginAdjustField),
            "::",
            stringify!(HShortMarginRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrMarginAdjustField>()))
                .HShortMarginRatioByVolume as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrMarginAdjustField),
            "::",
            stringify!(HShortMarginRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrMarginAdjustField>()))
                .AShortMarginRatioByMoney as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrMarginAdjustField),
            "::",
            stringify!(AShortMarginRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrMarginAdjustField>()))
                .AShortMarginRatioByVolume as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrMarginAdjustField),
            "::",
            stringify!(AShortMarginRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrMarginAdjustField>())).IsRelative
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrMarginAdjustField),
            "::",
            stringify!(IsRelative)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrMarginAdjustField>()))
                .MShortMarginRatioByMoney as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrMarginAdjustField),
            "::",
            stringify!(MShortMarginRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrMarginAdjustField>()))
                .MShortMarginRatioByVolume as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrMarginAdjustField),
            "::",
            stringify!(MShortMarginRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrMarginAdjustField>())).InstrumentID
                as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrMarginAdjustField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcOptionInstrMarginAdjustField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ǰ��Ȩ��Լ�����ѵ���ϸ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOptionInstrCommRateField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "������������"]
    pub OpenRatioByMoney: TThostFtdcRatioType,
    #[doc = "����������"]
    pub OpenRatioByVolume: TThostFtdcRatioType,
    #[doc = "ƽ����������"]
    pub CloseRatioByMoney: TThostFtdcRatioType,
    #[doc = "ƽ��������"]
    pub CloseRatioByVolume: TThostFtdcRatioType,
    #[doc = "ƽ����������"]
    pub CloseTodayRatioByMoney: TThostFtdcRatioType,
    #[doc = "ƽ��������"]
    pub CloseTodayRatioByVolume: TThostFtdcRatioType,
    #[doc = "\u{5b4}����������"]
    pub StrikeRatioByMoney: TThostFtdcRatioType,
    #[doc = "\u{5b4}��������"]
    pub StrikeRatioByVolume: TThostFtdcRatioType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcOptionInstrCommRateField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcOptionInstrCommRateField>(),
        232usize,
        concat!("Size of: ", stringify!(CThostFtdcOptionInstrCommRateField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcOptionInstrCommRateField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcOptionInstrCommRateField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrCommRateField>())).reserve1 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrCommRateField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrCommRateField>())).InvestorRange as *const _
                as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrCommRateField),
            "::",
            stringify!(InvestorRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrCommRateField>())).BrokerID as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrCommRateField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrCommRateField>())).InvestorID as *const _
                as usize
        },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrCommRateField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrCommRateField>())).OpenRatioByMoney
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrCommRateField),
            "::",
            stringify!(OpenRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrCommRateField>())).OpenRatioByVolume
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrCommRateField),
            "::",
            stringify!(OpenRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrCommRateField>())).CloseRatioByMoney
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrCommRateField),
            "::",
            stringify!(CloseRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrCommRateField>())).CloseRatioByVolume
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrCommRateField),
            "::",
            stringify!(CloseRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrCommRateField>())).CloseTodayRatioByMoney
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrCommRateField),
            "::",
            stringify!(CloseTodayRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrCommRateField>())).CloseTodayRatioByVolume
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrCommRateField),
            "::",
            stringify!(CloseTodayRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrCommRateField>())).StrikeRatioByMoney
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrCommRateField),
            "::",
            stringify!(StrikeRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrCommRateField>())).StrikeRatioByVolume
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrCommRateField),
            "::",
            stringify!(StrikeRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrCommRateField>())).ExchangeID as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrCommRateField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrCommRateField>())).InvestUnitID as *const _
                as usize
        },
        129usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrCommRateField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrCommRateField>())).InstrumentID as *const _
                as usize
        },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrCommRateField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcOptionInstrCommRateField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��Ȩ���׳ɱ�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOptionInstrTradeCostField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��Ȩ��Լ��\u{5a4}�\u{32ef1}䲿��"]
    pub FixedMargin: TThostFtdcMoneyType,
    #[doc = "��Ȩ��Լ��С��\u{5a4}��"]
    pub MiniMargin: TThostFtdcMoneyType,
    #[doc = "��Ȩ��ԼȨ����"]
    pub Royalty: TThostFtdcMoneyType,
    #[doc = "��������Ȩ��Լ��\u{5a4}�\u{32ef1}䲿��"]
    pub ExchFixedMargin: TThostFtdcMoneyType,
    #[doc = "��������Ȩ��Լ��С��\u{5a4}��"]
    pub ExchMiniMargin: TThostFtdcMoneyType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcOptionInstrTradeCostField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcOptionInstrTradeCostField>(),
        208usize,
        concat!("Size of: ", stringify!(CThostFtdcOptionInstrTradeCostField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcOptionInstrTradeCostField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcOptionInstrTradeCostField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrTradeCostField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrTradeCostField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrTradeCostField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrTradeCostField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrTradeCostField>())).reserve1 as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrTradeCostField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrTradeCostField>())).HedgeFlag as *const _
                as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrTradeCostField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrTradeCostField>())).FixedMargin as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrTradeCostField),
            "::",
            stringify!(FixedMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrTradeCostField>())).MiniMargin as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrTradeCostField),
            "::",
            stringify!(MiniMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrTradeCostField>())).Royalty as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrTradeCostField),
            "::",
            stringify!(Royalty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrTradeCostField>())).ExchFixedMargin
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrTradeCostField),
            "::",
            stringify!(ExchFixedMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrTradeCostField>())).ExchMiniMargin
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrTradeCostField),
            "::",
            stringify!(ExchMiniMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrTradeCostField>())).ExchangeID as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrTradeCostField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrTradeCostField>())).InvestUnitID as *const _
                as usize
        },
        105usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrTradeCostField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrTradeCostField>())).InstrumentID as *const _
                as usize
        },
        122usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrTradeCostField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcOptionInstrTradeCostField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��Ȩ���׳ɱ���ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryOptionInstrTradeCostField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��Ȩ��Լ����"]
    pub InputPrice: TThostFtdcPriceType,
    #[doc = "��ļ۸�,��0����������"]
    pub UnderlyingPrice: TThostFtdcPriceType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryOptionInstrTradeCostField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryOptionInstrTradeCostField>(),
        184usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcQryOptionInstrTradeCostField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryOptionInstrTradeCostField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryOptionInstrTradeCostField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOptionInstrTradeCostField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOptionInstrTradeCostField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOptionInstrTradeCostField>())).InvestorID
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOptionInstrTradeCostField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOptionInstrTradeCostField>())).reserve1 as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOptionInstrTradeCostField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOptionInstrTradeCostField>())).HedgeFlag as *const _
                as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOptionInstrTradeCostField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOptionInstrTradeCostField>())).InputPrice
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOptionInstrTradeCostField),
            "::",
            stringify!(InputPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOptionInstrTradeCostField>())).UnderlyingPrice
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOptionInstrTradeCostField),
            "::",
            stringify!(UnderlyingPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOptionInstrTradeCostField>())).ExchangeID
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOptionInstrTradeCostField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOptionInstrTradeCostField>())).InvestUnitID
                as *const _ as usize
        },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOptionInstrTradeCostField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOptionInstrTradeCostField>())).InstrumentID
                as *const _ as usize
        },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOptionInstrTradeCostField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcQryOptionInstrTradeCostField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��Ȩ�������ʲ�ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryOptionInstrCommRateField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryOptionInstrCommRateField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryOptionInstrCommRateField>(),
        162usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcQryOptionInstrCommRateField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryOptionInstrCommRateField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryOptionInstrCommRateField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOptionInstrCommRateField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOptionInstrCommRateField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOptionInstrCommRateField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOptionInstrCommRateField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOptionInstrCommRateField>())).reserve1 as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOptionInstrCommRateField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOptionInstrCommRateField>())).ExchangeID as *const _
                as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOptionInstrCommRateField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOptionInstrCommRateField>())).InvestUnitID
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOptionInstrCommRateField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOptionInstrCommRateField>())).InstrumentID
                as *const _ as usize
        },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOptionInstrCommRateField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcQryOptionInstrCommRateField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��\u{5b8}�\u{5bb}�\u{5b8}��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcIndexPriceField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "\u{5b8}���\u{5bb}����\u{33c}�"]
    pub ClosePrice: TThostFtdcPriceType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcIndexPriceField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcIndexPriceField>(),
        144usize,
        concat!("Size of: ", stringify!(CThostFtdcIndexPriceField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcIndexPriceField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcIndexPriceField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcIndexPriceField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcIndexPriceField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcIndexPriceField>())).reserve1 as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcIndexPriceField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcIndexPriceField>())).ClosePrice as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcIndexPriceField),
            "::",
            stringify!(ClosePrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcIndexPriceField>())).InstrumentID as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcIndexPriceField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcIndexPriceField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�����\u{5b4}������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInputExecOrderField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "\u{5b4}����������"]
    pub ExecOrderRef: TThostFtdcOrderRefType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "��ƽ��־"]
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "\u{5b4}������"]
    pub ActionType: TThostFtdcActionTypeType,
    #[doc = "����ͷ������ĳ\u{5b2}\u{5b7}���"]
    pub PosiDirection: TThostFtdcPosiDirectionType,
    #[doc = "��Ȩ��Ȩ���Ƿ����ڻ�ͷ��ı��,���\u{5b6}��ѷ���"]
    pub ReservePositionFlag: TThostFtdcExecOrderPositionFlagType,
    #[doc = "��Ȩ��Ȩ�����ɵ�ͷ���Ƿ��Զ�ƽ��"]
    pub CloseFlag: TThostFtdcExecOrderCloseFlagType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "�ʽ��˺�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "���ױ���"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcInputExecOrderField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcInputExecOrderField>(),
        324usize,
        concat!("Size of: ", stringify!(CThostFtdcInputExecOrderField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcInputExecOrderField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcInputExecOrderField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderField>())).reserve1 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderField>())).ExecOrderRef as *const _
                as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderField),
            "::",
            stringify!(ExecOrderRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderField>())).UserID as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderField>())).Volume as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderField),
            "::",
            stringify!(Volume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderField>())).RequestID as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderField>())).BusinessUnit as *const _
                as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderField),
            "::",
            stringify!(BusinessUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderField>())).OffsetFlag as *const _
                as usize
        },
        113usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderField),
            "::",
            stringify!(OffsetFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderField>())).HedgeFlag as *const _ as usize
        },
        114usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderField>())).ActionType as *const _
                as usize
        },
        115usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderField),
            "::",
            stringify!(ActionType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderField>())).PosiDirection as *const _
                as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderField),
            "::",
            stringify!(PosiDirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderField>())).ReservePositionFlag
                as *const _ as usize
        },
        117usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderField),
            "::",
            stringify!(ReservePositionFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderField>())).CloseFlag as *const _ as usize
        },
        118usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderField),
            "::",
            stringify!(CloseFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderField>())).ExchangeID as *const _
                as usize
        },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderField>())).InvestUnitID as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderField>())).AccountID as *const _ as usize
        },
        145usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderField>())).CurrencyID as *const _
                as usize
        },
        158usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderField>())).ClientID as *const _ as usize
        },
        162usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderField>())).reserve2 as *const _ as usize
        },
        173usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderField>())).MacAddress as *const _
                as usize
        },
        189usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderField>())).InstrumentID as *const _
                as usize
        },
        210usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderField>())).IPAddress as *const _ as usize
        },
        291usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcInputExecOrderField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "����\u{5b4}���������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInputExecOrderActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "\u{5b4}�������������"]
    pub ExecOrderActionRef: TThostFtdcOrderActionRefType,
    #[doc = "\u{5b4}����������"]
    pub ExecOrderRef: TThostFtdcOrderRefType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "\u{5b4}������������"]
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    #[doc = "������־"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcInputExecOrderActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcInputExecOrderActionField>(),
        304usize,
        concat!("Size of: ", stringify!(CThostFtdcInputExecOrderActionField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcInputExecOrderActionField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcInputExecOrderActionField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderActionField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderActionField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderActionField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderActionField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderActionField>())).ExecOrderActionRef
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderActionField),
            "::",
            stringify!(ExecOrderActionRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderActionField>())).ExecOrderRef as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderActionField),
            "::",
            stringify!(ExecOrderRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderActionField>())).RequestID as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderActionField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderActionField>())).FrontID as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderActionField),
            "::",
            stringify!(FrontID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderActionField>())).SessionID as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderActionField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderActionField>())).ExchangeID as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderActionField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderActionField>())).ExecOrderSysID
                as *const _ as usize
        },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderActionField),
            "::",
            stringify!(ExecOrderSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderActionField>())).ActionFlag as *const _
                as usize
        },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderActionField),
            "::",
            stringify!(ActionFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderActionField>())).UserID as *const _
                as usize
        },
        87usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderActionField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderActionField>())).reserve1 as *const _
                as usize
        },
        103usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderActionField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderActionField>())).InvestUnitID as *const _
                as usize
        },
        134usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderActionField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderActionField>())).reserve2 as *const _
                as usize
        },
        151usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderActionField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderActionField>())).MacAddress as *const _
                as usize
        },
        167usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderActionField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderActionField>())).InstrumentID as *const _
                as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderActionField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputExecOrderActionField>())).IPAddress as *const _
                as usize
        },
        269usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputExecOrderActionField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcInputExecOrderActionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "\u{5b4}������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExecOrderField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "\u{5b4}����������"]
    pub ExecOrderRef: TThostFtdcOrderRefType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "��ƽ��־"]
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "\u{5b4}������"]
    pub ActionType: TThostFtdcActionTypeType,
    #[doc = "����ͷ������ĳ\u{5b2}\u{5b7}���"]
    pub PosiDirection: TThostFtdcPosiDirectionType,
    #[doc = "��Ȩ��Ȩ���Ƿ����ڻ�ͷ��ı��,���\u{5b6}��ѷ���"]
    pub ReservePositionFlag: TThostFtdcExecOrderPositionFlagType,
    #[doc = "��Ȩ��Ȩ�����ɵ�ͷ���Ƿ��Զ�ƽ��"]
    pub CloseFlag: TThostFtdcExecOrderCloseFlagType,
    #[doc = "����\u{5b4}��������"]
    pub ExecOrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "\u{5b4}�������ύ״\u{32c}"]
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    #[doc = "������ʾ���"]
    pub NotifySequence: TThostFtdcSequenceNoType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "\u{5b4}��������"]
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    #[doc = "��������"]
    pub InsertDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub InsertTime: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub CancelTime: TThostFtdcTimeType,
    #[doc = "\u{5b4}�н��"]
    pub ExecResult: TThostFtdcExecResultType,
    #[doc = "�����Ա���"]
    pub ClearingPartID: TThostFtdcParticipantIDType,
    #[doc = "���"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�û��˲�Ʒ��Ϣ"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "״\u{32c}��Ϣ"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "�����û�����"]
    pub ActiveUserID: TThostFtdcUserIDType,
    #[doc = "���\u{379}�˾�������"]
    pub BrokerExecOrderSeq: TThostFtdcSequenceNoType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "�ʽ��˺�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve3: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcExecOrderField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcExecOrderField>(),
        704usize,
        concat!("Size of: ", stringify!(CThostFtdcExecOrderField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcExecOrderField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcExecOrderField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).InvestorID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).reserve1 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).ExecOrderRef as *const _ as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(ExecOrderRef)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).UserID as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).Volume as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(Volume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).RequestID as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).BusinessUnit as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(BusinessUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).OffsetFlag as *const _ as usize
        },
        113usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(OffsetFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).HedgeFlag as *const _ as usize
        },
        114usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).ActionType as *const _ as usize
        },
        115usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(ActionType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).PosiDirection as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(PosiDirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).ReservePositionFlag as *const _
                as usize
        },
        117usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(ReservePositionFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).CloseFlag as *const _ as usize
        },
        118usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(CloseFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).ExecOrderLocalID as *const _
                as usize
        },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(ExecOrderLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).ExchangeID as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).ParticipantID as *const _ as usize
        },
        141usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).ClientID as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).reserve2 as *const _ as usize
        },
        163usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).TraderID as *const _ as usize
        },
        194usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).InstallID as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).OrderSubmitStatus as *const _
                as usize
        },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(OrderSubmitStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).NotifySequence as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(NotifySequence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).TradingDay as *const _ as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).SettlementID as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(SettlementID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).ExecOrderSysID as *const _ as usize
        },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(ExecOrderSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).InsertDate as *const _ as usize
        },
        265usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(InsertDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).InsertTime as *const _ as usize
        },
        274usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(InsertTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).CancelTime as *const _ as usize
        },
        283usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(CancelTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).ExecResult as *const _ as usize
        },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(ExecResult)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).ClearingPartID as *const _ as usize
        },
        293usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(ClearingPartID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).SequenceNo as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(SequenceNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).FrontID as *const _ as usize
        },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(FrontID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).SessionID as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).UserProductInfo as *const _
                as usize
        },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(UserProductInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).StatusMsg as *const _ as usize
        },
        327usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(StatusMsg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).ActiveUserID as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(ActiveUserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).BrokerExecOrderSeq as *const _
                as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(BrokerExecOrderSeq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).BranchID as *const _ as usize
        },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(BranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).InvestUnitID as *const _ as usize
        },
        437usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).AccountID as *const _ as usize
        },
        454usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).CurrencyID as *const _ as usize
        },
        467usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).reserve3 as *const _ as usize
        },
        471usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(reserve3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).MacAddress as *const _ as usize
        },
        487usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).InstrumentID as *const _ as usize
        },
        508usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).ExchangeInstID as *const _ as usize
        },
        589usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(ExchangeInstID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderField>())).IPAddress as *const _ as usize
        },
        670usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcExecOrderField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "\u{5b4}���������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExecOrderActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "\u{5b4}�������������"]
    pub ExecOrderActionRef: TThostFtdcOrderActionRefType,
    #[doc = "\u{5b4}����������"]
    pub ExecOrderRef: TThostFtdcOrderRefType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "\u{5b4}������������"]
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    #[doc = "������־"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "��������"]
    pub ActionDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub ActionTime: TThostFtdcTimeType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "����\u{5b4}��������"]
    pub ExecOrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "�������ر��"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "��������״\u{32c}"]
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "\u{5b4}������"]
    pub ActionType: TThostFtdcActionTypeType,
    #[doc = "״\u{32c}��Ϣ"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcExecOrderActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcExecOrderActionField>(),
        508usize,
        concat!("Size of: ", stringify!(CThostFtdcExecOrderActionField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcExecOrderActionField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcExecOrderActionField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderActionField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderActionField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderActionField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderActionField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderActionField>())).ExecOrderActionRef
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderActionField),
            "::",
            stringify!(ExecOrderActionRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderActionField>())).ExecOrderRef as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderActionField),
            "::",
            stringify!(ExecOrderRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderActionField>())).RequestID as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderActionField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderActionField>())).FrontID as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderActionField),
            "::",
            stringify!(FrontID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderActionField>())).SessionID as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderActionField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderActionField>())).ExchangeID as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderActionField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderActionField>())).ExecOrderSysID as *const _
                as usize
        },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderActionField),
            "::",
            stringify!(ExecOrderSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderActionField>())).ActionFlag as *const _
                as usize
        },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderActionField),
            "::",
            stringify!(ActionFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderActionField>())).ActionDate as *const _
                as usize
        },
        87usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderActionField),
            "::",
            stringify!(ActionDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderActionField>())).ActionTime as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderActionField),
            "::",
            stringify!(ActionTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderActionField>())).TraderID as *const _ as usize
        },
        105usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderActionField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderActionField>())).InstallID as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderActionField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderActionField>())).ExecOrderLocalID as *const _
                as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderActionField),
            "::",
            stringify!(ExecOrderLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderActionField>())).ActionLocalID as *const _
                as usize
        },
        145usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderActionField),
            "::",
            stringify!(ActionLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderActionField>())).ParticipantID as *const _
                as usize
        },
        158usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderActionField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderActionField>())).ClientID as *const _ as usize
        },
        169usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderActionField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderActionField>())).BusinessUnit as *const _
                as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderActionField),
            "::",
            stringify!(BusinessUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderActionField>())).OrderActionStatus as *const _
                as usize
        },
        201usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderActionField),
            "::",
            stringify!(OrderActionStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderActionField>())).UserID as *const _ as usize
        },
        202usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderActionField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderActionField>())).ActionType as *const _
                as usize
        },
        218usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderActionField),
            "::",
            stringify!(ActionType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderActionField>())).StatusMsg as *const _
                as usize
        },
        219usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderActionField),
            "::",
            stringify!(StatusMsg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderActionField>())).reserve1 as *const _ as usize
        },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderActionField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderActionField>())).BranchID as *const _ as usize
        },
        331usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderActionField),
            "::",
            stringify!(BranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderActionField>())).InvestUnitID as *const _
                as usize
        },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderActionField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderActionField>())).reserve2 as *const _ as usize
        },
        357usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderActionField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderActionField>())).MacAddress as *const _
                as usize
        },
        373usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderActionField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderActionField>())).InstrumentID as *const _
                as usize
        },
        394usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderActionField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExecOrderActionField>())).IPAddress as *const _
                as usize
        },
        475usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExecOrderActionField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcExecOrderActionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "\u{5b4}�������ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryExecOrderField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "\u{5b4}��������"]
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    #[doc = "��ʼʱ��"]
    pub InsertTimeStart: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub InsertTimeEnd: TThostFtdcTimeType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryExecOrderField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryExecOrderField>(),
        184usize,
        concat!("Size of: ", stringify!(CThostFtdcQryExecOrderField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryExecOrderField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryExecOrderField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExecOrderField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExecOrderField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExecOrderField>())).InvestorID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExecOrderField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExecOrderField>())).reserve1 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExecOrderField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExecOrderField>())).ExchangeID as *const _ as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExecOrderField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExecOrderField>())).ExecOrderSysID as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExecOrderField),
            "::",
            stringify!(ExecOrderSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExecOrderField>())).InsertTimeStart as *const _
                as usize
        },
        85usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExecOrderField),
            "::",
            stringify!(InsertTimeStart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExecOrderField>())).InsertTimeEnd as *const _
                as usize
        },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExecOrderField),
            "::",
            stringify!(InsertTimeEnd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExecOrderField>())).InstrumentID as *const _
                as usize
        },
        103usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExecOrderField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcQryExecOrderField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "������\u{5b4}��������Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeExecOrderField {
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "��ƽ��־"]
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "\u{5b4}������"]
    pub ActionType: TThostFtdcActionTypeType,
    #[doc = "����ͷ������ĳ\u{5b2}\u{5b7}���"]
    pub PosiDirection: TThostFtdcPosiDirectionType,
    #[doc = "��Ȩ��Ȩ���Ƿ����ڻ�ͷ��ı��,���\u{5b6}��ѷ���"]
    pub ReservePositionFlag: TThostFtdcExecOrderPositionFlagType,
    #[doc = "��Ȩ��Ȩ�����ɵ�ͷ���Ƿ��Զ�ƽ��"]
    pub CloseFlag: TThostFtdcExecOrderCloseFlagType,
    #[doc = "����\u{5b4}��������"]
    pub ExecOrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "\u{5b4}�������ύ״\u{32c}"]
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    #[doc = "������ʾ���"]
    pub NotifySequence: TThostFtdcSequenceNoType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "\u{5b4}��������"]
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    #[doc = "��������"]
    pub InsertDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub InsertTime: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub CancelTime: TThostFtdcTimeType,
    #[doc = "\u{5b4}�н��"]
    pub ExecResult: TThostFtdcExecResultType,
    #[doc = "�����Ա���"]
    pub ClearingPartID: TThostFtdcParticipantIDType,
    #[doc = "���"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcExchangeExecOrderField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcExchangeExecOrderField>(),
        384usize,
        concat!("Size of: ", stringify!(CThostFtdcExchangeExecOrderField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcExchangeExecOrderField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcExchangeExecOrderField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderField>())).Volume as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderField),
            "::",
            stringify!(Volume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderField>())).RequestID as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderField>())).BusinessUnit as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderField),
            "::",
            stringify!(BusinessUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderField>())).OffsetFlag as *const _
                as usize
        },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderField),
            "::",
            stringify!(OffsetFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderField>())).HedgeFlag as *const _
                as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderField>())).ActionType as *const _
                as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderField),
            "::",
            stringify!(ActionType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderField>())).PosiDirection as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderField),
            "::",
            stringify!(PosiDirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderField>())).ReservePositionFlag
                as *const _ as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderField),
            "::",
            stringify!(ReservePositionFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderField>())).CloseFlag as *const _
                as usize
        },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderField),
            "::",
            stringify!(CloseFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderField>())).ExecOrderLocalID
                as *const _ as usize
        },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderField),
            "::",
            stringify!(ExecOrderLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderField>())).ExchangeID as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderField>())).ParticipantID as *const _
                as usize
        },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderField>())).ClientID as *const _
                as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderField>())).reserve1 as *const _
                as usize
        },
        79usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderField>())).TraderID as *const _
                as usize
        },
        110usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderField>())).InstallID as *const _
                as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderField>())).OrderSubmitStatus
                as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderField),
            "::",
            stringify!(OrderSubmitStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderField>())).NotifySequence as *const _
                as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderField),
            "::",
            stringify!(NotifySequence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderField>())).TradingDay as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderField>())).SettlementID as *const _
                as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderField),
            "::",
            stringify!(SettlementID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderField>())).ExecOrderSysID as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderField),
            "::",
            stringify!(ExecOrderSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderField>())).InsertDate as *const _
                as usize
        },
        181usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderField),
            "::",
            stringify!(InsertDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderField>())).InsertTime as *const _
                as usize
        },
        190usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderField),
            "::",
            stringify!(InsertTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderField>())).CancelTime as *const _
                as usize
        },
        199usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderField),
            "::",
            stringify!(CancelTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderField>())).ExecResult as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderField),
            "::",
            stringify!(ExecResult)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderField>())).ClearingPartID as *const _
                as usize
        },
        209usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderField),
            "::",
            stringify!(ClearingPartID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderField>())).SequenceNo as *const _
                as usize
        },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderField),
            "::",
            stringify!(SequenceNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderField>())).BranchID as *const _
                as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderField),
            "::",
            stringify!(BranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderField>())).reserve2 as *const _
                as usize
        },
        233usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderField>())).MacAddress as *const _
                as usize
        },
        249usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderField>())).ExchangeInstID as *const _
                as usize
        },
        270usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderField),
            "::",
            stringify!(ExchangeInstID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderField>())).IPAddress as *const _
                as usize
        },
        351usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcExchangeExecOrderField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "������\u{5b4}�������ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryExchangeExecOrderField {
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryExchangeExecOrderField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryExchangeExecOrderField>(),
        164usize,
        concat!("Size of: ", stringify!(CThostFtdcQryExchangeExecOrderField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryExchangeExecOrderField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryExchangeExecOrderField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeExecOrderField>())).ParticipantID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeExecOrderField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeExecOrderField>())).ClientID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeExecOrderField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeExecOrderField>())).reserve1 as *const _
                as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeExecOrderField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeExecOrderField>())).ExchangeID as *const _
                as usize
        },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeExecOrderField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeExecOrderField>())).TraderID as *const _
                as usize
        },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeExecOrderField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeExecOrderField>())).ExchangeInstID
                as *const _ as usize
        },
        83usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeExecOrderField),
            "::",
            stringify!(ExchangeInstID)
        )
    );
}
impl Default for CThostFtdcQryExchangeExecOrderField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "\u{5b4}�����������ѯ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryExecOrderActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryExecOrderActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryExecOrderActionField>(),
        33usize,
        concat!("Size of: ", stringify!(CThostFtdcQryExecOrderActionField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryExecOrderActionField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryExecOrderActionField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExecOrderActionField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExecOrderActionField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExecOrderActionField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExecOrderActionField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExecOrderActionField>())).ExchangeID as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExecOrderActionField),
            "::",
            stringify!(ExchangeID)
        )
    );
}
#[doc = "������\u{5b4}���������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeExecOrderActionField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "\u{5b4}������������"]
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    #[doc = "������־"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "��������"]
    pub ActionDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub ActionTime: TThostFtdcTimeType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "����\u{5b4}��������"]
    pub ExecOrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "�������ر��"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "��������״\u{32c}"]
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "\u{5b4}������"]
    pub ActionType: TThostFtdcActionTypeType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcExchangeExecOrderActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcExchangeExecOrderActionField>(),
        360usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcExchangeExecOrderActionField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcExchangeExecOrderActionField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcExchangeExecOrderActionField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderActionField>())).ExchangeID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderActionField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderActionField>())).ExecOrderSysID
                as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderActionField),
            "::",
            stringify!(ExecOrderSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderActionField>())).ActionFlag
                as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderActionField),
            "::",
            stringify!(ActionFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderActionField>())).ActionDate
                as *const _ as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderActionField),
            "::",
            stringify!(ActionDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderActionField>())).ActionTime
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderActionField),
            "::",
            stringify!(ActionTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderActionField>())).TraderID as *const _
                as usize
        },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderActionField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderActionField>())).InstallID as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderActionField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderActionField>())).ExecOrderLocalID
                as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderActionField),
            "::",
            stringify!(ExecOrderLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderActionField>())).ActionLocalID
                as *const _ as usize
        },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderActionField),
            "::",
            stringify!(ActionLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderActionField>())).ParticipantID
                as *const _ as usize
        },
        102usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderActionField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderActionField>())).ClientID as *const _
                as usize
        },
        113usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderActionField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderActionField>())).BusinessUnit
                as *const _ as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderActionField),
            "::",
            stringify!(BusinessUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderActionField>())).OrderActionStatus
                as *const _ as usize
        },
        145usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderActionField),
            "::",
            stringify!(OrderActionStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderActionField>())).UserID as *const _
                as usize
        },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderActionField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderActionField>())).ActionType
                as *const _ as usize
        },
        162usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderActionField),
            "::",
            stringify!(ActionType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderActionField>())).BranchID as *const _
                as usize
        },
        163usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderActionField),
            "::",
            stringify!(BranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderActionField>())).reserve1 as *const _
                as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderActionField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderActionField>())).MacAddress
                as *const _ as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderActionField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderActionField>())).reserve2 as *const _
                as usize
        },
        209usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderActionField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderActionField>())).Volume as *const _
                as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderActionField),
            "::",
            stringify!(Volume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderActionField>())).IPAddress as *const _
                as usize
        },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderActionField),
            "::",
            stringify!(IPAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeExecOrderActionField>())).ExchangeInstID
                as *const _ as usize
        },
        277usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeExecOrderActionField),
            "::",
            stringify!(ExchangeInstID)
        )
    );
}
impl Default for CThostFtdcExchangeExecOrderActionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "������\u{5b4}�����������ѯ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryExchangeExecOrderActionField {
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryExchangeExecOrderActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryExchangeExecOrderActionField>(),
        52usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcQryExchangeExecOrderActionField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryExchangeExecOrderActionField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryExchangeExecOrderActionField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeExecOrderActionField>())).ParticipantID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeExecOrderActionField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeExecOrderActionField>())).ClientID
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeExecOrderActionField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeExecOrderActionField>())).ExchangeID
                as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeExecOrderActionField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeExecOrderActionField>())).TraderID
                as *const _ as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeExecOrderActionField),
            "::",
            stringify!(TraderID)
        )
    );
}
#[doc = "����\u{5b4}������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcErrExecOrderField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "\u{5b4}����������"]
    pub ExecOrderRef: TThostFtdcOrderRefType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "��ƽ��־"]
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "\u{5b4}������"]
    pub ActionType: TThostFtdcActionTypeType,
    #[doc = "����ͷ������ĳ\u{5b2}\u{5b7}���"]
    pub PosiDirection: TThostFtdcPosiDirectionType,
    #[doc = "��Ȩ��Ȩ���Ƿ����ڻ�ͷ��ı��,���\u{5b6}��ѷ���"]
    pub ReservePositionFlag: TThostFtdcExecOrderPositionFlagType,
    #[doc = "��Ȩ��Ȩ�����ɵ�ͷ���Ƿ��Զ�ƽ��"]
    pub CloseFlag: TThostFtdcExecOrderCloseFlagType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "�ʽ��˺�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "���ױ���"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcErrExecOrderField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcErrExecOrderField>(),
        412usize,
        concat!("Size of: ", stringify!(CThostFtdcErrExecOrderField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcErrExecOrderField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcErrExecOrderField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderField>())).InvestorID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderField>())).reserve1 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderField>())).ExecOrderRef as *const _
                as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderField),
            "::",
            stringify!(ExecOrderRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderField>())).UserID as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderField>())).Volume as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderField),
            "::",
            stringify!(Volume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderField>())).RequestID as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderField>())).BusinessUnit as *const _
                as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderField),
            "::",
            stringify!(BusinessUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderField>())).OffsetFlag as *const _ as usize
        },
        113usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderField),
            "::",
            stringify!(OffsetFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderField>())).HedgeFlag as *const _ as usize
        },
        114usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderField>())).ActionType as *const _ as usize
        },
        115usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderField),
            "::",
            stringify!(ActionType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderField>())).PosiDirection as *const _
                as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderField),
            "::",
            stringify!(PosiDirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderField>())).ReservePositionFlag as *const _
                as usize
        },
        117usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderField),
            "::",
            stringify!(ReservePositionFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderField>())).CloseFlag as *const _ as usize
        },
        118usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderField),
            "::",
            stringify!(CloseFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderField>())).ExchangeID as *const _ as usize
        },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderField>())).InvestUnitID as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderField>())).AccountID as *const _ as usize
        },
        145usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderField>())).CurrencyID as *const _ as usize
        },
        158usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderField>())).ClientID as *const _ as usize
        },
        162usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderField>())).reserve2 as *const _ as usize
        },
        173usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderField>())).MacAddress as *const _ as usize
        },
        189usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderField>())).ErrorID as *const _ as usize
        },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderField),
            "::",
            stringify!(ErrorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderField>())).ErrorMsg as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderField),
            "::",
            stringify!(ErrorMsg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderField>())).InstrumentID as *const _
                as usize
        },
        297usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderField>())).IPAddress as *const _ as usize
        },
        378usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcErrExecOrderField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ����\u{5b4}������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryErrExecOrderField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryErrExecOrderField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryErrExecOrderField>(),
        24usize,
        concat!("Size of: ", stringify!(CThostFtdcQryErrExecOrderField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryErrExecOrderField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryErrExecOrderField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryErrExecOrderField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryErrExecOrderField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryErrExecOrderField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryErrExecOrderField),
            "::",
            stringify!(InvestorID)
        )
    );
}
#[doc = "����\u{5b4}���������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcErrExecOrderActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "\u{5b4}�������������"]
    pub ExecOrderActionRef: TThostFtdcOrderActionRefType,
    #[doc = "\u{5b4}����������"]
    pub ExecOrderRef: TThostFtdcOrderRefType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "\u{5b4}������������"]
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    #[doc = "������־"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcErrExecOrderActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcErrExecOrderActionField>(),
        388usize,
        concat!("Size of: ", stringify!(CThostFtdcErrExecOrderActionField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcErrExecOrderActionField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcErrExecOrderActionField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderActionField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderActionField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderActionField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderActionField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderActionField>())).ExecOrderActionRef
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderActionField),
            "::",
            stringify!(ExecOrderActionRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderActionField>())).ExecOrderRef as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderActionField),
            "::",
            stringify!(ExecOrderRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderActionField>())).RequestID as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderActionField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderActionField>())).FrontID as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderActionField),
            "::",
            stringify!(FrontID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderActionField>())).SessionID as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderActionField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderActionField>())).ExchangeID as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderActionField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderActionField>())).ExecOrderSysID as *const _
                as usize
        },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderActionField),
            "::",
            stringify!(ExecOrderSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderActionField>())).ActionFlag as *const _
                as usize
        },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderActionField),
            "::",
            stringify!(ActionFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderActionField>())).UserID as *const _
                as usize
        },
        87usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderActionField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderActionField>())).reserve1 as *const _
                as usize
        },
        103usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderActionField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderActionField>())).InvestUnitID as *const _
                as usize
        },
        134usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderActionField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderActionField>())).reserve2 as *const _
                as usize
        },
        151usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderActionField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderActionField>())).MacAddress as *const _
                as usize
        },
        167usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderActionField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderActionField>())).ErrorID as *const _
                as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderActionField),
            "::",
            stringify!(ErrorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderActionField>())).ErrorMsg as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderActionField),
            "::",
            stringify!(ErrorMsg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderActionField>())).InstrumentID as *const _
                as usize
        },
        273usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderActionField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrExecOrderActionField>())).IPAddress as *const _
                as usize
        },
        354usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrExecOrderActionField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcErrExecOrderActionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ����\u{5b4}���������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryErrExecOrderActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryErrExecOrderActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryErrExecOrderActionField>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcQryErrExecOrderActionField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryErrExecOrderActionField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryErrExecOrderActionField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryErrExecOrderActionField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryErrExecOrderActionField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryErrExecOrderActionField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryErrExecOrderActionField),
            "::",
            stringify!(InvestorID)
        )
    );
}
#[doc = "Ͷ������Ȩ��Լ����Ȩ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOptionInstrTradingRightField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "����Ȩ��"]
    pub TradingRight: TThostFtdcTradingRightType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcOptionInstrTradingRightField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcOptionInstrTradingRightField>(),
        139usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcOptionInstrTradingRightField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcOptionInstrTradingRightField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcOptionInstrTradingRightField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrTradingRightField>())).reserve1 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrTradingRightField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrTradingRightField>())).InvestorRange
                as *const _ as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrTradingRightField),
            "::",
            stringify!(InvestorRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrTradingRightField>())).BrokerID as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrTradingRightField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrTradingRightField>())).InvestorID
                as *const _ as usize
        },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrTradingRightField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrTradingRightField>())).Direction as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrTradingRightField),
            "::",
            stringify!(Direction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrTradingRightField>())).TradingRight
                as *const _ as usize
        },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrTradingRightField),
            "::",
            stringify!(TradingRight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrTradingRightField>())).InstrumentID
                as *const _ as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrTradingRightField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcOptionInstrTradingRightField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ��Ȩ��Լ����Ȩ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryOptionInstrTradingRightField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryOptionInstrTradingRightField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryOptionInstrTradingRightField>(),
        137usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcQryOptionInstrTradingRightField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryOptionInstrTradingRightField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryOptionInstrTradingRightField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOptionInstrTradingRightField>())).BrokerID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOptionInstrTradingRightField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOptionInstrTradingRightField>())).InvestorID
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOptionInstrTradingRightField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOptionInstrTradingRightField>())).reserve1
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOptionInstrTradingRightField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOptionInstrTradingRightField>())).Direction
                as *const _ as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOptionInstrTradingRightField),
            "::",
            stringify!(Direction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOptionInstrTradingRightField>())).InstrumentID
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOptionInstrTradingRightField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcQryOptionInstrTradingRightField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�����ѯ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInputForQuoteField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "ѯ������"]
    pub ForQuoteRef: TThostFtdcOrderRefType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcInputForQuoteField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcInputForQuoteField>(),
        261usize,
        concat!("Size of: ", stringify!(CThostFtdcInputForQuoteField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcInputForQuoteField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcInputForQuoteField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputForQuoteField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputForQuoteField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputForQuoteField>())).InvestorID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputForQuoteField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputForQuoteField>())).reserve1 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputForQuoteField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputForQuoteField>())).ForQuoteRef as *const _
                as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputForQuoteField),
            "::",
            stringify!(ForQuoteRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputForQuoteField>())).UserID as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputForQuoteField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputForQuoteField>())).ExchangeID as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputForQuoteField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputForQuoteField>())).InvestUnitID as *const _
                as usize
        },
        93usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputForQuoteField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputForQuoteField>())).reserve2 as *const _ as usize
        },
        110usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputForQuoteField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputForQuoteField>())).MacAddress as *const _ as usize
        },
        126usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputForQuoteField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputForQuoteField>())).InstrumentID as *const _
                as usize
        },
        147usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputForQuoteField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputForQuoteField>())).IPAddress as *const _ as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputForQuoteField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcInputForQuoteField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "ѯ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcForQuoteField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "ѯ������"]
    pub ForQuoteRef: TThostFtdcOrderRefType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "����ѯ�۱��"]
    pub ForQuoteLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "��������"]
    pub InsertDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub InsertTime: TThostFtdcTimeType,
    #[doc = "ѯ��״\u{32c}"]
    pub ForQuoteStatus: TThostFtdcForQuoteStatusType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "״\u{32c}��Ϣ"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "�����û�����"]
    pub ActiveUserID: TThostFtdcUserIDType,
    #[doc = "���\u{379}�˾ѯ�۱��"]
    pub BrokerForQutoSeq: TThostFtdcSequenceNoType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve3: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcForQuoteField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcForQuoteField>(),
        568usize,
        concat!("Size of: ", stringify!(CThostFtdcForQuoteField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcForQuoteField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcForQuoteField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteField>())).InvestorID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteField>())).reserve1 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteField>())).ForQuoteRef as *const _ as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteField),
            "::",
            stringify!(ForQuoteRef)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcForQuoteField>())).UserID as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteField>())).ForQuoteLocalID as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteField),
            "::",
            stringify!(ForQuoteLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteField>())).ExchangeID as *const _ as usize
        },
        97usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteField>())).ParticipantID as *const _ as usize
        },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteField>())).ClientID as *const _ as usize
        },
        117usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteField>())).reserve2 as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteField>())).TraderID as *const _ as usize
        },
        159usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteField>())).InstallID as *const _ as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteField>())).InsertDate as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteField),
            "::",
            stringify!(InsertDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteField>())).InsertTime as *const _ as usize
        },
        193usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteField),
            "::",
            stringify!(InsertTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteField>())).ForQuoteStatus as *const _ as usize
        },
        202usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteField),
            "::",
            stringify!(ForQuoteStatus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcForQuoteField>())).FrontID as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteField),
            "::",
            stringify!(FrontID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteField>())).SessionID as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteField>())).StatusMsg as *const _ as usize
        },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteField),
            "::",
            stringify!(StatusMsg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteField>())).ActiveUserID as *const _ as usize
        },
        293usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteField),
            "::",
            stringify!(ActiveUserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteField>())).BrokerForQutoSeq as *const _
                as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteField),
            "::",
            stringify!(BrokerForQutoSeq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteField>())).InvestUnitID as *const _ as usize
        },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteField>())).reserve3 as *const _ as usize
        },
        333usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteField),
            "::",
            stringify!(reserve3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteField>())).MacAddress as *const _ as usize
        },
        349usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteField>())).InstrumentID as *const _ as usize
        },
        370usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteField>())).ExchangeInstID as *const _ as usize
        },
        451usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteField),
            "::",
            stringify!(ExchangeInstID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteField>())).IPAddress as *const _ as usize
        },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcForQuoteField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "ѯ�۲�ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryForQuoteField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��ʼʱ��"]
    pub InsertTimeStart: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub InsertTimeEnd: TThostFtdcTimeType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryForQuoteField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryForQuoteField>(),
        180usize,
        concat!("Size of: ", stringify!(CThostFtdcQryForQuoteField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryForQuoteField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryForQuoteField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryForQuoteField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryForQuoteField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryForQuoteField>())).InvestorID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryForQuoteField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryForQuoteField>())).reserve1 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryForQuoteField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryForQuoteField>())).ExchangeID as *const _ as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryForQuoteField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryForQuoteField>())).InsertTimeStart as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryForQuoteField),
            "::",
            stringify!(InsertTimeStart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryForQuoteField>())).InsertTimeEnd as *const _
                as usize
        },
        73usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryForQuoteField),
            "::",
            stringify!(InsertTimeEnd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryForQuoteField>())).InvestUnitID as *const _ as usize
        },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryForQuoteField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryForQuoteField>())).InstrumentID as *const _ as usize
        },
        99usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryForQuoteField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcQryForQuoteField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "������ѯ����Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeForQuoteField {
    #[doc = "����ѯ�۱��"]
    pub ForQuoteLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "��������"]
    pub InsertDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub InsertTime: TThostFtdcTimeType,
    #[doc = "ѯ��״\u{32c}"]
    pub ForQuoteStatus: TThostFtdcForQuoteStatusType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcExchangeForQuoteField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcExchangeForQuoteField>(),
        272usize,
        concat!("Size of: ", stringify!(CThostFtdcExchangeForQuoteField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcExchangeForQuoteField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcExchangeForQuoteField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeForQuoteField>())).ForQuoteLocalID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeForQuoteField),
            "::",
            stringify!(ForQuoteLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeForQuoteField>())).ExchangeID as *const _
                as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeForQuoteField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeForQuoteField>())).ParticipantID as *const _
                as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeForQuoteField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeForQuoteField>())).ClientID as *const _
                as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeForQuoteField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeForQuoteField>())).reserve1 as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeForQuoteField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeForQuoteField>())).TraderID as *const _
                as usize
        },
        75usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeForQuoteField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeForQuoteField>())).InstallID as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeForQuoteField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeForQuoteField>())).InsertDate as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeForQuoteField),
            "::",
            stringify!(InsertDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeForQuoteField>())).InsertTime as *const _
                as usize
        },
        109usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeForQuoteField),
            "::",
            stringify!(InsertTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeForQuoteField>())).ForQuoteStatus as *const _
                as usize
        },
        118usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeForQuoteField),
            "::",
            stringify!(ForQuoteStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeForQuoteField>())).reserve2 as *const _
                as usize
        },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeForQuoteField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeForQuoteField>())).MacAddress as *const _
                as usize
        },
        135usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeForQuoteField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeForQuoteField>())).ExchangeInstID as *const _
                as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeForQuoteField),
            "::",
            stringify!(ExchangeInstID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeForQuoteField>())).IPAddress as *const _
                as usize
        },
        237usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeForQuoteField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcExchangeForQuoteField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "������ѯ�۲�ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryExchangeForQuoteField {
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryExchangeForQuoteField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryExchangeForQuoteField>(),
        164usize,
        concat!("Size of: ", stringify!(CThostFtdcQryExchangeForQuoteField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryExchangeForQuoteField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryExchangeForQuoteField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeForQuoteField>())).ParticipantID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeForQuoteField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeForQuoteField>())).ClientID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeForQuoteField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeForQuoteField>())).reserve1 as *const _
                as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeForQuoteField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeForQuoteField>())).ExchangeID as *const _
                as usize
        },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeForQuoteField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeForQuoteField>())).TraderID as *const _
                as usize
        },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeForQuoteField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeForQuoteField>())).ExchangeInstID
                as *const _ as usize
        },
        83usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeForQuoteField),
            "::",
            stringify!(ExchangeInstID)
        )
    );
}
impl Default for CThostFtdcQryExchangeForQuoteField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "����ı���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInputQuoteField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��������"]
    pub QuoteRef: TThostFtdcOrderRefType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "���۸�"]
    pub AskPrice: TThostFtdcPriceType,
    #[doc = "��۸�"]
    pub BidPrice: TThostFtdcPriceType,
    #[doc = "������"]
    pub AskVolume: TThostFtdcVolumeType,
    #[doc = "������"]
    pub BidVolume: TThostFtdcVolumeType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "����ƽ��־"]
    pub AskOffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "��ƽ��־"]
    pub BidOffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "��Ͷ���ױ���־"]
    pub AskHedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��Ͷ���ױ���־"]
    pub BidHedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��������������"]
    pub AskOrderRef: TThostFtdcOrderRefType,
    #[doc = "�����\u{b1a35}�����"]
    pub BidOrderRef: TThostFtdcOrderRefType,
    #[doc = "Ӧ�۱��"]
    pub ForQuoteSysID: TThostFtdcOrderSysIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "���ױ���"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
    #[doc = "���������"]
    pub ReplaceSysID: TThostFtdcOrderSysIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcInputQuoteField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcInputQuoteField>(),
        400usize,
        concat!("Size of: ", stringify!(CThostFtdcInputQuoteField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcInputQuoteField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcInputQuoteField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteField>())).InvestorID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteField>())).reserve1 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteField>())).QuoteRef as *const _ as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteField),
            "::",
            stringify!(QuoteRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteField>())).UserID as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteField>())).AskPrice as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteField),
            "::",
            stringify!(AskPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteField>())).BidPrice as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteField),
            "::",
            stringify!(BidPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteField>())).AskVolume as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteField),
            "::",
            stringify!(AskVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteField>())).BidVolume as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteField),
            "::",
            stringify!(BidVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteField>())).RequestID as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteField>())).BusinessUnit as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteField),
            "::",
            stringify!(BusinessUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteField>())).AskOffsetFlag as *const _ as usize
        },
        137usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteField),
            "::",
            stringify!(AskOffsetFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteField>())).BidOffsetFlag as *const _ as usize
        },
        138usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteField),
            "::",
            stringify!(BidOffsetFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteField>())).AskHedgeFlag as *const _ as usize
        },
        139usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteField),
            "::",
            stringify!(AskHedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteField>())).BidHedgeFlag as *const _ as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteField),
            "::",
            stringify!(BidHedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteField>())).AskOrderRef as *const _ as usize
        },
        141usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteField),
            "::",
            stringify!(AskOrderRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteField>())).BidOrderRef as *const _ as usize
        },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteField),
            "::",
            stringify!(BidOrderRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteField>())).ForQuoteSysID as *const _ as usize
        },
        167usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteField),
            "::",
            stringify!(ForQuoteSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteField>())).ExchangeID as *const _ as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteField>())).InvestUnitID as *const _ as usize
        },
        197usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteField>())).ClientID as *const _ as usize
        },
        214usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteField>())).reserve2 as *const _ as usize
        },
        225usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteField>())).MacAddress as *const _ as usize
        },
        241usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteField>())).InstrumentID as *const _ as usize
        },
        262usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteField>())).IPAddress as *const _ as usize
        },
        343usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteField),
            "::",
            stringify!(IPAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteField>())).ReplaceSysID as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteField),
            "::",
            stringify!(ReplaceSysID)
        )
    );
}
impl Default for CThostFtdcInputQuoteField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���뱨�۲���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInputQuoteActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "���۲�������"]
    pub QuoteActionRef: TThostFtdcOrderActionRefType,
    #[doc = "��������"]
    pub QuoteRef: TThostFtdcOrderRefType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���۲������"]
    pub QuoteSysID: TThostFtdcOrderSysIDType,
    #[doc = "������־"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "���ױ���"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcInputQuoteActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcInputQuoteActionField>(),
        316usize,
        concat!("Size of: ", stringify!(CThostFtdcInputQuoteActionField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcInputQuoteActionField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcInputQuoteActionField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteActionField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteActionField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteActionField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteActionField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteActionField>())).QuoteActionRef as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteActionField),
            "::",
            stringify!(QuoteActionRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteActionField>())).QuoteRef as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteActionField),
            "::",
            stringify!(QuoteRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteActionField>())).RequestID as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteActionField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteActionField>())).FrontID as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteActionField),
            "::",
            stringify!(FrontID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteActionField>())).SessionID as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteActionField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteActionField>())).ExchangeID as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteActionField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteActionField>())).QuoteSysID as *const _
                as usize
        },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteActionField),
            "::",
            stringify!(QuoteSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteActionField>())).ActionFlag as *const _
                as usize
        },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteActionField),
            "::",
            stringify!(ActionFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteActionField>())).UserID as *const _ as usize
        },
        87usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteActionField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteActionField>())).reserve1 as *const _
                as usize
        },
        103usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteActionField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteActionField>())).InvestUnitID as *const _
                as usize
        },
        134usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteActionField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteActionField>())).ClientID as *const _
                as usize
        },
        151usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteActionField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteActionField>())).reserve2 as *const _
                as usize
        },
        162usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteActionField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteActionField>())).MacAddress as *const _
                as usize
        },
        178usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteActionField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteActionField>())).InstrumentID as *const _
                as usize
        },
        199usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteActionField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputQuoteActionField>())).IPAddress as *const _
                as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputQuoteActionField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcInputQuoteActionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQuoteField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��������"]
    pub QuoteRef: TThostFtdcOrderRefType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "���۸�"]
    pub AskPrice: TThostFtdcPriceType,
    #[doc = "��۸�"]
    pub BidPrice: TThostFtdcPriceType,
    #[doc = "������"]
    pub AskVolume: TThostFtdcVolumeType,
    #[doc = "������"]
    pub BidVolume: TThostFtdcVolumeType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "����ƽ��־"]
    pub AskOffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "��ƽ��־"]
    pub BidOffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "��Ͷ���ױ���־"]
    pub AskHedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��Ͷ���ױ���־"]
    pub BidHedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "���ر��۱��"]
    pub QuoteLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "������ʾ���"]
    pub NotifySequence: TThostFtdcSequenceNoType,
    #[doc = "�����ύ״\u{32c}"]
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "���۱��"]
    pub QuoteSysID: TThostFtdcOrderSysIDType,
    #[doc = "��������"]
    pub InsertDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub InsertTime: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub CancelTime: TThostFtdcTimeType,
    #[doc = "����״\u{32c}"]
    pub QuoteStatus: TThostFtdcOrderStatusType,
    #[doc = "�����Ա���"]
    pub ClearingPartID: TThostFtdcParticipantIDType,
    #[doc = "���"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "�����������"]
    pub AskOrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "�\u{b7f71}������"]
    pub BidOrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�û��˲�Ʒ��Ϣ"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "״\u{32c}��Ϣ"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "�����û�����"]
    pub ActiveUserID: TThostFtdcUserIDType,
    #[doc = "���\u{379}�˾���۱��"]
    pub BrokerQuoteSeq: TThostFtdcSequenceNoType,
    #[doc = "��������������"]
    pub AskOrderRef: TThostFtdcOrderRefType,
    #[doc = "�����\u{b1a35}�����"]
    pub BidOrderRef: TThostFtdcOrderRefType,
    #[doc = "Ӧ�۱��"]
    pub ForQuoteSysID: TThostFtdcOrderSysIDType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "�ʽ��˺�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve3: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
    #[doc = "���������"]
    pub ReplaceSysID: TThostFtdcOrderSysIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQuoteField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQuoteField>(),
        840usize,
        concat!("Size of: ", stringify!(CThostFtdcQuoteField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQuoteField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcQuoteField))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcQuoteField>())).BrokerID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcQuoteField>())).InvestorID as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcQuoteField>())).reserve1 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcQuoteField>())).QuoteRef as *const _ as usize },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(QuoteRef)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcQuoteField>())).UserID as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcQuoteField>())).AskPrice as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(AskPrice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcQuoteField>())).BidPrice as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(BidPrice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcQuoteField>())).AskVolume as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(AskVolume)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcQuoteField>())).BidVolume as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(BidVolume)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcQuoteField>())).RequestID as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteField>())).BusinessUnit as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(BusinessUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteField>())).AskOffsetFlag as *const _ as usize
        },
        137usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(AskOffsetFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteField>())).BidOffsetFlag as *const _ as usize
        },
        138usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(BidOffsetFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteField>())).AskHedgeFlag as *const _ as usize
        },
        139usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(AskHedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteField>())).BidHedgeFlag as *const _ as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(BidHedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteField>())).QuoteLocalID as *const _ as usize
        },
        141usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(QuoteLocalID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcQuoteField>())).ExchangeID as *const _ as usize },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteField>())).ParticipantID as *const _ as usize
        },
        163usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcQuoteField>())).ClientID as *const _ as usize },
        174usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcQuoteField>())).reserve2 as *const _ as usize },
        185usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcQuoteField>())).TraderID as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcQuoteField>())).InstallID as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteField>())).NotifySequence as *const _ as usize
        },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(NotifySequence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteField>())).OrderSubmitStatus as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(OrderSubmitStatus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcQuoteField>())).TradingDay as *const _ as usize },
        249usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteField>())).SettlementID as *const _ as usize
        },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(SettlementID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcQuoteField>())).QuoteSysID as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(QuoteSysID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcQuoteField>())).InsertDate as *const _ as usize },
        285usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(InsertDate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcQuoteField>())).InsertTime as *const _ as usize },
        294usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(InsertTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcQuoteField>())).CancelTime as *const _ as usize },
        303usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(CancelTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteField>())).QuoteStatus as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(QuoteStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteField>())).ClearingPartID as *const _ as usize
        },
        313usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(ClearingPartID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcQuoteField>())).SequenceNo as *const _ as usize },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(SequenceNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteField>())).AskOrderSysID as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(AskOrderSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteField>())).BidOrderSysID as *const _ as usize
        },
        349usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(BidOrderSysID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcQuoteField>())).FrontID as *const _ as usize },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(FrontID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcQuoteField>())).SessionID as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteField>())).UserProductInfo as *const _ as usize
        },
        380usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(UserProductInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcQuoteField>())).StatusMsg as *const _ as usize },
        391usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(StatusMsg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteField>())).ActiveUserID as *const _ as usize
        },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(ActiveUserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteField>())).BrokerQuoteSeq as *const _ as usize
        },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(BrokerQuoteSeq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteField>())).AskOrderRef as *const _ as usize
        },
        492usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(AskOrderRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteField>())).BidOrderRef as *const _ as usize
        },
        505usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(BidOrderRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteField>())).ForQuoteSysID as *const _ as usize
        },
        518usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(ForQuoteSysID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcQuoteField>())).BranchID as *const _ as usize },
        539usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(BranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteField>())).InvestUnitID as *const _ as usize
        },
        548usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcQuoteField>())).AccountID as *const _ as usize },
        565usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcQuoteField>())).CurrencyID as *const _ as usize },
        578usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcQuoteField>())).reserve3 as *const _ as usize },
        582usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(reserve3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcQuoteField>())).MacAddress as *const _ as usize },
        598usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteField>())).InstrumentID as *const _ as usize
        },
        619usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteField>())).ExchangeInstID as *const _ as usize
        },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(ExchangeInstID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcQuoteField>())).IPAddress as *const _ as usize },
        781usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(IPAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteField>())).ReplaceSysID as *const _ as usize
        },
        814usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteField),
            "::",
            stringify!(ReplaceSysID)
        )
    );
}
impl Default for CThostFtdcQuoteField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���۲���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQuoteActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "���۲�������"]
    pub QuoteActionRef: TThostFtdcOrderActionRefType,
    #[doc = "��������"]
    pub QuoteRef: TThostFtdcOrderRefType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���۲������"]
    pub QuoteSysID: TThostFtdcOrderSysIDType,
    #[doc = "������־"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "��������"]
    pub ActionDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub ActionTime: TThostFtdcTimeType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "���ر��۱��"]
    pub QuoteLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "�������ر��"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "��������״\u{32c}"]
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "״\u{32c}��Ϣ"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQuoteActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQuoteActionField>(),
        508usize,
        concat!("Size of: ", stringify!(CThostFtdcQuoteActionField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQuoteActionField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcQuoteActionField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteActionField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteActionField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteActionField>())).InvestorID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteActionField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteActionField>())).QuoteActionRef as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteActionField),
            "::",
            stringify!(QuoteActionRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteActionField>())).QuoteRef as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteActionField),
            "::",
            stringify!(QuoteRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteActionField>())).RequestID as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteActionField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteActionField>())).FrontID as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteActionField),
            "::",
            stringify!(FrontID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteActionField>())).SessionID as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteActionField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteActionField>())).ExchangeID as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteActionField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteActionField>())).QuoteSysID as *const _ as usize
        },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteActionField),
            "::",
            stringify!(QuoteSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteActionField>())).ActionFlag as *const _ as usize
        },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteActionField),
            "::",
            stringify!(ActionFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteActionField>())).ActionDate as *const _ as usize
        },
        87usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteActionField),
            "::",
            stringify!(ActionDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteActionField>())).ActionTime as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteActionField),
            "::",
            stringify!(ActionTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteActionField>())).TraderID as *const _ as usize
        },
        105usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteActionField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteActionField>())).InstallID as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteActionField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteActionField>())).QuoteLocalID as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteActionField),
            "::",
            stringify!(QuoteLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteActionField>())).ActionLocalID as *const _
                as usize
        },
        145usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteActionField),
            "::",
            stringify!(ActionLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteActionField>())).ParticipantID as *const _
                as usize
        },
        158usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteActionField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteActionField>())).ClientID as *const _ as usize
        },
        169usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteActionField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteActionField>())).BusinessUnit as *const _ as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteActionField),
            "::",
            stringify!(BusinessUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteActionField>())).OrderActionStatus as *const _
                as usize
        },
        201usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteActionField),
            "::",
            stringify!(OrderActionStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteActionField>())).UserID as *const _ as usize
        },
        202usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteActionField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteActionField>())).StatusMsg as *const _ as usize
        },
        218usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteActionField),
            "::",
            stringify!(StatusMsg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteActionField>())).reserve1 as *const _ as usize
        },
        299usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteActionField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteActionField>())).BranchID as *const _ as usize
        },
        330usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteActionField),
            "::",
            stringify!(BranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteActionField>())).InvestUnitID as *const _ as usize
        },
        339usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteActionField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteActionField>())).reserve2 as *const _ as usize
        },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteActionField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteActionField>())).MacAddress as *const _ as usize
        },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteActionField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteActionField>())).InstrumentID as *const _ as usize
        },
        393usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteActionField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQuoteActionField>())).IPAddress as *const _ as usize
        },
        474usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQuoteActionField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcQuoteActionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���۲�ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryQuoteField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���۱��"]
    pub QuoteSysID: TThostFtdcOrderSysIDType,
    #[doc = "��ʼʱ��"]
    pub InsertTimeStart: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub InsertTimeEnd: TThostFtdcTimeType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryQuoteField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryQuoteField>(),
        201usize,
        concat!("Size of: ", stringify!(CThostFtdcQryQuoteField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryQuoteField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryQuoteField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryQuoteField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryQuoteField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryQuoteField>())).InvestorID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryQuoteField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryQuoteField>())).reserve1 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryQuoteField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryQuoteField>())).ExchangeID as *const _ as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryQuoteField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryQuoteField>())).QuoteSysID as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryQuoteField),
            "::",
            stringify!(QuoteSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryQuoteField>())).InsertTimeStart as *const _ as usize
        },
        85usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryQuoteField),
            "::",
            stringify!(InsertTimeStart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryQuoteField>())).InsertTimeEnd as *const _ as usize
        },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryQuoteField),
            "::",
            stringify!(InsertTimeEnd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryQuoteField>())).InvestUnitID as *const _ as usize
        },
        103usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryQuoteField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryQuoteField>())).InstrumentID as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryQuoteField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcQryQuoteField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "������������Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeQuoteField {
    #[doc = "���۸�"]
    pub AskPrice: TThostFtdcPriceType,
    #[doc = "��۸�"]
    pub BidPrice: TThostFtdcPriceType,
    #[doc = "������"]
    pub AskVolume: TThostFtdcVolumeType,
    #[doc = "������"]
    pub BidVolume: TThostFtdcVolumeType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "����ƽ��־"]
    pub AskOffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "��ƽ��־"]
    pub BidOffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "��Ͷ���ױ���־"]
    pub AskHedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��Ͷ���ױ���־"]
    pub BidHedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "���ر��۱��"]
    pub QuoteLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "������ʾ���"]
    pub NotifySequence: TThostFtdcSequenceNoType,
    #[doc = "�����ύ״\u{32c}"]
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "���۱��"]
    pub QuoteSysID: TThostFtdcOrderSysIDType,
    #[doc = "��������"]
    pub InsertDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub InsertTime: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub CancelTime: TThostFtdcTimeType,
    #[doc = "����״\u{32c}"]
    pub QuoteStatus: TThostFtdcOrderStatusType,
    #[doc = "�����Ա���"]
    pub ClearingPartID: TThostFtdcParticipantIDType,
    #[doc = "���"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "�����������"]
    pub AskOrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "�\u{b7f71}������"]
    pub BidOrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "Ӧ�۱��"]
    pub ForQuoteSysID: TThostFtdcOrderSysIDType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcExchangeQuoteField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcExchangeQuoteField>(),
        464usize,
        concat!("Size of: ", stringify!(CThostFtdcExchangeQuoteField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcExchangeQuoteField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcExchangeQuoteField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).AskPrice as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(AskPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).BidPrice as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(BidPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).AskVolume as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(AskVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).BidVolume as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(BidVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).RequestID as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).BusinessUnit as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(BusinessUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).AskOffsetFlag as *const _
                as usize
        },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(AskOffsetFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).BidOffsetFlag as *const _
                as usize
        },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(BidOffsetFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).AskHedgeFlag as *const _
                as usize
        },
        51usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(AskHedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).BidHedgeFlag as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(BidHedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).QuoteLocalID as *const _
                as usize
        },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(QuoteLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).ExchangeID as *const _ as usize
        },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).ParticipantID as *const _
                as usize
        },
        75usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).ClientID as *const _ as usize
        },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).reserve1 as *const _ as usize
        },
        97usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).TraderID as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).InstallID as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).NotifySequence as *const _
                as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(NotifySequence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).OrderSubmitStatus as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(OrderSubmitStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).TradingDay as *const _ as usize
        },
        161usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).SettlementID as *const _
                as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(SettlementID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).QuoteSysID as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(QuoteSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).InsertDate as *const _ as usize
        },
        197usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(InsertDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).InsertTime as *const _ as usize
        },
        206usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(InsertTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).CancelTime as *const _ as usize
        },
        215usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(CancelTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).QuoteStatus as *const _
                as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(QuoteStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).ClearingPartID as *const _
                as usize
        },
        225usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(ClearingPartID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).SequenceNo as *const _ as usize
        },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(SequenceNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).AskOrderSysID as *const _
                as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(AskOrderSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).BidOrderSysID as *const _
                as usize
        },
        261usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(BidOrderSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).ForQuoteSysID as *const _
                as usize
        },
        282usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(ForQuoteSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).BranchID as *const _ as usize
        },
        303usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(BranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).reserve2 as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).MacAddress as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).ExchangeInstID as *const _
                as usize
        },
        349usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(ExchangeInstID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteField>())).IPAddress as *const _ as usize
        },
        430usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcExchangeQuoteField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���������۲�ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryExchangeQuoteField {
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryExchangeQuoteField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryExchangeQuoteField>(),
        164usize,
        concat!("Size of: ", stringify!(CThostFtdcQryExchangeQuoteField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryExchangeQuoteField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryExchangeQuoteField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeQuoteField>())).ParticipantID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeQuoteField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeQuoteField>())).ClientID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeQuoteField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeQuoteField>())).reserve1 as *const _
                as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeQuoteField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeQuoteField>())).ExchangeID as *const _
                as usize
        },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeQuoteField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeQuoteField>())).TraderID as *const _
                as usize
        },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeQuoteField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeQuoteField>())).ExchangeInstID as *const _
                as usize
        },
        83usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeQuoteField),
            "::",
            stringify!(ExchangeInstID)
        )
    );
}
impl Default for CThostFtdcQryExchangeQuoteField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���۲�����ѯ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryQuoteActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryQuoteActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryQuoteActionField>(),
        33usize,
        concat!("Size of: ", stringify!(CThostFtdcQryQuoteActionField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryQuoteActionField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryQuoteActionField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryQuoteActionField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryQuoteActionField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryQuoteActionField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryQuoteActionField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryQuoteActionField>())).ExchangeID as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryQuoteActionField),
            "::",
            stringify!(ExchangeID)
        )
    );
}
#[doc = "���������۲���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeQuoteActionField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���۲������"]
    pub QuoteSysID: TThostFtdcOrderSysIDType,
    #[doc = "������־"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "��������"]
    pub ActionDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub ActionTime: TThostFtdcTimeType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "���ر��۱��"]
    pub QuoteLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "�������ر��"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "��������״\u{32c}"]
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcExchangeQuoteActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcExchangeQuoteActionField>(),
        232usize,
        concat!("Size of: ", stringify!(CThostFtdcExchangeQuoteActionField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcExchangeQuoteActionField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcExchangeQuoteActionField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteActionField>())).ExchangeID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteActionField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteActionField>())).QuoteSysID as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteActionField),
            "::",
            stringify!(QuoteSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteActionField>())).ActionFlag as *const _
                as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteActionField),
            "::",
            stringify!(ActionFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteActionField>())).ActionDate as *const _
                as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteActionField),
            "::",
            stringify!(ActionDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteActionField>())).ActionTime as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteActionField),
            "::",
            stringify!(ActionTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteActionField>())).TraderID as *const _
                as usize
        },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteActionField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteActionField>())).InstallID as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteActionField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteActionField>())).QuoteLocalID as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteActionField),
            "::",
            stringify!(QuoteLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteActionField>())).ActionLocalID as *const _
                as usize
        },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteActionField),
            "::",
            stringify!(ActionLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteActionField>())).ParticipantID as *const _
                as usize
        },
        102usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteActionField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteActionField>())).ClientID as *const _
                as usize
        },
        113usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteActionField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteActionField>())).BusinessUnit as *const _
                as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteActionField),
            "::",
            stringify!(BusinessUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteActionField>())).OrderActionStatus
                as *const _ as usize
        },
        145usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteActionField),
            "::",
            stringify!(OrderActionStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteActionField>())).UserID as *const _
                as usize
        },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteActionField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteActionField>())).reserve1 as *const _
                as usize
        },
        162usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteActionField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteActionField>())).MacAddress as *const _
                as usize
        },
        178usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteActionField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeQuoteActionField>())).IPAddress as *const _
                as usize
        },
        199usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeQuoteActionField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcExchangeQuoteActionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���������۲�����ѯ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryExchangeQuoteActionField {
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryExchangeQuoteActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryExchangeQuoteActionField>(),
        52usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcQryExchangeQuoteActionField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryExchangeQuoteActionField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryExchangeQuoteActionField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeQuoteActionField>())).ParticipantID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeQuoteActionField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeQuoteActionField>())).ClientID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeQuoteActionField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeQuoteActionField>())).ExchangeID as *const _
                as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeQuoteActionField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeQuoteActionField>())).TraderID as *const _
                as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeQuoteActionField),
            "::",
            stringify!(TraderID)
        )
    );
}
#[doc = "��Ȩ��Լdelta\u{5b5}"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOptionInstrDeltaField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Delta\u{5b5}"]
    pub Delta: TThostFtdcRatioType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcOptionInstrDeltaField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcOptionInstrDeltaField>(),
        152usize,
        concat!("Size of: ", stringify!(CThostFtdcOptionInstrDeltaField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcOptionInstrDeltaField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcOptionInstrDeltaField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrDeltaField>())).reserve1 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrDeltaField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrDeltaField>())).InvestorRange as *const _
                as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrDeltaField),
            "::",
            stringify!(InvestorRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrDeltaField>())).BrokerID as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrDeltaField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrDeltaField>())).InvestorID as *const _
                as usize
        },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrDeltaField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrDeltaField>())).Delta as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrDeltaField),
            "::",
            stringify!(Delta)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionInstrDeltaField>())).InstrumentID as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionInstrDeltaField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcOptionInstrDeltaField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���������\u{335}�ѯ������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcForQuoteRspField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "ѯ�۱��"]
    pub ForQuoteSysID: TThostFtdcOrderSysIDType,
    #[doc = "ѯ��ʱ��"]
    pub ForQuoteTime: TThostFtdcTimeType,
    #[doc = "ҵ������"]
    pub ActionDay: TThostFtdcDateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcForQuoteRspField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcForQuoteRspField>(),
        169usize,
        concat!("Size of: ", stringify!(CThostFtdcForQuoteRspField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcForQuoteRspField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcForQuoteRspField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteRspField>())).TradingDay as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteRspField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteRspField>())).reserve1 as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteRspField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteRspField>())).ForQuoteSysID as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteRspField),
            "::",
            stringify!(ForQuoteSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteRspField>())).ForQuoteTime as *const _ as usize
        },
        61usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteRspField),
            "::",
            stringify!(ForQuoteTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteRspField>())).ActionDay as *const _ as usize
        },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteRspField),
            "::",
            stringify!(ActionDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteRspField>())).ExchangeID as *const _ as usize
        },
        79usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteRspField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteRspField>())).InstrumentID as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteRspField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcForQuoteRspField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ǰ��Ȩ��Լ\u{5b4}��ƫ��\u{5b5}����ϸ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcStrikeOffsetField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "\u{5b4}��ƫ��\u{5b5}"]
    pub Offset: TThostFtdcMoneyType,
    #[doc = "\u{5b4}��ƫ������"]
    pub OffsetType: TThostFtdcStrikeOffsetTypeType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcStrikeOffsetField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcStrikeOffsetField>(),
        152usize,
        concat!("Size of: ", stringify!(CThostFtdcStrikeOffsetField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcStrikeOffsetField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcStrikeOffsetField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcStrikeOffsetField>())).reserve1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcStrikeOffsetField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcStrikeOffsetField>())).InvestorRange as *const _
                as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcStrikeOffsetField),
            "::",
            stringify!(InvestorRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcStrikeOffsetField>())).BrokerID as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcStrikeOffsetField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcStrikeOffsetField>())).InvestorID as *const _ as usize
        },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcStrikeOffsetField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcStrikeOffsetField>())).Offset as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcStrikeOffsetField),
            "::",
            stringify!(Offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcStrikeOffsetField>())).OffsetType as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcStrikeOffsetField),
            "::",
            stringify!(OffsetType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcStrikeOffsetField>())).InstrumentID as *const _
                as usize
        },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcStrikeOffsetField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcStrikeOffsetField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��Ȩ\u{5b4}��ƫ��\u{5b5}��ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryStrikeOffsetField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryStrikeOffsetField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryStrikeOffsetField>(),
        136usize,
        concat!("Size of: ", stringify!(CThostFtdcQryStrikeOffsetField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryStrikeOffsetField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryStrikeOffsetField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryStrikeOffsetField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryStrikeOffsetField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryStrikeOffsetField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryStrikeOffsetField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryStrikeOffsetField>())).reserve1 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryStrikeOffsetField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryStrikeOffsetField>())).InstrumentID as *const _
                as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryStrikeOffsetField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcQryStrikeOffsetField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "����������������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInputBatchOrderActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "������������"]
    pub OrderActionRef: TThostFtdcOrderActionRefType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcInputBatchOrderActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcInputBatchOrderActionField>(),
        152usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcInputBatchOrderActionField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcInputBatchOrderActionField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcInputBatchOrderActionField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputBatchOrderActionField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputBatchOrderActionField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputBatchOrderActionField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputBatchOrderActionField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputBatchOrderActionField>())).OrderActionRef
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputBatchOrderActionField),
            "::",
            stringify!(OrderActionRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputBatchOrderActionField>())).RequestID as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputBatchOrderActionField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputBatchOrderActionField>())).FrontID as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputBatchOrderActionField),
            "::",
            stringify!(FrontID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputBatchOrderActionField>())).SessionID as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputBatchOrderActionField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputBatchOrderActionField>())).ExchangeID as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputBatchOrderActionField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputBatchOrderActionField>())).UserID as *const _
                as usize
        },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputBatchOrderActionField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputBatchOrderActionField>())).InvestUnitID
                as *const _ as usize
        },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputBatchOrderActionField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputBatchOrderActionField>())).reserve1 as *const _
                as usize
        },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputBatchOrderActionField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputBatchOrderActionField>())).MacAddress as *const _
                as usize
        },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputBatchOrderActionField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputBatchOrderActionField>())).IPAddress as *const _
                as usize
        },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputBatchOrderActionField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcInputBatchOrderActionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "������������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBatchOrderActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "������������"]
    pub OrderActionRef: TThostFtdcOrderActionRefType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��������"]
    pub ActionDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub ActionTime: TThostFtdcTimeType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�������ر��"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "��������״\u{32c}"]
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "״\u{32c}��Ϣ"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcBatchOrderActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcBatchOrderActionField>(),
        336usize,
        concat!("Size of: ", stringify!(CThostFtdcBatchOrderActionField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcBatchOrderActionField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcBatchOrderActionField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBatchOrderActionField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBatchOrderActionField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBatchOrderActionField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBatchOrderActionField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBatchOrderActionField>())).OrderActionRef as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBatchOrderActionField),
            "::",
            stringify!(OrderActionRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBatchOrderActionField>())).RequestID as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBatchOrderActionField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBatchOrderActionField>())).FrontID as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBatchOrderActionField),
            "::",
            stringify!(FrontID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBatchOrderActionField>())).SessionID as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBatchOrderActionField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBatchOrderActionField>())).ExchangeID as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBatchOrderActionField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBatchOrderActionField>())).ActionDate as *const _
                as usize
        },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBatchOrderActionField),
            "::",
            stringify!(ActionDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBatchOrderActionField>())).ActionTime as *const _
                as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBatchOrderActionField),
            "::",
            stringify!(ActionTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBatchOrderActionField>())).TraderID as *const _
                as usize
        },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBatchOrderActionField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBatchOrderActionField>())).InstallID as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBatchOrderActionField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBatchOrderActionField>())).ActionLocalID as *const _
                as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBatchOrderActionField),
            "::",
            stringify!(ActionLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBatchOrderActionField>())).ParticipantID as *const _
                as usize
        },
        105usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBatchOrderActionField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBatchOrderActionField>())).ClientID as *const _
                as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBatchOrderActionField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBatchOrderActionField>())).BusinessUnit as *const _
                as usize
        },
        127usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBatchOrderActionField),
            "::",
            stringify!(BusinessUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBatchOrderActionField>())).OrderActionStatus
                as *const _ as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBatchOrderActionField),
            "::",
            stringify!(OrderActionStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBatchOrderActionField>())).UserID as *const _ as usize
        },
        149usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBatchOrderActionField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBatchOrderActionField>())).StatusMsg as *const _
                as usize
        },
        165usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBatchOrderActionField),
            "::",
            stringify!(StatusMsg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBatchOrderActionField>())).InvestUnitID as *const _
                as usize
        },
        246usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBatchOrderActionField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBatchOrderActionField>())).reserve1 as *const _
                as usize
        },
        263usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBatchOrderActionField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBatchOrderActionField>())).MacAddress as *const _
                as usize
        },
        279usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBatchOrderActionField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBatchOrderActionField>())).IPAddress as *const _
                as usize
        },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBatchOrderActionField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcBatchOrderActionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "������������������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeBatchOrderActionField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��������"]
    pub ActionDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub ActionTime: TThostFtdcTimeType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�������ر��"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "��������״\u{32c}"]
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcExchangeBatchOrderActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcExchangeBatchOrderActionField>(),
        196usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcExchangeBatchOrderActionField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcExchangeBatchOrderActionField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcExchangeBatchOrderActionField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeBatchOrderActionField>())).ExchangeID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeBatchOrderActionField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeBatchOrderActionField>())).ActionDate
                as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeBatchOrderActionField),
            "::",
            stringify!(ActionDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeBatchOrderActionField>())).ActionTime
                as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeBatchOrderActionField),
            "::",
            stringify!(ActionTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeBatchOrderActionField>())).TraderID as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeBatchOrderActionField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeBatchOrderActionField>())).InstallID
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeBatchOrderActionField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeBatchOrderActionField>())).ActionLocalID
                as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeBatchOrderActionField),
            "::",
            stringify!(ActionLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeBatchOrderActionField>())).ParticipantID
                as *const _ as usize
        },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeBatchOrderActionField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeBatchOrderActionField>())).ClientID as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeBatchOrderActionField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeBatchOrderActionField>())).BusinessUnit
                as *const _ as usize
        },
        87usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeBatchOrderActionField),
            "::",
            stringify!(BusinessUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeBatchOrderActionField>())).OrderActionStatus
                as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeBatchOrderActionField),
            "::",
            stringify!(OrderActionStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeBatchOrderActionField>())).UserID as *const _
                as usize
        },
        109usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeBatchOrderActionField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeBatchOrderActionField>())).reserve1 as *const _
                as usize
        },
        125usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeBatchOrderActionField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeBatchOrderActionField>())).MacAddress
                as *const _ as usize
        },
        141usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeBatchOrderActionField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeBatchOrderActionField>())).IPAddress
                as *const _ as usize
        },
        162usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeBatchOrderActionField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcExchangeBatchOrderActionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ������������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryBatchOrderActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryBatchOrderActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryBatchOrderActionField>(),
        33usize,
        concat!("Size of: ", stringify!(CThostFtdcQryBatchOrderActionField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryBatchOrderActionField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryBatchOrderActionField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryBatchOrderActionField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryBatchOrderActionField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryBatchOrderActionField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryBatchOrderActionField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryBatchOrderActionField>())).ExchangeID as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryBatchOrderActionField),
            "::",
            stringify!(ExchangeID)
        )
    );
}
#[doc = "��Ϻ�Լ��ȫϵ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcCombInstrumentGuardField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = ""]
    pub GuarantRatio: TThostFtdcRatioType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcCombInstrumentGuardField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcCombInstrumentGuardField>(),
        152usize,
        concat!("Size of: ", stringify!(CThostFtdcCombInstrumentGuardField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcCombInstrumentGuardField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcCombInstrumentGuardField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombInstrumentGuardField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombInstrumentGuardField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombInstrumentGuardField>())).reserve1 as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombInstrumentGuardField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombInstrumentGuardField>())).GuarantRatio as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombInstrumentGuardField),
            "::",
            stringify!(GuarantRatio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombInstrumentGuardField>())).ExchangeID as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombInstrumentGuardField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombInstrumentGuardField>())).InstrumentID as *const _
                as usize
        },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombInstrumentGuardField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcCombInstrumentGuardField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��Ϻ�Լ��ȫϵ����ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryCombInstrumentGuardField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryCombInstrumentGuardField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryCombInstrumentGuardField>(),
        132usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcQryCombInstrumentGuardField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryCombInstrumentGuardField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryCombInstrumentGuardField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryCombInstrumentGuardField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryCombInstrumentGuardField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryCombInstrumentGuardField>())).reserve1 as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryCombInstrumentGuardField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryCombInstrumentGuardField>())).ExchangeID as *const _
                as usize
        },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryCombInstrumentGuardField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryCombInstrumentGuardField>())).InstrumentID
                as *const _ as usize
        },
        51usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryCombInstrumentGuardField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcQryCombInstrumentGuardField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "������������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInputCombActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "�������"]
    pub CombActionRef: TThostFtdcOrderRefType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "���\u{5b8}�\u{edfd}��"]
    pub CombDirection: TThostFtdcCombDirectionType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcInputCombActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcInputCombActionField>(),
        284usize,
        concat!("Size of: ", stringify!(CThostFtdcInputCombActionField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcInputCombActionField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcInputCombActionField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputCombActionField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputCombActionField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputCombActionField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputCombActionField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputCombActionField>())).reserve1 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputCombActionField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputCombActionField>())).CombActionRef as *const _
                as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputCombActionField),
            "::",
            stringify!(CombActionRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputCombActionField>())).UserID as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputCombActionField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputCombActionField>())).Direction as *const _
                as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputCombActionField),
            "::",
            stringify!(Direction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputCombActionField>())).Volume as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputCombActionField),
            "::",
            stringify!(Volume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputCombActionField>())).CombDirection as *const _
                as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputCombActionField),
            "::",
            stringify!(CombDirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputCombActionField>())).HedgeFlag as *const _
                as usize
        },
        93usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputCombActionField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputCombActionField>())).ExchangeID as *const _
                as usize
        },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputCombActionField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputCombActionField>())).reserve2 as *const _ as usize
        },
        103usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputCombActionField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputCombActionField>())).MacAddress as *const _
                as usize
        },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputCombActionField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputCombActionField>())).InvestUnitID as *const _
                as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputCombActionField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputCombActionField>())).FrontID as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputCombActionField),
            "::",
            stringify!(FrontID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputCombActionField>())).SessionID as *const _
                as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputCombActionField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputCombActionField>())).InstrumentID as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputCombActionField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputCombActionField>())).IPAddress as *const _
                as usize
        },
        249usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputCombActionField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcInputCombActionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcCombActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "�������"]
    pub CombActionRef: TThostFtdcOrderRefType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "���\u{5b8}�\u{edfd}��"]
    pub CombDirection: TThostFtdcCombDirectionType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "����������ϱ��"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "���״\u{32c}"]
    pub ActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "������ʾ���"]
    pub NotifySequence: TThostFtdcSequenceNoType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "���"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�û��˲�Ʒ��Ϣ"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "״\u{32c}��Ϣ"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve3: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��ϱ��"]
    pub ComTradeID: TThostFtdcTradeIDType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcCombActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcCombActionField>(),
        604usize,
        concat!("Size of: ", stringify!(CThostFtdcCombActionField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcCombActionField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcCombActionField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombActionField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombActionField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombActionField>())).InvestorID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombActionField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombActionField>())).reserve1 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombActionField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombActionField>())).CombActionRef as *const _ as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombActionField),
            "::",
            stringify!(CombActionRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombActionField>())).UserID as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombActionField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombActionField>())).Direction as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombActionField),
            "::",
            stringify!(Direction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombActionField>())).Volume as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombActionField),
            "::",
            stringify!(Volume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombActionField>())).CombDirection as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombActionField),
            "::",
            stringify!(CombDirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombActionField>())).HedgeFlag as *const _ as usize
        },
        93usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombActionField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombActionField>())).ActionLocalID as *const _ as usize
        },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombActionField),
            "::",
            stringify!(ActionLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombActionField>())).ExchangeID as *const _ as usize
        },
        107usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombActionField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombActionField>())).ParticipantID as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombActionField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombActionField>())).ClientID as *const _ as usize
        },
        127usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombActionField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombActionField>())).reserve2 as *const _ as usize
        },
        138usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombActionField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombActionField>())).TraderID as *const _ as usize
        },
        169usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombActionField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombActionField>())).InstallID as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombActionField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombActionField>())).ActionStatus as *const _ as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombActionField),
            "::",
            stringify!(ActionStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombActionField>())).NotifySequence as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombActionField),
            "::",
            stringify!(NotifySequence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombActionField>())).TradingDay as *const _ as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombActionField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombActionField>())).SettlementID as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombActionField),
            "::",
            stringify!(SettlementID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombActionField>())).SequenceNo as *const _ as usize
        },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombActionField),
            "::",
            stringify!(SequenceNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombActionField>())).FrontID as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombActionField),
            "::",
            stringify!(FrontID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombActionField>())).SessionID as *const _ as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombActionField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombActionField>())).UserProductInfo as *const _
                as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombActionField),
            "::",
            stringify!(UserProductInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombActionField>())).StatusMsg as *const _ as usize
        },
        243usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombActionField),
            "::",
            stringify!(StatusMsg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombActionField>())).reserve3 as *const _ as usize
        },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombActionField),
            "::",
            stringify!(reserve3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombActionField>())).MacAddress as *const _ as usize
        },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombActionField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombActionField>())).ComTradeID as *const _ as usize
        },
        361usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombActionField),
            "::",
            stringify!(ComTradeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombActionField>())).BranchID as *const _ as usize
        },
        382usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombActionField),
            "::",
            stringify!(BranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombActionField>())).InvestUnitID as *const _ as usize
        },
        391usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombActionField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombActionField>())).InstrumentID as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombActionField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombActionField>())).ExchangeInstID as *const _
                as usize
        },
        489usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombActionField),
            "::",
            stringify!(ExchangeInstID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombActionField>())).IPAddress as *const _ as usize
        },
        570usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombActionField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcCombActionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "������ϲ�ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryCombActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryCombActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryCombActionField>(),
        162usize,
        concat!("Size of: ", stringify!(CThostFtdcQryCombActionField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryCombActionField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryCombActionField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryCombActionField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryCombActionField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryCombActionField>())).InvestorID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryCombActionField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryCombActionField>())).reserve1 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryCombActionField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryCombActionField>())).ExchangeID as *const _ as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryCombActionField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryCombActionField>())).InvestUnitID as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryCombActionField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryCombActionField>())).InstrumentID as *const _
                as usize
        },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryCombActionField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcQryCombActionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���������������Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeCombActionField {
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "���\u{5b8}�\u{edfd}��"]
    pub CombDirection: TThostFtdcCombDirectionType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "����������ϱ��"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "���״\u{32c}"]
    pub ActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "������ʾ���"]
    pub NotifySequence: TThostFtdcSequenceNoType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "���"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��ϱ��"]
    pub ComTradeID: TThostFtdcTradeIDType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcExchangeCombActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcExchangeCombActionField>(),
        324usize,
        concat!("Size of: ", stringify!(CThostFtdcExchangeCombActionField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcExchangeCombActionField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcExchangeCombActionField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeCombActionField>())).Direction as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeCombActionField),
            "::",
            stringify!(Direction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeCombActionField>())).Volume as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeCombActionField),
            "::",
            stringify!(Volume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeCombActionField>())).CombDirection as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeCombActionField),
            "::",
            stringify!(CombDirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeCombActionField>())).HedgeFlag as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeCombActionField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeCombActionField>())).ActionLocalID as *const _
                as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeCombActionField),
            "::",
            stringify!(ActionLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeCombActionField>())).ExchangeID as *const _
                as usize
        },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeCombActionField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeCombActionField>())).ParticipantID as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeCombActionField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeCombActionField>())).ClientID as *const _
                as usize
        },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeCombActionField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeCombActionField>())).reserve1 as *const _
                as usize
        },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeCombActionField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeCombActionField>())).TraderID as *const _
                as usize
        },
        85usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeCombActionField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeCombActionField>())).InstallID as *const _
                as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeCombActionField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeCombActionField>())).ActionStatus as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeCombActionField),
            "::",
            stringify!(ActionStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeCombActionField>())).NotifySequence as *const _
                as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeCombActionField),
            "::",
            stringify!(NotifySequence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeCombActionField>())).TradingDay as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeCombActionField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeCombActionField>())).SettlementID as *const _
                as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeCombActionField),
            "::",
            stringify!(SettlementID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeCombActionField>())).SequenceNo as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeCombActionField),
            "::",
            stringify!(SequenceNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeCombActionField>())).reserve2 as *const _
                as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeCombActionField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeCombActionField>())).MacAddress as *const _
                as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeCombActionField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeCombActionField>())).ComTradeID as *const _
                as usize
        },
        177usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeCombActionField),
            "::",
            stringify!(ComTradeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeCombActionField>())).BranchID as *const _
                as usize
        },
        198usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeCombActionField),
            "::",
            stringify!(BranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeCombActionField>())).ExchangeInstID as *const _
                as usize
        },
        207usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeCombActionField),
            "::",
            stringify!(ExchangeInstID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeCombActionField>())).IPAddress as *const _
                as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeCombActionField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcExchangeCombActionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "������������ϲ�ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryExchangeCombActionField {
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryExchangeCombActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryExchangeCombActionField>(),
        164usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcQryExchangeCombActionField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryExchangeCombActionField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryExchangeCombActionField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeCombActionField>())).ParticipantID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeCombActionField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeCombActionField>())).ClientID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeCombActionField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeCombActionField>())).reserve1 as *const _
                as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeCombActionField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeCombActionField>())).ExchangeID as *const _
                as usize
        },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeCombActionField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeCombActionField>())).TraderID as *const _
                as usize
        },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeCombActionField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeCombActionField>())).ExchangeInstID
                as *const _ as usize
        },
        83usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeCombActionField),
            "::",
            stringify!(ExchangeInstID)
        )
    );
}
impl Default for CThostFtdcQryExchangeCombActionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��Ʒ���ۻ���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcProductExchRateField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "���۱�������"]
    pub QuoteCurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "����"]
    pub ExchangeRate: TThostFtdcExchangeRateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcProductExchRateField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcProductExchRateField>(),
        144usize,
        concat!("Size of: ", stringify!(CThostFtdcProductExchRateField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcProductExchRateField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcProductExchRateField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcProductExchRateField>())).reserve1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcProductExchRateField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcProductExchRateField>())).QuoteCurrencyID as *const _
                as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcProductExchRateField),
            "::",
            stringify!(QuoteCurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcProductExchRateField>())).ExchangeRate as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcProductExchRateField),
            "::",
            stringify!(ExchangeRate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcProductExchRateField>())).ExchangeID as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcProductExchRateField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcProductExchRateField>())).ProductID as *const _
                as usize
        },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcProductExchRateField),
            "::",
            stringify!(ProductID)
        )
    );
}
impl Default for CThostFtdcProductExchRateField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��Ʒ���ۻ��ʲ�ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryProductExchRateField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryProductExchRateField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryProductExchRateField>(),
        121usize,
        concat!("Size of: ", stringify!(CThostFtdcQryProductExchRateField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryProductExchRateField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryProductExchRateField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryProductExchRateField>())).reserve1 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryProductExchRateField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryProductExchRateField>())).ExchangeID as *const _
                as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryProductExchRateField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryProductExchRateField>())).ProductID as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryProductExchRateField),
            "::",
            stringify!(ProductID)
        )
    );
}
impl Default for CThostFtdcQryProductExchRateField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯѯ�ۼ۲����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryForQuoteParamField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryForQuoteParamField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryForQuoteParamField>(),
        132usize,
        concat!("Size of: ", stringify!(CThostFtdcQryForQuoteParamField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryForQuoteParamField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryForQuoteParamField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryForQuoteParamField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryForQuoteParamField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryForQuoteParamField>())).reserve1 as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryForQuoteParamField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryForQuoteParamField>())).ExchangeID as *const _
                as usize
        },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryForQuoteParamField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryForQuoteParamField>())).InstrumentID as *const _
                as usize
        },
        51usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryForQuoteParamField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcQryForQuoteParamField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "ѯ�ۼ۲����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcForQuoteParamField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���¼�"]
    pub LastPrice: TThostFtdcPriceType,
    #[doc = "�۲�"]
    pub PriceInterval: TThostFtdcPriceType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcForQuoteParamField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcForQuoteParamField>(),
        160usize,
        concat!("Size of: ", stringify!(CThostFtdcForQuoteParamField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcForQuoteParamField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcForQuoteParamField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteParamField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteParamField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteParamField>())).reserve1 as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteParamField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteParamField>())).ExchangeID as *const _ as usize
        },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteParamField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteParamField>())).LastPrice as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteParamField),
            "::",
            stringify!(LastPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteParamField>())).PriceInterval as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteParamField),
            "::",
            stringify!(PriceInterval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcForQuoteParamField>())).InstrumentID as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcForQuoteParamField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcForQuoteParamField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ǰ��������Ȩ��Լ�����ѵ���ϸ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcMMOptionInstrCommRateField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "������������"]
    pub OpenRatioByMoney: TThostFtdcRatioType,
    #[doc = "����������"]
    pub OpenRatioByVolume: TThostFtdcRatioType,
    #[doc = "ƽ����������"]
    pub CloseRatioByMoney: TThostFtdcRatioType,
    #[doc = "ƽ��������"]
    pub CloseRatioByVolume: TThostFtdcRatioType,
    #[doc = "ƽ����������"]
    pub CloseTodayRatioByMoney: TThostFtdcRatioType,
    #[doc = "ƽ��������"]
    pub CloseTodayRatioByVolume: TThostFtdcRatioType,
    #[doc = "\u{5b4}����������"]
    pub StrikeRatioByMoney: TThostFtdcRatioType,
    #[doc = "\u{5b4}��������"]
    pub StrikeRatioByVolume: TThostFtdcRatioType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcMMOptionInstrCommRateField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcMMOptionInstrCommRateField>(),
        208usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcMMOptionInstrCommRateField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcMMOptionInstrCommRateField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcMMOptionInstrCommRateField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMMOptionInstrCommRateField>())).reserve1 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMMOptionInstrCommRateField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMMOptionInstrCommRateField>())).InvestorRange
                as *const _ as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMMOptionInstrCommRateField),
            "::",
            stringify!(InvestorRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMMOptionInstrCommRateField>())).BrokerID as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMMOptionInstrCommRateField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMMOptionInstrCommRateField>())).InvestorID as *const _
                as usize
        },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMMOptionInstrCommRateField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMMOptionInstrCommRateField>())).OpenRatioByMoney
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMMOptionInstrCommRateField),
            "::",
            stringify!(OpenRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMMOptionInstrCommRateField>())).OpenRatioByVolume
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMMOptionInstrCommRateField),
            "::",
            stringify!(OpenRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMMOptionInstrCommRateField>())).CloseRatioByMoney
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMMOptionInstrCommRateField),
            "::",
            stringify!(CloseRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMMOptionInstrCommRateField>())).CloseRatioByVolume
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMMOptionInstrCommRateField),
            "::",
            stringify!(CloseRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMMOptionInstrCommRateField>())).CloseTodayRatioByMoney
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMMOptionInstrCommRateField),
            "::",
            stringify!(CloseTodayRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMMOptionInstrCommRateField>())).CloseTodayRatioByVolume
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMMOptionInstrCommRateField),
            "::",
            stringify!(CloseTodayRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMMOptionInstrCommRateField>())).StrikeRatioByMoney
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMMOptionInstrCommRateField),
            "::",
            stringify!(StrikeRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMMOptionInstrCommRateField>())).StrikeRatioByVolume
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMMOptionInstrCommRateField),
            "::",
            stringify!(StrikeRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMMOptionInstrCommRateField>())).InstrumentID
                as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMMOptionInstrCommRateField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcMMOptionInstrCommRateField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��������Ȩ�������ʲ�ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryMMOptionInstrCommRateField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryMMOptionInstrCommRateField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryMMOptionInstrCommRateField>(),
        136usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcQryMMOptionInstrCommRateField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryMMOptionInstrCommRateField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryMMOptionInstrCommRateField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMMOptionInstrCommRateField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMMOptionInstrCommRateField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMMOptionInstrCommRateField>())).InvestorID
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMMOptionInstrCommRateField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMMOptionInstrCommRateField>())).reserve1 as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMMOptionInstrCommRateField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMMOptionInstrCommRateField>())).InstrumentID
                as *const _ as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMMOptionInstrCommRateField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcQryMMOptionInstrCommRateField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�����\u{33a}�Լ��������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcMMInstrumentCommissionRateField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "������������"]
    pub OpenRatioByMoney: TThostFtdcRatioType,
    #[doc = "����������"]
    pub OpenRatioByVolume: TThostFtdcRatioType,
    #[doc = "ƽ����������"]
    pub CloseRatioByMoney: TThostFtdcRatioType,
    #[doc = "ƽ��������"]
    pub CloseRatioByVolume: TThostFtdcRatioType,
    #[doc = "ƽ����������"]
    pub CloseTodayRatioByMoney: TThostFtdcRatioType,
    #[doc = "ƽ��������"]
    pub CloseTodayRatioByVolume: TThostFtdcRatioType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcMMInstrumentCommissionRateField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcMMInstrumentCommissionRateField>(),
        192usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcMMInstrumentCommissionRateField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcMMInstrumentCommissionRateField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcMMInstrumentCommissionRateField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMMInstrumentCommissionRateField>())).reserve1
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMMInstrumentCommissionRateField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMMInstrumentCommissionRateField>())).InvestorRange
                as *const _ as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMMInstrumentCommissionRateField),
            "::",
            stringify!(InvestorRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMMInstrumentCommissionRateField>())).BrokerID
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMMInstrumentCommissionRateField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMMInstrumentCommissionRateField>())).InvestorID
                as *const _ as usize
        },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMMInstrumentCommissionRateField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMMInstrumentCommissionRateField>())).OpenRatioByMoney
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMMInstrumentCommissionRateField),
            "::",
            stringify!(OpenRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMMInstrumentCommissionRateField>())).OpenRatioByVolume
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMMInstrumentCommissionRateField),
            "::",
            stringify!(OpenRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMMInstrumentCommissionRateField>())).CloseRatioByMoney
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMMInstrumentCommissionRateField),
            "::",
            stringify!(CloseRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMMInstrumentCommissionRateField>())).CloseRatioByVolume
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMMInstrumentCommissionRateField),
            "::",
            stringify!(CloseRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMMInstrumentCommissionRateField>()))
                .CloseTodayRatioByMoney as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMMInstrumentCommissionRateField),
            "::",
            stringify!(CloseTodayRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMMInstrumentCommissionRateField>()))
                .CloseTodayRatioByVolume as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMMInstrumentCommissionRateField),
            "::",
            stringify!(CloseTodayRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMMInstrumentCommissionRateField>())).InstrumentID
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMMInstrumentCommissionRateField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcMMInstrumentCommissionRateField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ�����\u{33a}�Լ��������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryMMInstrumentCommissionRateField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryMMInstrumentCommissionRateField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryMMInstrumentCommissionRateField>(),
        136usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcQryMMInstrumentCommissionRateField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryMMInstrumentCommissionRateField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryMMInstrumentCommissionRateField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMMInstrumentCommissionRateField>())).BrokerID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMMInstrumentCommissionRateField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMMInstrumentCommissionRateField>())).InvestorID
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMMInstrumentCommissionRateField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMMInstrumentCommissionRateField>())).reserve1
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMMInstrumentCommissionRateField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMMInstrumentCommissionRateField>())).InstrumentID
                as *const _ as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMMInstrumentCommissionRateField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcQryMMInstrumentCommissionRateField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ǰ���������ѵ���ϸ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInstrumentOrderCommRateField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "����������"]
    pub OrderCommByVolume: TThostFtdcRatioType,
    #[doc = "����������"]
    pub OrderActionCommByVolume: TThostFtdcRatioType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "����������"]
    pub OrderCommByTrade: TThostFtdcRatioType,
    #[doc = "����������"]
    pub OrderActionCommByTrade: TThostFtdcRatioType,
}
#[test]
fn bindgen_test_layout_CThostFtdcInstrumentOrderCommRateField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcInstrumentOrderCommRateField>(),
        208usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcInstrumentOrderCommRateField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcInstrumentOrderCommRateField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcInstrumentOrderCommRateField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentOrderCommRateField>())).reserve1 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentOrderCommRateField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentOrderCommRateField>())).InvestorRange
                as *const _ as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentOrderCommRateField),
            "::",
            stringify!(InvestorRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentOrderCommRateField>())).BrokerID as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentOrderCommRateField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentOrderCommRateField>())).InvestorID
                as *const _ as usize
        },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentOrderCommRateField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentOrderCommRateField>())).HedgeFlag as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentOrderCommRateField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentOrderCommRateField>())).OrderCommByVolume
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentOrderCommRateField),
            "::",
            stringify!(OrderCommByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentOrderCommRateField>()))
                .OrderActionCommByVolume as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentOrderCommRateField),
            "::",
            stringify!(OrderActionCommByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentOrderCommRateField>())).ExchangeID
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentOrderCommRateField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentOrderCommRateField>())).InvestUnitID
                as *const _ as usize
        },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentOrderCommRateField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentOrderCommRateField>())).InstrumentID
                as *const _ as usize
        },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentOrderCommRateField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentOrderCommRateField>())).OrderCommByTrade
                as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentOrderCommRateField),
            "::",
            stringify!(OrderCommByTrade)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentOrderCommRateField>()))
                .OrderActionCommByTrade as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentOrderCommRateField),
            "::",
            stringify!(OrderActionCommByTrade)
        )
    );
}
impl Default for CThostFtdcInstrumentOrderCommRateField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�����������ʲ�ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInstrumentOrderCommRateField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryInstrumentOrderCommRateField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryInstrumentOrderCommRateField>(),
        136usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcQryInstrumentOrderCommRateField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryInstrumentOrderCommRateField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryInstrumentOrderCommRateField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInstrumentOrderCommRateField>())).BrokerID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInstrumentOrderCommRateField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInstrumentOrderCommRateField>())).InvestorID
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInstrumentOrderCommRateField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInstrumentOrderCommRateField>())).reserve1
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInstrumentOrderCommRateField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInstrumentOrderCommRateField>())).InstrumentID
                as *const _ as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInstrumentOrderCommRateField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcQryInstrumentOrderCommRateField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���ײ���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTradeParamField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��������"]
    pub TradeParamID: TThostFtdcTradeParamIDType,
    #[doc = "��������\u{5b5}"]
    pub TradeParamValue: TThostFtdcSettlementParamValueType,
    #[doc = "��ע"]
    pub Memo: TThostFtdcMemoType,
}
#[test]
fn bindgen_test_layout_CThostFtdcTradeParamField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcTradeParamField>(),
        429usize,
        concat!("Size of: ", stringify!(CThostFtdcTradeParamField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcTradeParamField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcTradeParamField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradeParamField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeParamField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradeParamField>())).TradeParamID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeParamField),
            "::",
            stringify!(TradeParamID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradeParamField>())).TradeParamValue as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeParamField),
            "::",
            stringify!(TradeParamValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcTradeParamField>())).Memo as *const _ as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradeParamField),
            "::",
            stringify!(Memo)
        )
    );
}
impl Default for CThostFtdcTradeParamField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��Լ��\u{5a4}���ʵ���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInstrumentMarginRateULField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��ͷ��\u{5a4}���"]
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��ͷ��\u{5a4}���"]
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcInstrumentMarginRateULField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcInstrumentMarginRateULField>(),
        184usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcInstrumentMarginRateULField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcInstrumentMarginRateULField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcInstrumentMarginRateULField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentMarginRateULField>())).reserve1 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentMarginRateULField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentMarginRateULField>())).InvestorRange
                as *const _ as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentMarginRateULField),
            "::",
            stringify!(InvestorRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentMarginRateULField>())).BrokerID as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentMarginRateULField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentMarginRateULField>())).InvestorID as *const _
                as usize
        },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentMarginRateULField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentMarginRateULField>())).HedgeFlag as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentMarginRateULField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentMarginRateULField>())).LongMarginRatioByMoney
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentMarginRateULField),
            "::",
            stringify!(LongMarginRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentMarginRateULField>()))
                .LongMarginRatioByVolume as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentMarginRateULField),
            "::",
            stringify!(LongMarginRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentMarginRateULField>()))
                .ShortMarginRatioByMoney as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentMarginRateULField),
            "::",
            stringify!(ShortMarginRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentMarginRateULField>()))
                .ShortMarginRatioByVolume as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentMarginRateULField),
            "::",
            stringify!(ShortMarginRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentMarginRateULField>())).InstrumentID
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentMarginRateULField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcInstrumentMarginRateULField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�ڻ��\u{5b2}����Ʋ���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcFutureLimitPosiParamField {
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����Ͷ��������������"]
    pub SpecOpenVolume: TThostFtdcVolumeType,
    #[doc = "��������������������"]
    pub ArbiOpenVolume: TThostFtdcVolumeType,
    #[doc = "����Ͷ��+����������������"]
    pub OpenVolume: TThostFtdcVolumeType,
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcFutureLimitPosiParamField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcFutureLimitPosiParamField>(),
        152usize,
        concat!("Size of: ", stringify!(CThostFtdcFutureLimitPosiParamField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcFutureLimitPosiParamField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcFutureLimitPosiParamField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFutureLimitPosiParamField>())).InvestorRange
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFutureLimitPosiParamField),
            "::",
            stringify!(InvestorRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFutureLimitPosiParamField>())).BrokerID as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFutureLimitPosiParamField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFutureLimitPosiParamField>())).InvestorID as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFutureLimitPosiParamField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFutureLimitPosiParamField>())).reserve1 as *const _
                as usize
        },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFutureLimitPosiParamField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFutureLimitPosiParamField>())).SpecOpenVolume
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFutureLimitPosiParamField),
            "::",
            stringify!(SpecOpenVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFutureLimitPosiParamField>())).ArbiOpenVolume
                as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFutureLimitPosiParamField),
            "::",
            stringify!(ArbiOpenVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFutureLimitPosiParamField>())).OpenVolume as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFutureLimitPosiParamField),
            "::",
            stringify!(OpenVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFutureLimitPosiParamField>())).ProductID as *const _
                as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFutureLimitPosiParamField),
            "::",
            stringify!(ProductID)
        )
    );
}
impl Default for CThostFtdcFutureLimitPosiParamField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��\u{5b9}��¼IP"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcLoginForbiddenIPField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcLoginForbiddenIPField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcLoginForbiddenIPField>(),
        49usize,
        concat!("Size of: ", stringify!(CThostFtdcLoginForbiddenIPField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcLoginForbiddenIPField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcLoginForbiddenIPField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLoginForbiddenIPField>())).reserve1 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLoginForbiddenIPField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLoginForbiddenIPField>())).IPAddress as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLoginForbiddenIPField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcLoginForbiddenIPField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "IP�б�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcIPListField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "�Ƿ������"]
    pub IsWhite: TThostFtdcBoolType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcIPListField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcIPListField>(),
        56usize,
        concat!("Size of: ", stringify!(CThostFtdcIPListField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcIPListField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcIPListField))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcIPListField>())).reserve1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcIPListField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcIPListField>())).IsWhite as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcIPListField),
            "::",
            stringify!(IsWhite)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcIPListField>())).IPAddress as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcIPListField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcIPListField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�������Ȩ�ԶԳ�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInputOptionSelfCloseField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��Ȩ�ԶԳ�����"]
    pub OptionSelfCloseRef: TThostFtdcOrderRefType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��Ȩ��Ȩ��ͷ���Ƿ��ԶԳ�"]
    pub OptSelfCloseFlag: TThostFtdcOptSelfCloseFlagType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "�ʽ��˺�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "���ױ���"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcInputOptionSelfCloseField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcInputOptionSelfCloseField>(),
        320usize,
        concat!("Size of: ", stringify!(CThostFtdcInputOptionSelfCloseField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcInputOptionSelfCloseField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcInputOptionSelfCloseField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseField>())).reserve1 as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseField>())).OptionSelfCloseRef
                as *const _ as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseField),
            "::",
            stringify!(OptionSelfCloseRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseField>())).UserID as *const _
                as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseField>())).Volume as *const _
                as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseField),
            "::",
            stringify!(Volume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseField>())).RequestID as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseField>())).BusinessUnit as *const _
                as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseField),
            "::",
            stringify!(BusinessUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseField>())).HedgeFlag as *const _
                as usize
        },
        113usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseField>())).OptSelfCloseFlag
                as *const _ as usize
        },
        114usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseField),
            "::",
            stringify!(OptSelfCloseFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseField>())).ExchangeID as *const _
                as usize
        },
        115usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseField>())).InvestUnitID as *const _
                as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseField>())).AccountID as *const _
                as usize
        },
        141usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseField>())).CurrencyID as *const _
                as usize
        },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseField>())).ClientID as *const _
                as usize
        },
        158usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseField>())).reserve2 as *const _
                as usize
        },
        169usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseField>())).MacAddress as *const _
                as usize
        },
        185usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseField>())).InstrumentID as *const _
                as usize
        },
        206usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseField>())).IPAddress as *const _
                as usize
        },
        287usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcInputOptionSelfCloseField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "������Ȩ�ԶԳ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInputOptionSelfCloseActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��Ȩ�ԶԳ��������"]
    pub OptionSelfCloseActionRef: TThostFtdcOrderActionRefType,
    #[doc = "��Ȩ�ԶԳ�����"]
    pub OptionSelfCloseRef: TThostFtdcOrderRefType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ȩ�ԶԳ�������"]
    pub OptionSelfCloseSysID: TThostFtdcOrderSysIDType,
    #[doc = "������־"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcInputOptionSelfCloseActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcInputOptionSelfCloseActionField>(),
        304usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcInputOptionSelfCloseActionField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcInputOptionSelfCloseActionField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcInputOptionSelfCloseActionField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseActionField>())).BrokerID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseActionField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseActionField>())).InvestorID
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseActionField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseActionField>()))
                .OptionSelfCloseActionRef as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseActionField),
            "::",
            stringify!(OptionSelfCloseActionRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseActionField>())).OptionSelfCloseRef
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseActionField),
            "::",
            stringify!(OptionSelfCloseRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseActionField>())).RequestID
                as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseActionField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseActionField>())).FrontID
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseActionField),
            "::",
            stringify!(FrontID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseActionField>())).SessionID
                as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseActionField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseActionField>())).ExchangeID
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseActionField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseActionField>()))
                .OptionSelfCloseSysID as *const _ as usize
        },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseActionField),
            "::",
            stringify!(OptionSelfCloseSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseActionField>())).ActionFlag
                as *const _ as usize
        },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseActionField),
            "::",
            stringify!(ActionFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseActionField>())).UserID as *const _
                as usize
        },
        87usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseActionField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseActionField>())).reserve1
                as *const _ as usize
        },
        103usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseActionField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseActionField>())).InvestUnitID
                as *const _ as usize
        },
        134usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseActionField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseActionField>())).reserve2
                as *const _ as usize
        },
        151usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseActionField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseActionField>())).MacAddress
                as *const _ as usize
        },
        167usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseActionField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseActionField>())).InstrumentID
                as *const _ as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseActionField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInputOptionSelfCloseActionField>())).IPAddress
                as *const _ as usize
        },
        269usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInputOptionSelfCloseActionField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcInputOptionSelfCloseActionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��Ȩ�ԶԳ�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOptionSelfCloseField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��Ȩ�ԶԳ�����"]
    pub OptionSelfCloseRef: TThostFtdcOrderRefType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��Ȩ��Ȩ��ͷ���Ƿ��ԶԳ�"]
    pub OptSelfCloseFlag: TThostFtdcOptSelfCloseFlagType,
    #[doc = "������Ȩ�ԶԳ���"]
    pub OptionSelfCloseLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "��Ȩ�ԶԳ��ύ״\u{32c}"]
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    #[doc = "������ʾ���"]
    pub NotifySequence: TThostFtdcSequenceNoType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "��Ȩ�ԶԳ���"]
    pub OptionSelfCloseSysID: TThostFtdcOrderSysIDType,
    #[doc = "��������"]
    pub InsertDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub InsertTime: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub CancelTime: TThostFtdcTimeType,
    #[doc = "�ԶԳ���"]
    pub ExecResult: TThostFtdcExecResultType,
    #[doc = "�����Ա���"]
    pub ClearingPartID: TThostFtdcParticipantIDType,
    #[doc = "���"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�û��˲�Ʒ��Ϣ"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "״\u{32c}��Ϣ"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "�����û�����"]
    pub ActiveUserID: TThostFtdcUserIDType,
    #[doc = "���\u{379}�˾�������"]
    pub BrokerOptionSelfCloseSeq: TThostFtdcSequenceNoType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "�ʽ��˺�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve3: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcOptionSelfCloseField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcOptionSelfCloseField>(),
        700usize,
        concat!("Size of: ", stringify!(CThostFtdcOptionSelfCloseField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcOptionSelfCloseField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcOptionSelfCloseField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).reserve1 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).OptionSelfCloseRef
                as *const _ as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(OptionSelfCloseRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).UserID as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).Volume as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(Volume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).RequestID as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).BusinessUnit as *const _
                as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(BusinessUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).HedgeFlag as *const _
                as usize
        },
        113usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).OptSelfCloseFlag as *const _
                as usize
        },
        114usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(OptSelfCloseFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).OptionSelfCloseLocalID
                as *const _ as usize
        },
        115usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(OptionSelfCloseLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).ExchangeID as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).ParticipantID as *const _
                as usize
        },
        137usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).ClientID as *const _ as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).reserve2 as *const _ as usize
        },
        159usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).TraderID as *const _ as usize
        },
        190usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).InstallID as *const _
                as usize
        },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).OrderSubmitStatus as *const _
                as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(OrderSubmitStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).NotifySequence as *const _
                as usize
        },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(NotifySequence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).TradingDay as *const _
                as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).SettlementID as *const _
                as usize
        },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(SettlementID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).OptionSelfCloseSysID
                as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(OptionSelfCloseSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).InsertDate as *const _
                as usize
        },
        261usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(InsertDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).InsertTime as *const _
                as usize
        },
        270usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(InsertTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).CancelTime as *const _
                as usize
        },
        279usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(CancelTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).ExecResult as *const _
                as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(ExecResult)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).ClearingPartID as *const _
                as usize
        },
        289usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(ClearingPartID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).SequenceNo as *const _
                as usize
        },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(SequenceNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).FrontID as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(FrontID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).SessionID as *const _
                as usize
        },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).UserProductInfo as *const _
                as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(UserProductInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).StatusMsg as *const _
                as usize
        },
        323usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(StatusMsg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).ActiveUserID as *const _
                as usize
        },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(ActiveUserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).BrokerOptionSelfCloseSeq
                as *const _ as usize
        },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(BrokerOptionSelfCloseSeq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).BranchID as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(BranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).InvestUnitID as *const _
                as usize
        },
        433usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).AccountID as *const _
                as usize
        },
        450usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).CurrencyID as *const _
                as usize
        },
        463usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).reserve3 as *const _ as usize
        },
        467usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(reserve3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).MacAddress as *const _
                as usize
        },
        483usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).InstrumentID as *const _
                as usize
        },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).ExchangeInstID as *const _
                as usize
        },
        585usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(ExchangeInstID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseField>())).IPAddress as *const _
                as usize
        },
        666usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcOptionSelfCloseField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��Ȩ�ԶԳ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOptionSelfCloseActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��Ȩ�ԶԳ��������"]
    pub OptionSelfCloseActionRef: TThostFtdcOrderActionRefType,
    #[doc = "��Ȩ�ԶԳ�����"]
    pub OptionSelfCloseRef: TThostFtdcOrderRefType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ȩ�ԶԳ�������"]
    pub OptionSelfCloseSysID: TThostFtdcOrderSysIDType,
    #[doc = "������־"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "��������"]
    pub ActionDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub ActionTime: TThostFtdcTimeType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "������Ȩ�ԶԳ���"]
    pub OptionSelfCloseLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "�������ر��"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "��������״\u{32c}"]
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "״\u{32c}��Ϣ"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcOptionSelfCloseActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcOptionSelfCloseActionField>(),
        508usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcOptionSelfCloseActionField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcOptionSelfCloseActionField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcOptionSelfCloseActionField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseActionField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseActionField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseActionField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseActionField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseActionField>()))
                .OptionSelfCloseActionRef as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseActionField),
            "::",
            stringify!(OptionSelfCloseActionRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseActionField>())).OptionSelfCloseRef
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseActionField),
            "::",
            stringify!(OptionSelfCloseRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseActionField>())).RequestID as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseActionField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseActionField>())).FrontID as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseActionField),
            "::",
            stringify!(FrontID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseActionField>())).SessionID as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseActionField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseActionField>())).ExchangeID as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseActionField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseActionField>())).OptionSelfCloseSysID
                as *const _ as usize
        },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseActionField),
            "::",
            stringify!(OptionSelfCloseSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseActionField>())).ActionFlag as *const _
                as usize
        },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseActionField),
            "::",
            stringify!(ActionFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseActionField>())).ActionDate as *const _
                as usize
        },
        87usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseActionField),
            "::",
            stringify!(ActionDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseActionField>())).ActionTime as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseActionField),
            "::",
            stringify!(ActionTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseActionField>())).TraderID as *const _
                as usize
        },
        105usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseActionField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseActionField>())).InstallID as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseActionField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseActionField>())).OptionSelfCloseLocalID
                as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseActionField),
            "::",
            stringify!(OptionSelfCloseLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseActionField>())).ActionLocalID
                as *const _ as usize
        },
        145usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseActionField),
            "::",
            stringify!(ActionLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseActionField>())).ParticipantID
                as *const _ as usize
        },
        158usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseActionField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseActionField>())).ClientID as *const _
                as usize
        },
        169usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseActionField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseActionField>())).BusinessUnit
                as *const _ as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseActionField),
            "::",
            stringify!(BusinessUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseActionField>())).OrderActionStatus
                as *const _ as usize
        },
        201usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseActionField),
            "::",
            stringify!(OrderActionStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseActionField>())).UserID as *const _
                as usize
        },
        202usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseActionField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseActionField>())).StatusMsg as *const _
                as usize
        },
        218usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseActionField),
            "::",
            stringify!(StatusMsg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseActionField>())).reserve1 as *const _
                as usize
        },
        299usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseActionField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseActionField>())).BranchID as *const _
                as usize
        },
        330usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseActionField),
            "::",
            stringify!(BranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseActionField>())).InvestUnitID
                as *const _ as usize
        },
        339usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseActionField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseActionField>())).reserve2 as *const _
                as usize
        },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseActionField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseActionField>())).MacAddress as *const _
                as usize
        },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseActionField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseActionField>())).InstrumentID
                as *const _ as usize
        },
        393usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseActionField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOptionSelfCloseActionField>())).IPAddress as *const _
                as usize
        },
        474usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOptionSelfCloseActionField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcOptionSelfCloseActionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��Ȩ�ԶԳ��ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryOptionSelfCloseField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ȩ�ԶԳ���"]
    pub OptionSelfCloseSysID: TThostFtdcOrderSysIDType,
    #[doc = "��ʼʱ��"]
    pub InsertTimeStart: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub InsertTimeEnd: TThostFtdcTimeType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryOptionSelfCloseField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryOptionSelfCloseField>(),
        184usize,
        concat!("Size of: ", stringify!(CThostFtdcQryOptionSelfCloseField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryOptionSelfCloseField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryOptionSelfCloseField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOptionSelfCloseField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOptionSelfCloseField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOptionSelfCloseField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOptionSelfCloseField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOptionSelfCloseField>())).reserve1 as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOptionSelfCloseField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOptionSelfCloseField>())).ExchangeID as *const _
                as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOptionSelfCloseField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOptionSelfCloseField>())).OptionSelfCloseSysID
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOptionSelfCloseField),
            "::",
            stringify!(OptionSelfCloseSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOptionSelfCloseField>())).InsertTimeStart
                as *const _ as usize
        },
        85usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOptionSelfCloseField),
            "::",
            stringify!(InsertTimeStart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOptionSelfCloseField>())).InsertTimeEnd as *const _
                as usize
        },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOptionSelfCloseField),
            "::",
            stringify!(InsertTimeEnd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOptionSelfCloseField>())).InstrumentID as *const _
                as usize
        },
        103usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOptionSelfCloseField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcQryOptionSelfCloseField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��������Ȩ�ԶԳ���Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeOptionSelfCloseField {
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��Ȩ��Ȩ��ͷ���Ƿ��ԶԳ�"]
    pub OptSelfCloseFlag: TThostFtdcOptSelfCloseFlagType,
    #[doc = "������Ȩ�ԶԳ���"]
    pub OptionSelfCloseLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "��Ȩ�ԶԳ��ύ״\u{32c}"]
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    #[doc = "������ʾ���"]
    pub NotifySequence: TThostFtdcSequenceNoType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "��Ȩ�ԶԳ���"]
    pub OptionSelfCloseSysID: TThostFtdcOrderSysIDType,
    #[doc = "��������"]
    pub InsertDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub InsertTime: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub CancelTime: TThostFtdcTimeType,
    #[doc = "�ԶԳ���"]
    pub ExecResult: TThostFtdcExecResultType,
    #[doc = "�����Ա���"]
    pub ClearingPartID: TThostFtdcParticipantIDType,
    #[doc = "���"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcExchangeOptionSelfCloseField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcExchangeOptionSelfCloseField>(),
        380usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcExchangeOptionSelfCloseField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcExchangeOptionSelfCloseField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseField>())).Volume as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseField),
            "::",
            stringify!(Volume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseField>())).RequestID as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseField>())).BusinessUnit
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseField),
            "::",
            stringify!(BusinessUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseField>())).HedgeFlag as *const _
                as usize
        },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseField>())).OptSelfCloseFlag
                as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseField),
            "::",
            stringify!(OptSelfCloseFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseField>()))
                .OptionSelfCloseLocalID as *const _ as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseField),
            "::",
            stringify!(OptionSelfCloseLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseField>())).ExchangeID
                as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseField>())).ParticipantID
                as *const _ as usize
        },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseField>())).ClientID as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseField>())).reserve1 as *const _
                as usize
        },
        75usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseField>())).TraderID as *const _
                as usize
        },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseField>())).InstallID as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseField>())).OrderSubmitStatus
                as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseField),
            "::",
            stringify!(OrderSubmitStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseField>())).NotifySequence
                as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseField),
            "::",
            stringify!(NotifySequence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseField>())).TradingDay
                as *const _ as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseField>())).SettlementID
                as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseField),
            "::",
            stringify!(SettlementID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseField>())).OptionSelfCloseSysID
                as *const _ as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseField),
            "::",
            stringify!(OptionSelfCloseSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseField>())).InsertDate
                as *const _ as usize
        },
        177usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseField),
            "::",
            stringify!(InsertDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseField>())).InsertTime
                as *const _ as usize
        },
        186usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseField),
            "::",
            stringify!(InsertTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseField>())).CancelTime
                as *const _ as usize
        },
        195usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseField),
            "::",
            stringify!(CancelTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseField>())).ExecResult
                as *const _ as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseField),
            "::",
            stringify!(ExecResult)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseField>())).ClearingPartID
                as *const _ as usize
        },
        205usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseField),
            "::",
            stringify!(ClearingPartID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseField>())).SequenceNo
                as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseField),
            "::",
            stringify!(SequenceNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseField>())).BranchID as *const _
                as usize
        },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseField),
            "::",
            stringify!(BranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseField>())).reserve2 as *const _
                as usize
        },
        229usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseField>())).MacAddress
                as *const _ as usize
        },
        245usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseField>())).ExchangeInstID
                as *const _ as usize
        },
        266usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseField),
            "::",
            stringify!(ExchangeInstID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseField>())).IPAddress as *const _
                as usize
        },
        347usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcExchangeOptionSelfCloseField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��Ȩ�ԶԳ������ѯ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryOptionSelfCloseActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryOptionSelfCloseActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryOptionSelfCloseActionField>(),
        33usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcQryOptionSelfCloseActionField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryOptionSelfCloseActionField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryOptionSelfCloseActionField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOptionSelfCloseActionField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOptionSelfCloseActionField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOptionSelfCloseActionField>())).InvestorID
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOptionSelfCloseActionField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryOptionSelfCloseActionField>())).ExchangeID
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryOptionSelfCloseActionField),
            "::",
            stringify!(ExchangeID)
        )
    );
}
#[doc = "��������Ȩ�ԶԳ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeOptionSelfCloseActionField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ȩ�ԶԳ�������"]
    pub OptionSelfCloseSysID: TThostFtdcOrderSysIDType,
    #[doc = "������־"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "��������"]
    pub ActionDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub ActionTime: TThostFtdcTimeType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "������Ȩ�ԶԳ���"]
    pub OptionSelfCloseLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "�������ر��"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "��������״\u{32c}"]
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "��Ȩ��Ȩ��ͷ���Ƿ��ԶԳ�"]
    pub OptSelfCloseFlag: TThostFtdcOptSelfCloseFlagType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcExchangeOptionSelfCloseActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcExchangeOptionSelfCloseActionField>(),
        356usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseActionField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcExchangeOptionSelfCloseActionField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcExchangeOptionSelfCloseActionField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseActionField>())).ExchangeID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseActionField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseActionField>()))
                .OptionSelfCloseSysID as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseActionField),
            "::",
            stringify!(OptionSelfCloseSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseActionField>())).ActionFlag
                as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseActionField),
            "::",
            stringify!(ActionFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseActionField>())).ActionDate
                as *const _ as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseActionField),
            "::",
            stringify!(ActionDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseActionField>())).ActionTime
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseActionField),
            "::",
            stringify!(ActionTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseActionField>())).TraderID
                as *const _ as usize
        },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseActionField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseActionField>())).InstallID
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseActionField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseActionField>()))
                .OptionSelfCloseLocalID as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseActionField),
            "::",
            stringify!(OptionSelfCloseLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseActionField>())).ActionLocalID
                as *const _ as usize
        },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseActionField),
            "::",
            stringify!(ActionLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseActionField>())).ParticipantID
                as *const _ as usize
        },
        102usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseActionField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseActionField>())).ClientID
                as *const _ as usize
        },
        113usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseActionField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseActionField>())).BusinessUnit
                as *const _ as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseActionField),
            "::",
            stringify!(BusinessUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseActionField>()))
                .OrderActionStatus as *const _ as usize
        },
        145usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseActionField),
            "::",
            stringify!(OrderActionStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseActionField>())).UserID
                as *const _ as usize
        },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseActionField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseActionField>())).BranchID
                as *const _ as usize
        },
        162usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseActionField),
            "::",
            stringify!(BranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseActionField>())).reserve1
                as *const _ as usize
        },
        171usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseActionField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseActionField>())).MacAddress
                as *const _ as usize
        },
        187usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseActionField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseActionField>())).reserve2
                as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseActionField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseActionField>()))
                .OptSelfCloseFlag as *const _ as usize
        },
        239usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseActionField),
            "::",
            stringify!(OptSelfCloseFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseActionField>())).IPAddress
                as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseActionField),
            "::",
            stringify!(IPAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeOptionSelfCloseActionField>())).ExchangeInstID
                as *const _ as usize
        },
        273usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeOptionSelfCloseActionField),
            "::",
            stringify!(ExchangeInstID)
        )
    );
}
impl Default for CThostFtdcExchangeOptionSelfCloseActionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ʱ����\u{36c}��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcSyncDelaySwapField {
    #[doc = "������ˮ��"]
    pub DelaySwapSeqNo: TThostFtdcDepositSeqNoType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Դ����"]
    pub FromCurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "Դ���"]
    pub FromAmount: TThostFtdcMoneyType,
    #[doc = "Դ���㶳����(���ö���)"]
    pub FromFrozenSwap: TThostFtdcMoneyType,
    #[doc = "Դʣ�\u{efb}����(���ᶳ��)"]
    pub FromRemainSwap: TThostFtdcMoneyType,
    #[doc = "Ŀ�����"]
    pub ToCurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "Ŀ����"]
    pub ToAmount: TThostFtdcMoneyType,
    #[doc = "�Ƿ��\u{5b9}�����"]
    pub IsManualSwap: TThostFtdcBoolType,
    #[doc = "�Ƿ�������ҵ�ʣ�\u{efb}��������Ϊ0"]
    pub IsAllRemainSetZero: TThostFtdcBoolType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSyncDelaySwapField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSyncDelaySwapField>(),
        96usize,
        concat!("Size of: ", stringify!(CThostFtdcSyncDelaySwapField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSyncDelaySwapField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcSyncDelaySwapField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDelaySwapField>())).DelaySwapSeqNo as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDelaySwapField),
            "::",
            stringify!(DelaySwapSeqNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDelaySwapField>())).BrokerID as *const _ as usize
        },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDelaySwapField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDelaySwapField>())).InvestorID as *const _ as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDelaySwapField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDelaySwapField>())).FromCurrencyID as *const _
                as usize
        },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDelaySwapField),
            "::",
            stringify!(FromCurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDelaySwapField>())).FromAmount as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDelaySwapField),
            "::",
            stringify!(FromAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDelaySwapField>())).FromFrozenSwap as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDelaySwapField),
            "::",
            stringify!(FromFrozenSwap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDelaySwapField>())).FromRemainSwap as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDelaySwapField),
            "::",
            stringify!(FromRemainSwap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDelaySwapField>())).ToCurrencyID as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDelaySwapField),
            "::",
            stringify!(ToCurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDelaySwapField>())).ToAmount as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDelaySwapField),
            "::",
            stringify!(ToAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDelaySwapField>())).IsManualSwap as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDelaySwapField),
            "::",
            stringify!(IsManualSwap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDelaySwapField>())).IsAllRemainSetZero as *const _
                as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDelaySwapField),
            "::",
            stringify!(IsAllRemainSetZero)
        )
    );
}
#[doc = "��ѯ��ʱ����\u{36c}��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQrySyncDelaySwapField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��ʱ������ˮ��"]
    pub DelaySwapSeqNo: TThostFtdcDepositSeqNoType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQrySyncDelaySwapField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQrySyncDelaySwapField>(),
        26usize,
        concat!("Size of: ", stringify!(CThostFtdcQrySyncDelaySwapField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQrySyncDelaySwapField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQrySyncDelaySwapField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQrySyncDelaySwapField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQrySyncDelaySwapField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQrySyncDelaySwapField>())).DelaySwapSeqNo as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQrySyncDelaySwapField),
            "::",
            stringify!(DelaySwapSeqNo)
        )
    );
}
#[doc = "Ͷ�ʵ�Ԫ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInvestUnitField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "Ͷ���ߵ�Ԫ����"]
    pub InvestorUnitName: TThostFtdcPartyNameType,
    #[doc = "Ͷ���߷������"]
    pub InvestorGroupID: TThostFtdcInvestorIDType,
    #[doc = "��������ģ�����"]
    pub CommModelID: TThostFtdcInvestorIDType,
    #[doc = "��\u{5a4}����ģ�����"]
    pub MarginModelID: TThostFtdcInvestorIDType,
    #[doc = "�ʽ��˺�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcInvestUnitField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcInvestUnitField>(),
        178usize,
        concat!("Size of: ", stringify!(CThostFtdcInvestUnitField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcInvestUnitField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcInvestUnitField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestUnitField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestUnitField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestUnitField>())).InvestorID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestUnitField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestUnitField>())).InvestUnitID as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestUnitField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestUnitField>())).InvestorUnitName as *const _
                as usize
        },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestUnitField),
            "::",
            stringify!(InvestorUnitName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestUnitField>())).InvestorGroupID as *const _
                as usize
        },
        122usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestUnitField),
            "::",
            stringify!(InvestorGroupID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestUnitField>())).CommModelID as *const _ as usize
        },
        135usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestUnitField),
            "::",
            stringify!(CommModelID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestUnitField>())).MarginModelID as *const _ as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestUnitField),
            "::",
            stringify!(MarginModelID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestUnitField>())).AccountID as *const _ as usize
        },
        161usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestUnitField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestUnitField>())).CurrencyID as *const _ as usize
        },
        174usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestUnitField),
            "::",
            stringify!(CurrencyID)
        )
    );
}
impl Default for CThostFtdcInvestUnitField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯͶ�ʵ�Ԫ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryInvestUnitField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryInvestUnitField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryInvestUnitField>(),
        41usize,
        concat!("Size of: ", stringify!(CThostFtdcQryInvestUnitField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryInvestUnitField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryInvestUnitField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInvestUnitField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInvestUnitField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInvestUnitField>())).InvestorID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInvestUnitField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInvestUnitField>())).InvestUnitID as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInvestUnitField),
            "::",
            stringify!(InvestUnitID)
        )
    );
}
#[doc = "�����������ʽ�У��ģʽ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcSecAgentCheckModeField {
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "����"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "�����н�����ʽ��ʺ�"]
    pub BrokerSecAgentID: TThostFtdcAccountIDType,
    #[doc = "�Ƿ���ҪУ���Լ����ʽ��˻�"]
    pub CheckSelfAccount: TThostFtdcBoolType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSecAgentCheckModeField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSecAgentCheckModeField>(),
        48usize,
        concat!("Size of: ", stringify!(CThostFtdcSecAgentCheckModeField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSecAgentCheckModeField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcSecAgentCheckModeField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSecAgentCheckModeField>())).InvestorID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSecAgentCheckModeField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSecAgentCheckModeField>())).BrokerID as *const _
                as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSecAgentCheckModeField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSecAgentCheckModeField>())).CurrencyID as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSecAgentCheckModeField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSecAgentCheckModeField>())).BrokerSecAgentID
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSecAgentCheckModeField),
            "::",
            stringify!(BrokerSecAgentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSecAgentCheckModeField>())).CheckSelfAccount
                as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSecAgentCheckModeField),
            "::",
            stringify!(CheckSelfAccount)
        )
    );
}
#[doc = "������������Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSecAgentTradeInfoField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�����н�����ʽ��ʺ�"]
    pub BrokerSecAgentID: TThostFtdcAccountIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������������"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSecAgentTradeInfoField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSecAgentTradeInfoField>(),
        198usize,
        concat!("Size of: ", stringify!(CThostFtdcSecAgentTradeInfoField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSecAgentTradeInfoField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcSecAgentTradeInfoField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSecAgentTradeInfoField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSecAgentTradeInfoField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSecAgentTradeInfoField>())).BrokerSecAgentID
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSecAgentTradeInfoField),
            "::",
            stringify!(BrokerSecAgentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSecAgentTradeInfoField>())).InvestorID as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSecAgentTradeInfoField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSecAgentTradeInfoField>())).LongCustomerName
                as *const _ as usize
        },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSecAgentTradeInfoField),
            "::",
            stringify!(LongCustomerName)
        )
    );
}
impl Default for CThostFtdcSecAgentTradeInfoField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�г�����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcMarketDataField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "���¼�"]
    pub LastPrice: TThostFtdcPriceType,
    #[doc = "�ϴν����"]
    pub PreSettlementPrice: TThostFtdcPriceType,
    #[doc = "������"]
    pub PreClosePrice: TThostFtdcPriceType,
    #[doc = "��\u{5b2}���"]
    pub PreOpenInterest: TThostFtdcLargeVolumeType,
    #[doc = "����"]
    pub OpenPrice: TThostFtdcPriceType,
    #[doc = "��\u{7fc}�"]
    pub HighestPrice: TThostFtdcPriceType,
    #[doc = "��ͼ�"]
    pub LowestPrice: TThostFtdcPriceType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "�ɽ����"]
    pub Turnover: TThostFtdcMoneyType,
    #[doc = "�\u{5b2}���"]
    pub OpenInterest: TThostFtdcLargeVolumeType,
    #[doc = "������"]
    pub ClosePrice: TThostFtdcPriceType,
    #[doc = "���ν����"]
    pub SettlementPrice: TThostFtdcPriceType,
    #[doc = "��\u{363}���"]
    pub UpperLimitPrice: TThostFtdcPriceType,
    #[doc = "��\u{363}���"]
    pub LowerLimitPrice: TThostFtdcPriceType,
    #[doc = "����ʵ��"]
    pub PreDelta: TThostFtdcRatioType,
    #[doc = "����ʵ��"]
    pub CurrDelta: TThostFtdcRatioType,
    #[doc = "����\u{7b8}�ʱ��"]
    pub UpdateTime: TThostFtdcTimeType,
    #[doc = "����\u{7b8}ĺ���"]
    pub UpdateMillisec: TThostFtdcMillisecType,
    #[doc = "ҵ������"]
    pub ActionDay: TThostFtdcDateType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcMarketDataField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcMarketDataField>(),
        400usize,
        concat!("Size of: ", stringify!(CThostFtdcMarketDataField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcMarketDataField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcMarketDataField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataField>())).TradingDay as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataField>())).reserve1 as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataField>())).ExchangeID as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataField>())).reserve2 as *const _ as usize
        },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataField>())).LastPrice as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataField),
            "::",
            stringify!(LastPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataField>())).PreSettlementPrice as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataField),
            "::",
            stringify!(PreSettlementPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataField>())).PreClosePrice as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataField),
            "::",
            stringify!(PreClosePrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataField>())).PreOpenInterest as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataField),
            "::",
            stringify!(PreOpenInterest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataField>())).OpenPrice as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataField),
            "::",
            stringify!(OpenPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataField>())).HighestPrice as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataField),
            "::",
            stringify!(HighestPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataField>())).LowestPrice as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataField),
            "::",
            stringify!(LowestPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataField>())).Volume as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataField),
            "::",
            stringify!(Volume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataField>())).Turnover as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataField),
            "::",
            stringify!(Turnover)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataField>())).OpenInterest as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataField),
            "::",
            stringify!(OpenInterest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataField>())).ClosePrice as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataField),
            "::",
            stringify!(ClosePrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataField>())).SettlementPrice as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataField),
            "::",
            stringify!(SettlementPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataField>())).UpperLimitPrice as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataField),
            "::",
            stringify!(UpperLimitPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataField>())).LowerLimitPrice as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataField),
            "::",
            stringify!(LowerLimitPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataField>())).PreDelta as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataField),
            "::",
            stringify!(PreDelta)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataField>())).CurrDelta as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataField),
            "::",
            stringify!(CurrDelta)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataField>())).UpdateTime as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataField),
            "::",
            stringify!(UpdateTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataField>())).UpdateMillisec as *const _
                as usize
        },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataField),
            "::",
            stringify!(UpdateMillisec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataField>())).ActionDay as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataField),
            "::",
            stringify!(ActionDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataField>())).InstrumentID as *const _ as usize
        },
        233usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataField>())).ExchangeInstID as *const _
                as usize
        },
        314usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataField),
            "::",
            stringify!(ExchangeInstID)
        )
    );
}
impl Default for CThostFtdcMarketDataField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�����������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcMarketDataBaseField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "�ϴν����"]
    pub PreSettlementPrice: TThostFtdcPriceType,
    #[doc = "������"]
    pub PreClosePrice: TThostFtdcPriceType,
    #[doc = "��\u{5b2}���"]
    pub PreOpenInterest: TThostFtdcLargeVolumeType,
    #[doc = "����ʵ��"]
    pub PreDelta: TThostFtdcRatioType,
}
#[test]
fn bindgen_test_layout_CThostFtdcMarketDataBaseField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcMarketDataBaseField>(),
        48usize,
        concat!("Size of: ", stringify!(CThostFtdcMarketDataBaseField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcMarketDataBaseField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcMarketDataBaseField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataBaseField>())).TradingDay as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataBaseField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataBaseField>())).PreSettlementPrice as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataBaseField),
            "::",
            stringify!(PreSettlementPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataBaseField>())).PreClosePrice as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataBaseField),
            "::",
            stringify!(PreClosePrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataBaseField>())).PreOpenInterest as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataBaseField),
            "::",
            stringify!(PreOpenInterest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataBaseField>())).PreDelta as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataBaseField),
            "::",
            stringify!(PreDelta)
        )
    );
}
#[doc = "���龲\u{32c}����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcMarketDataStaticField {
    #[doc = "����"]
    pub OpenPrice: TThostFtdcPriceType,
    #[doc = "��\u{7fc}�"]
    pub HighestPrice: TThostFtdcPriceType,
    #[doc = "��ͼ�"]
    pub LowestPrice: TThostFtdcPriceType,
    #[doc = "������"]
    pub ClosePrice: TThostFtdcPriceType,
    #[doc = "��\u{363}���"]
    pub UpperLimitPrice: TThostFtdcPriceType,
    #[doc = "��\u{363}���"]
    pub LowerLimitPrice: TThostFtdcPriceType,
    #[doc = "���ν����"]
    pub SettlementPrice: TThostFtdcPriceType,
    #[doc = "����ʵ��"]
    pub CurrDelta: TThostFtdcRatioType,
}
#[test]
fn bindgen_test_layout_CThostFtdcMarketDataStaticField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcMarketDataStaticField>(),
        64usize,
        concat!("Size of: ", stringify!(CThostFtdcMarketDataStaticField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcMarketDataStaticField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcMarketDataStaticField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataStaticField>())).OpenPrice as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataStaticField),
            "::",
            stringify!(OpenPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataStaticField>())).HighestPrice as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataStaticField),
            "::",
            stringify!(HighestPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataStaticField>())).LowestPrice as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataStaticField),
            "::",
            stringify!(LowestPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataStaticField>())).ClosePrice as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataStaticField),
            "::",
            stringify!(ClosePrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataStaticField>())).UpperLimitPrice as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataStaticField),
            "::",
            stringify!(UpperLimitPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataStaticField>())).LowerLimitPrice as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataStaticField),
            "::",
            stringify!(LowerLimitPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataStaticField>())).SettlementPrice as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataStaticField),
            "::",
            stringify!(SettlementPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataStaticField>())).CurrDelta as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataStaticField),
            "::",
            stringify!(CurrDelta)
        )
    );
}
#[doc = "�������³ɽ�����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcMarketDataLastMatchField {
    #[doc = "���¼�"]
    pub LastPrice: TThostFtdcPriceType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "�ɽ����"]
    pub Turnover: TThostFtdcMoneyType,
    #[doc = "�\u{5b2}���"]
    pub OpenInterest: TThostFtdcLargeVolumeType,
}
#[test]
fn bindgen_test_layout_CThostFtdcMarketDataLastMatchField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcMarketDataLastMatchField>(),
        32usize,
        concat!("Size of: ", stringify!(CThostFtdcMarketDataLastMatchField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcMarketDataLastMatchField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcMarketDataLastMatchField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataLastMatchField>())).LastPrice as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataLastMatchField),
            "::",
            stringify!(LastPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataLastMatchField>())).Volume as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataLastMatchField),
            "::",
            stringify!(Volume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataLastMatchField>())).Turnover as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataLastMatchField),
            "::",
            stringify!(Turnover)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataLastMatchField>())).OpenInterest as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataLastMatchField),
            "::",
            stringify!(OpenInterest)
        )
    );
}
#[doc = "�������ż�����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcMarketDataBestPriceField {
    #[doc = "�����һ"]
    pub BidPrice1: TThostFtdcPriceType,
    #[doc = "������һ"]
    pub BidVolume1: TThostFtdcVolumeType,
    #[doc = "������һ"]
    pub AskPrice1: TThostFtdcPriceType,
    #[doc = "������һ"]
    pub AskVolume1: TThostFtdcVolumeType,
}
#[test]
fn bindgen_test_layout_CThostFtdcMarketDataBestPriceField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcMarketDataBestPriceField>(),
        32usize,
        concat!("Size of: ", stringify!(CThostFtdcMarketDataBestPriceField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcMarketDataBestPriceField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcMarketDataBestPriceField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataBestPriceField>())).BidPrice1 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataBestPriceField),
            "::",
            stringify!(BidPrice1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataBestPriceField>())).BidVolume1 as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataBestPriceField),
            "::",
            stringify!(BidVolume1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataBestPriceField>())).AskPrice1 as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataBestPriceField),
            "::",
            stringify!(AskPrice1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataBestPriceField>())).AskVolume1 as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataBestPriceField),
            "::",
            stringify!(AskVolume1)
        )
    );
}
#[doc = "�����������������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcMarketDataBid23Field {
    #[doc = "����۶�"]
    pub BidPrice2: TThostFtdcPriceType,
    #[doc = "��������"]
    pub BidVolume2: TThostFtdcVolumeType,
    #[doc = "�������"]
    pub BidPrice3: TThostFtdcPriceType,
    #[doc = "��������"]
    pub BidVolume3: TThostFtdcVolumeType,
}
#[test]
fn bindgen_test_layout_CThostFtdcMarketDataBid23Field() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcMarketDataBid23Field>(),
        32usize,
        concat!("Size of: ", stringify!(CThostFtdcMarketDataBid23Field))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcMarketDataBid23Field>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcMarketDataBid23Field))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataBid23Field>())).BidPrice2 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataBid23Field),
            "::",
            stringify!(BidPrice2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataBid23Field>())).BidVolume2 as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataBid23Field),
            "::",
            stringify!(BidVolume2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataBid23Field>())).BidPrice3 as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataBid23Field),
            "::",
            stringify!(BidPrice3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataBid23Field>())).BidVolume3 as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataBid23Field),
            "::",
            stringify!(BidVolume3)
        )
    );
}
#[doc = "������������������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcMarketDataAsk23Field {
    #[doc = "�����۶�"]
    pub AskPrice2: TThostFtdcPriceType,
    #[doc = "��������"]
    pub AskVolume2: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub AskPrice3: TThostFtdcPriceType,
    #[doc = "��������"]
    pub AskVolume3: TThostFtdcVolumeType,
}
#[test]
fn bindgen_test_layout_CThostFtdcMarketDataAsk23Field() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcMarketDataAsk23Field>(),
        32usize,
        concat!("Size of: ", stringify!(CThostFtdcMarketDataAsk23Field))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcMarketDataAsk23Field>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcMarketDataAsk23Field))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataAsk23Field>())).AskPrice2 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataAsk23Field),
            "::",
            stringify!(AskPrice2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataAsk23Field>())).AskVolume2 as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataAsk23Field),
            "::",
            stringify!(AskVolume2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataAsk23Field>())).AskPrice3 as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataAsk23Field),
            "::",
            stringify!(AskPrice3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataAsk23Field>())).AskVolume3 as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataAsk23Field),
            "::",
            stringify!(AskVolume3)
        )
    );
}
#[doc = "���������ġ�������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcMarketDataBid45Field {
    #[doc = "�������"]
    pub BidPrice4: TThostFtdcPriceType,
    #[doc = "��������"]
    pub BidVolume4: TThostFtdcVolumeType,
    #[doc = "�������"]
    pub BidPrice5: TThostFtdcPriceType,
    #[doc = "��������"]
    pub BidVolume5: TThostFtdcVolumeType,
}
#[test]
fn bindgen_test_layout_CThostFtdcMarketDataBid45Field() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcMarketDataBid45Field>(),
        32usize,
        concat!("Size of: ", stringify!(CThostFtdcMarketDataBid45Field))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcMarketDataBid45Field>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcMarketDataBid45Field))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataBid45Field>())).BidPrice4 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataBid45Field),
            "::",
            stringify!(BidPrice4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataBid45Field>())).BidVolume4 as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataBid45Field),
            "::",
            stringify!(BidVolume4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataBid45Field>())).BidPrice5 as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataBid45Field),
            "::",
            stringify!(BidPrice5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataBid45Field>())).BidVolume5 as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataBid45Field),
            "::",
            stringify!(BidVolume5)
        )
    );
}
#[doc = "���������ġ�������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcMarketDataAsk45Field {
    #[doc = "��������"]
    pub AskPrice4: TThostFtdcPriceType,
    #[doc = "��������"]
    pub AskVolume4: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub AskPrice5: TThostFtdcPriceType,
    #[doc = "��������"]
    pub AskVolume5: TThostFtdcVolumeType,
}
#[test]
fn bindgen_test_layout_CThostFtdcMarketDataAsk45Field() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcMarketDataAsk45Field>(),
        32usize,
        concat!("Size of: ", stringify!(CThostFtdcMarketDataAsk45Field))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcMarketDataAsk45Field>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcMarketDataAsk45Field))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataAsk45Field>())).AskPrice4 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataAsk45Field),
            "::",
            stringify!(AskPrice4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataAsk45Field>())).AskVolume4 as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataAsk45Field),
            "::",
            stringify!(AskVolume4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataAsk45Field>())).AskPrice5 as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataAsk45Field),
            "::",
            stringify!(AskPrice5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataAsk45Field>())).AskVolume5 as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataAsk45Field),
            "::",
            stringify!(AskVolume5)
        )
    );
}
#[doc = "�������ʱ������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcMarketDataUpdateTimeField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����\u{7b8}�ʱ��"]
    pub UpdateTime: TThostFtdcTimeType,
    #[doc = "����\u{7b8}ĺ���"]
    pub UpdateMillisec: TThostFtdcMillisecType,
    #[doc = "ҵ������"]
    pub ActionDay: TThostFtdcDateType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcMarketDataUpdateTimeField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcMarketDataUpdateTimeField>(),
        136usize,
        concat!("Size of: ", stringify!(CThostFtdcMarketDataUpdateTimeField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcMarketDataUpdateTimeField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcMarketDataUpdateTimeField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataUpdateTimeField>())).reserve1 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataUpdateTimeField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataUpdateTimeField>())).UpdateTime as *const _
                as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataUpdateTimeField),
            "::",
            stringify!(UpdateTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataUpdateTimeField>())).UpdateMillisec
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataUpdateTimeField),
            "::",
            stringify!(UpdateMillisec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataUpdateTimeField>())).ActionDay as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataUpdateTimeField),
            "::",
            stringify!(ActionDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataUpdateTimeField>())).InstrumentID as *const _
                as usize
        },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataUpdateTimeField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcMarketDataUpdateTimeField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�������´���"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcMarketDataBandingPriceField {
    #[doc = "�ϴ���"]
    pub BandingUpperPrice: TThostFtdcPriceType,
    #[doc = "�´���"]
    pub BandingLowerPrice: TThostFtdcPriceType,
}
#[test]
fn bindgen_test_layout_CThostFtdcMarketDataBandingPriceField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcMarketDataBandingPriceField>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcMarketDataBandingPriceField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcMarketDataBandingPriceField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcMarketDataBandingPriceField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataBandingPriceField>())).BandingUpperPrice
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataBandingPriceField),
            "::",
            stringify!(BandingUpperPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataBandingPriceField>())).BandingLowerPrice
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataBandingPriceField),
            "::",
            stringify!(BandingLowerPrice)
        )
    );
}
#[doc = "���齻������������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcMarketDataExchangeField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcMarketDataExchangeField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcMarketDataExchangeField>(),
        9usize,
        concat!("Size of: ", stringify!(CThostFtdcMarketDataExchangeField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcMarketDataExchangeField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcMarketDataExchangeField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataExchangeField>())).ExchangeID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataExchangeField),
            "::",
            stringify!(ExchangeID)
        )
    );
}
#[doc = "\u{5b8}���ĺ�Լ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSpecificInstrumentField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSpecificInstrumentField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSpecificInstrumentField>(),
        112usize,
        concat!("Size of: ", stringify!(CThostFtdcSpecificInstrumentField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSpecificInstrumentField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcSpecificInstrumentField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSpecificInstrumentField>())).reserve1 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSpecificInstrumentField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSpecificInstrumentField>())).InstrumentID as *const _
                as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSpecificInstrumentField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcSpecificInstrumentField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��Լ״\u{32c}"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInstrumentStatusField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "���������"]
    pub SettlementGroupID: TThostFtdcSettlementGroupIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldInstrumentIDType,
    #[doc = "��Լ����״\u{32c}"]
    pub InstrumentStatus: TThostFtdcInstrumentStatusType,
    #[doc = "���\u{5fd}\u{5f6}α��"]
    pub TradingSegmentSN: TThostFtdcTradingSegmentSNType,
    #[doc = "���뱾״\u{32c}ʱ��"]
    pub EnterTime: TThostFtdcTimeType,
    #[doc = "���뱾״\u{32c}ԭ��"]
    pub EnterReason: TThostFtdcInstStatusEnterReasonType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcInstrumentStatusField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcInstrumentStatusField>(),
        260usize,
        concat!("Size of: ", stringify!(CThostFtdcInstrumentStatusField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcInstrumentStatusField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcInstrumentStatusField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentStatusField>())).ExchangeID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentStatusField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentStatusField>())).reserve1 as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentStatusField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentStatusField>())).SettlementGroupID
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentStatusField),
            "::",
            stringify!(SettlementGroupID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentStatusField>())).reserve2 as *const _
                as usize
        },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentStatusField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentStatusField>())).InstrumentStatus as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentStatusField),
            "::",
            stringify!(InstrumentStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentStatusField>())).TradingSegmentSN as *const _
                as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentStatusField),
            "::",
            stringify!(TradingSegmentSN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentStatusField>())).EnterTime as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentStatusField),
            "::",
            stringify!(EnterTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentStatusField>())).EnterReason as *const _
                as usize
        },
        97usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentStatusField),
            "::",
            stringify!(EnterReason)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentStatusField>())).ExchangeInstID as *const _
                as usize
        },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentStatusField),
            "::",
            stringify!(ExchangeInstID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInstrumentStatusField>())).InstrumentID as *const _
                as usize
        },
        179usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInstrumentStatusField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcInstrumentStatusField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ��Լ״\u{32c}"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInstrumentStatusField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryInstrumentStatusField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryInstrumentStatusField>(),
        121usize,
        concat!("Size of: ", stringify!(CThostFtdcQryInstrumentStatusField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryInstrumentStatusField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryInstrumentStatusField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInstrumentStatusField>())).ExchangeID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInstrumentStatusField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInstrumentStatusField>())).reserve1 as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInstrumentStatusField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInstrumentStatusField>())).ExchangeInstID
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInstrumentStatusField),
            "::",
            stringify!(ExchangeInstID)
        )
    );
}
impl Default for CThostFtdcQryInstrumentStatusField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "Ͷ�����˻�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcInvestorAccountField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcInvestorAccountField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcInvestorAccountField>(),
        41usize,
        concat!("Size of: ", stringify!(CThostFtdcInvestorAccountField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcInvestorAccountField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcInvestorAccountField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorAccountField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorAccountField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorAccountField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorAccountField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorAccountField>())).AccountID as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorAccountField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorAccountField>())).CurrencyID as *const _
                as usize
        },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorAccountField),
            "::",
            stringify!(CurrencyID)
        )
    );
}
#[doc = "����ӯ���㷨"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcPositionProfitAlgorithmField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "ӯ���㷨"]
    pub Algorithm: TThostFtdcAlgorithmType,
    #[doc = "��ע"]
    pub Memo: TThostFtdcMemoType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcPositionProfitAlgorithmField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcPositionProfitAlgorithmField>(),
        190usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcPositionProfitAlgorithmField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcPositionProfitAlgorithmField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcPositionProfitAlgorithmField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcPositionProfitAlgorithmField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcPositionProfitAlgorithmField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcPositionProfitAlgorithmField>())).AccountID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcPositionProfitAlgorithmField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcPositionProfitAlgorithmField>())).Algorithm as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcPositionProfitAlgorithmField),
            "::",
            stringify!(Algorithm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcPositionProfitAlgorithmField>())).Memo as *const _
                as usize
        },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcPositionProfitAlgorithmField),
            "::",
            stringify!(Memo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcPositionProfitAlgorithmField>())).CurrencyID
                as *const _ as usize
        },
        186usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcPositionProfitAlgorithmField),
            "::",
            stringify!(CurrencyID)
        )
    );
}
impl Default for CThostFtdcPositionProfitAlgorithmField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��Ա�ʽ��ۿ�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcDiscountField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "�ʽ��ۿ۱���"]
    pub Discount: TThostFtdcRatioType,
}
#[test]
fn bindgen_test_layout_CThostFtdcDiscountField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcDiscountField>(),
        40usize,
        concat!("Size of: ", stringify!(CThostFtdcDiscountField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcDiscountField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcDiscountField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDiscountField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDiscountField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDiscountField>())).InvestorRange as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDiscountField),
            "::",
            stringify!(InvestorRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDiscountField>())).InvestorID as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDiscountField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDiscountField>())).Discount as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDiscountField),
            "::",
            stringify!(Discount)
        )
    );
}
#[doc = "��ѯת������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryTransferBankField {
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з����Ĵ���"]
    pub BankBrchID: TThostFtdcBankBrchIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryTransferBankField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryTransferBankField>(),
        9usize,
        concat!("Size of: ", stringify!(CThostFtdcQryTransferBankField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryTransferBankField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryTransferBankField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryTransferBankField>())).BankID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTransferBankField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryTransferBankField>())).BankBrchID as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTransferBankField),
            "::",
            stringify!(BankBrchID)
        )
    );
}
#[doc = "ת������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTransferBankField {
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з����Ĵ���"]
    pub BankBrchID: TThostFtdcBankBrchIDType,
    #[doc = "��������"]
    pub BankName: TThostFtdcBankNameType,
    #[doc = "�Ƿ��Ծ"]
    pub IsActive: TThostFtdcBoolType,
}
#[test]
fn bindgen_test_layout_CThostFtdcTransferBankField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcTransferBankField>(),
        116usize,
        concat!("Size of: ", stringify!(CThostFtdcTransferBankField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcTransferBankField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcTransferBankField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferBankField>())).BankID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferBankField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferBankField>())).BankBrchID as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferBankField),
            "::",
            stringify!(BankBrchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferBankField>())).BankName as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferBankField),
            "::",
            stringify!(BankName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferBankField>())).IsActive as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferBankField),
            "::",
            stringify!(IsActive)
        )
    );
}
impl Default for CThostFtdcTransferBankField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯͶ���\u{7f3}\u{5b2}���ϸ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInvestorPositionDetailField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryInvestorPositionDetailField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryInvestorPositionDetailField>(),
        162usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcQryInvestorPositionDetailField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryInvestorPositionDetailField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryInvestorPositionDetailField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInvestorPositionDetailField>())).BrokerID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInvestorPositionDetailField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInvestorPositionDetailField>())).InvestorID
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInvestorPositionDetailField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInvestorPositionDetailField>())).reserve1
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInvestorPositionDetailField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInvestorPositionDetailField>())).ExchangeID
                as *const _ as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInvestorPositionDetailField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInvestorPositionDetailField>())).InvestUnitID
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInvestorPositionDetailField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInvestorPositionDetailField>())).InstrumentID
                as *const _ as usize
        },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInvestorPositionDetailField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcQryInvestorPositionDetailField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "Ͷ���\u{7f3}\u{5b2}���ϸ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInvestorPositionDetailField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "����"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "��������"]
    pub OpenDate: TThostFtdcDateType,
    #[doc = "�ɽ����"]
    pub TradeID: TThostFtdcTradeIDType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "���\u{5bc}�"]
    pub OpenPrice: TThostFtdcPriceType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "�ɽ�����"]
    pub TradeType: TThostFtdcTradeTypeType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���ն���ƽ��ӯ��"]
    pub CloseProfitByDate: TThostFtdcMoneyType,
    #[doc = "��ʶԳ�ƽ��ӯ��"]
    pub CloseProfitByTrade: TThostFtdcMoneyType,
    #[doc = "���ն��г\u{5b2}�ӯ��"]
    pub PositionProfitByDate: TThostFtdcMoneyType,
    #[doc = "��ʶԳ�\u{5b2}�ӯ��"]
    pub PositionProfitByTrade: TThostFtdcMoneyType,
    #[doc = "Ͷ���\u{7f1}�\u{5a4}��"]
    pub Margin: TThostFtdcMoneyType,
    #[doc = "��������\u{5a4}��"]
    pub ExchMargin: TThostFtdcMoneyType,
    #[doc = "��\u{5a4}����"]
    pub MarginRateByMoney: TThostFtdcRatioType,
    #[doc = "��\u{5a4}����(������)"]
    pub MarginRateByVolume: TThostFtdcRatioType,
    #[doc = "������"]
    pub LastSettlementPrice: TThostFtdcPriceType,
    #[doc = "�����"]
    pub SettlementPrice: TThostFtdcPriceType,
    #[doc = "ƽ����"]
    pub CloseVolume: TThostFtdcVolumeType,
    #[doc = "ƽ�\u{5bd}��"]
    pub CloseAmount: TThostFtdcMoneyType,
    #[doc = "�ȿ���ƽʣ��������DCE��"]
    pub TimeFirstVolume: TThostFtdcVolumeType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "����\u{5b2}\u{5b1}�־"]
    pub SpecPosiType: TThostFtdcSpecPosiTypeType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��Ϻ�Լ����"]
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcInvestorPositionDetailField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcInvestorPositionDetailField>(),
        448usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcInvestorPositionDetailField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcInvestorPositionDetailField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcInvestorPositionDetailField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionDetailField>())).reserve1 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionDetailField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionDetailField>())).BrokerID as *const _
                as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionDetailField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionDetailField>())).InvestorID as *const _
                as usize
        },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionDetailField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionDetailField>())).HedgeFlag as *const _
                as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionDetailField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionDetailField>())).Direction as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionDetailField),
            "::",
            stringify!(Direction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionDetailField>())).OpenDate as *const _
                as usize
        },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionDetailField),
            "::",
            stringify!(OpenDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionDetailField>())).TradeID as *const _
                as usize
        },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionDetailField),
            "::",
            stringify!(TradeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionDetailField>())).Volume as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionDetailField),
            "::",
            stringify!(Volume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionDetailField>())).OpenPrice as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionDetailField),
            "::",
            stringify!(OpenPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionDetailField>())).TradingDay as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionDetailField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionDetailField>())).SettlementID
                as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionDetailField),
            "::",
            stringify!(SettlementID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionDetailField>())).TradeType as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionDetailField),
            "::",
            stringify!(TradeType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionDetailField>())).reserve2 as *const _
                as usize
        },
        121usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionDetailField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionDetailField>())).ExchangeID as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionDetailField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionDetailField>())).CloseProfitByDate
                as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionDetailField),
            "::",
            stringify!(CloseProfitByDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionDetailField>())).CloseProfitByTrade
                as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionDetailField),
            "::",
            stringify!(CloseProfitByTrade)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionDetailField>())).PositionProfitByDate
                as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionDetailField),
            "::",
            stringify!(PositionProfitByDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionDetailField>())).PositionProfitByTrade
                as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionDetailField),
            "::",
            stringify!(PositionProfitByTrade)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionDetailField>())).Margin as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionDetailField),
            "::",
            stringify!(Margin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionDetailField>())).ExchMargin as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionDetailField),
            "::",
            stringify!(ExchMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionDetailField>())).MarginRateByMoney
                as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionDetailField),
            "::",
            stringify!(MarginRateByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionDetailField>())).MarginRateByVolume
                as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionDetailField),
            "::",
            stringify!(MarginRateByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionDetailField>())).LastSettlementPrice
                as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionDetailField),
            "::",
            stringify!(LastSettlementPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionDetailField>())).SettlementPrice
                as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionDetailField),
            "::",
            stringify!(SettlementPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionDetailField>())).CloseVolume
                as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionDetailField),
            "::",
            stringify!(CloseVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionDetailField>())).CloseAmount
                as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionDetailField),
            "::",
            stringify!(CloseAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionDetailField>())).TimeFirstVolume
                as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionDetailField),
            "::",
            stringify!(TimeFirstVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionDetailField>())).InvestUnitID
                as *const _ as usize
        },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionDetailField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionDetailField>())).SpecPosiType
                as *const _ as usize
        },
        285usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionDetailField),
            "::",
            stringify!(SpecPosiType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionDetailField>())).InstrumentID
                as *const _ as usize
        },
        286usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionDetailField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionDetailField>())).CombInstrumentID
                as *const _ as usize
        },
        367usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionDetailField),
            "::",
            stringify!(CombInstrumentID)
        )
    );
}
impl Default for CThostFtdcInvestorPositionDetailField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�ʽ��˻�������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTradingAccountPasswordField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcTradingAccountPasswordField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcTradingAccountPasswordField>(),
        69usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcTradingAccountPasswordField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcTradingAccountPasswordField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcTradingAccountPasswordField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountPasswordField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountPasswordField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountPasswordField>())).AccountID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountPasswordField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountPasswordField>())).Password as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountPasswordField),
            "::",
            stringify!(Password)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountPasswordField>())).CurrencyID as *const _
                as usize
        },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountPasswordField),
            "::",
            stringify!(CurrencyID)
        )
    );
}
impl Default for CThostFtdcTradingAccountPasswordField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���������鱨�\u{33b}�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcMDTraderOfferField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "���ر������"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "����������Ա����״\u{32c}"]
    pub TraderConnectStatus: TThostFtdcTraderConnectStatusType,
    #[doc = "�����������������"]
    pub ConnectRequestDate: TThostFtdcDateType,
    #[doc = "�������������ʱ��"]
    pub ConnectRequestTime: TThostFtdcTimeType,
    #[doc = "�ϴα�������"]
    pub LastReportDate: TThostFtdcDateType,
    #[doc = "�ϴα���ʱ��"]
    pub LastReportTime: TThostFtdcTimeType,
    #[doc = "�����������"]
    pub ConnectDate: TThostFtdcDateType,
    #[doc = "�������ʱ��"]
    pub ConnectTime: TThostFtdcTimeType,
    #[doc = "��������"]
    pub StartDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub StartTime: TThostFtdcTimeType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��ϯλ���ɽ����"]
    pub MaxTradeID: TThostFtdcTradeIDType,
    #[doc = "��ϯλ��\u{f1a35}�����"]
    pub MaxOrderMessageReference: TThostFtdcReturnCodeType,
}
#[test]
fn bindgen_test_layout_CThostFtdcMDTraderOfferField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcMDTraderOfferField>(),
        224usize,
        concat!("Size of: ", stringify!(CThostFtdcMDTraderOfferField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcMDTraderOfferField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcMDTraderOfferField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMDTraderOfferField>())).ExchangeID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMDTraderOfferField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMDTraderOfferField>())).TraderID as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMDTraderOfferField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMDTraderOfferField>())).ParticipantID as *const _
                as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMDTraderOfferField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMDTraderOfferField>())).Password as *const _ as usize
        },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMDTraderOfferField),
            "::",
            stringify!(Password)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMDTraderOfferField>())).InstallID as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMDTraderOfferField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMDTraderOfferField>())).OrderLocalID as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMDTraderOfferField),
            "::",
            stringify!(OrderLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMDTraderOfferField>())).TraderConnectStatus as *const _
                as usize
        },
        101usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMDTraderOfferField),
            "::",
            stringify!(TraderConnectStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMDTraderOfferField>())).ConnectRequestDate as *const _
                as usize
        },
        102usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMDTraderOfferField),
            "::",
            stringify!(ConnectRequestDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMDTraderOfferField>())).ConnectRequestTime as *const _
                as usize
        },
        111usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMDTraderOfferField),
            "::",
            stringify!(ConnectRequestTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMDTraderOfferField>())).LastReportDate as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMDTraderOfferField),
            "::",
            stringify!(LastReportDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMDTraderOfferField>())).LastReportTime as *const _
                as usize
        },
        129usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMDTraderOfferField),
            "::",
            stringify!(LastReportTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMDTraderOfferField>())).ConnectDate as *const _
                as usize
        },
        138usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMDTraderOfferField),
            "::",
            stringify!(ConnectDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMDTraderOfferField>())).ConnectTime as *const _
                as usize
        },
        147usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMDTraderOfferField),
            "::",
            stringify!(ConnectTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMDTraderOfferField>())).StartDate as *const _ as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMDTraderOfferField),
            "::",
            stringify!(StartDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMDTraderOfferField>())).StartTime as *const _ as usize
        },
        165usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMDTraderOfferField),
            "::",
            stringify!(StartTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMDTraderOfferField>())).TradingDay as *const _ as usize
        },
        174usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMDTraderOfferField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMDTraderOfferField>())).BrokerID as *const _ as usize
        },
        183usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMDTraderOfferField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMDTraderOfferField>())).MaxTradeID as *const _ as usize
        },
        194usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMDTraderOfferField),
            "::",
            stringify!(MaxTradeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMDTraderOfferField>())).MaxOrderMessageReference
                as *const _ as usize
        },
        215usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMDTraderOfferField),
            "::",
            stringify!(MaxOrderMessageReference)
        )
    );
}
impl Default for CThostFtdcMDTraderOfferField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ���鱨�\u{33b}�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryMDTraderOfferField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryMDTraderOfferField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryMDTraderOfferField>(),
        41usize,
        concat!("Size of: ", stringify!(CThostFtdcQryMDTraderOfferField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryMDTraderOfferField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryMDTraderOfferField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMDTraderOfferField>())).ExchangeID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMDTraderOfferField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMDTraderOfferField>())).ParticipantID as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMDTraderOfferField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMDTraderOfferField>())).TraderID as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMDTraderOfferField),
            "::",
            stringify!(TraderID)
        )
    );
}
#[doc = "��ѯ�ͻ�\u{368}\u{5aa}"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryNoticeField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryNoticeField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryNoticeField>(),
        11usize,
        concat!("Size of: ", stringify!(CThostFtdcQryNoticeField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryNoticeField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryNoticeField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryNoticeField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryNoticeField),
            "::",
            stringify!(BrokerID)
        )
    );
}
#[doc = "�ͻ�\u{368}\u{5aa}"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcNoticeField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��Ϣ����"]
    pub Content: TThostFtdcContentType,
    #[doc = "���\u{379}�˾\u{368}\u{5aa}�������к�"]
    pub SequenceLabel: TThostFtdcSequenceLabelType,
}
#[test]
fn bindgen_test_layout_CThostFtdcNoticeField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcNoticeField>(),
        514usize,
        concat!("Size of: ", stringify!(CThostFtdcNoticeField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcNoticeField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcNoticeField))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcNoticeField>())).BrokerID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNoticeField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcNoticeField>())).Content as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNoticeField),
            "::",
            stringify!(Content)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNoticeField>())).SequenceLabel as *const _ as usize
        },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNoticeField),
            "::",
            stringify!(SequenceLabel)
        )
    );
}
impl Default for CThostFtdcNoticeField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�û�Ȩ��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcUserRightField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�ͻ�Ȩ������"]
    pub UserRightType: TThostFtdcUserRightTypeType,
    #[doc = "�Ƿ��\u{5b9}"]
    pub IsForbidden: TThostFtdcBoolType,
}
#[test]
fn bindgen_test_layout_CThostFtdcUserRightField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcUserRightField>(),
        32usize,
        concat!("Size of: ", stringify!(CThostFtdcUserRightField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcUserRightField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcUserRightField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserRightField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserRightField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcUserRightField>())).UserID as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserRightField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserRightField>())).UserRightType as *const _ as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserRightField),
            "::",
            stringify!(UserRightType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserRightField>())).IsForbidden as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserRightField),
            "::",
            stringify!(IsForbidden)
        )
    );
}
#[doc = "��ѯ������Ϣȷ����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQrySettlementInfoConfirmField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQrySettlementInfoConfirmField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQrySettlementInfoConfirmField>(),
        41usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcQrySettlementInfoConfirmField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQrySettlementInfoConfirmField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQrySettlementInfoConfirmField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQrySettlementInfoConfirmField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQrySettlementInfoConfirmField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQrySettlementInfoConfirmField>())).InvestorID
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQrySettlementInfoConfirmField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQrySettlementInfoConfirmField>())).AccountID
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQrySettlementInfoConfirmField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQrySettlementInfoConfirmField>())).CurrencyID
                as *const _ as usize
        },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQrySettlementInfoConfirmField),
            "::",
            stringify!(CurrencyID)
        )
    );
}
#[doc = "װ�ؽ�����Ϣ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcLoadSettlementInfoField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcLoadSettlementInfoField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcLoadSettlementInfoField>(),
        11usize,
        concat!("Size of: ", stringify!(CThostFtdcLoadSettlementInfoField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcLoadSettlementInfoField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcLoadSettlementInfoField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLoadSettlementInfoField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLoadSettlementInfoField),
            "::",
            stringify!(BrokerID)
        )
    );
}
#[doc = "���\u{379}�˾�����ʽ��㷨��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcBrokerWithdrawAlgorithmField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�����ʽ��㷨"]
    pub WithdrawAlgorithm: TThostFtdcAlgorithmType,
    #[doc = "�ʽ�ʹ����"]
    pub UsingRatio: TThostFtdcRatioType,
    #[doc = "�����Ƿ����ƽ��ӯ��"]
    pub IncludeCloseProfit: TThostFtdcIncludeCloseProfitType,
    #[doc = "�����\u{7b2}����\u{7b3}ɽ��ͻ��Ƿ��\u{73f}����������"]
    pub AllWithoutTrade: TThostFtdcAllWithoutTradeType,
    #[doc = "�����Ƿ����ƽ��ӯ��"]
    pub AvailIncludeCloseProfit: TThostFtdcIncludeCloseProfitType,
    #[doc = "�Ƿ������û��¼�"]
    pub IsBrokerUserEvent: TThostFtdcBoolType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "������Ѻ����"]
    pub FundMortgageRatio: TThostFtdcRatioType,
    #[doc = "Ȩ���㷨"]
    pub BalanceAlgorithm: TThostFtdcBalanceAlgorithmType,
}
#[test]
fn bindgen_test_layout_CThostFtdcBrokerWithdrawAlgorithmField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcBrokerWithdrawAlgorithmField>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcBrokerWithdrawAlgorithmField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcBrokerWithdrawAlgorithmField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcBrokerWithdrawAlgorithmField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerWithdrawAlgorithmField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerWithdrawAlgorithmField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerWithdrawAlgorithmField>())).WithdrawAlgorithm
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerWithdrawAlgorithmField),
            "::",
            stringify!(WithdrawAlgorithm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerWithdrawAlgorithmField>())).UsingRatio
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerWithdrawAlgorithmField),
            "::",
            stringify!(UsingRatio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerWithdrawAlgorithmField>())).IncludeCloseProfit
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerWithdrawAlgorithmField),
            "::",
            stringify!(IncludeCloseProfit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerWithdrawAlgorithmField>())).AllWithoutTrade
                as *const _ as usize
        },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerWithdrawAlgorithmField),
            "::",
            stringify!(AllWithoutTrade)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerWithdrawAlgorithmField>()))
                .AvailIncludeCloseProfit as *const _ as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerWithdrawAlgorithmField),
            "::",
            stringify!(AvailIncludeCloseProfit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerWithdrawAlgorithmField>())).IsBrokerUserEvent
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerWithdrawAlgorithmField),
            "::",
            stringify!(IsBrokerUserEvent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerWithdrawAlgorithmField>())).CurrencyID
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerWithdrawAlgorithmField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerWithdrawAlgorithmField>())).FundMortgageRatio
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerWithdrawAlgorithmField),
            "::",
            stringify!(FundMortgageRatio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerWithdrawAlgorithmField>())).BalanceAlgorithm
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerWithdrawAlgorithmField),
            "::",
            stringify!(BalanceAlgorithm)
        )
    );
}
#[doc = "�ʽ��˻���������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTradingAccountPasswordUpdateV1Field {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "ԭ���Ŀ���"]
    pub OldPassword: TThostFtdcPasswordType,
    #[doc = "�µĿ���"]
    pub NewPassword: TThostFtdcPasswordType,
}
#[test]
fn bindgen_test_layout_CThostFtdcTradingAccountPasswordUpdateV1Field() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcTradingAccountPasswordUpdateV1Field>(),
        106usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcTradingAccountPasswordUpdateV1Field)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcTradingAccountPasswordUpdateV1Field>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcTradingAccountPasswordUpdateV1Field)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountPasswordUpdateV1Field>())).BrokerID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountPasswordUpdateV1Field),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountPasswordUpdateV1Field>())).InvestorID
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountPasswordUpdateV1Field),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountPasswordUpdateV1Field>())).OldPassword
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountPasswordUpdateV1Field),
            "::",
            stringify!(OldPassword)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountPasswordUpdateV1Field>())).NewPassword
                as *const _ as usize
        },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountPasswordUpdateV1Field),
            "::",
            stringify!(NewPassword)
        )
    );
}
impl Default for CThostFtdcTradingAccountPasswordUpdateV1Field {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�ʽ��˻���������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTradingAccountPasswordUpdateField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "ԭ���Ŀ���"]
    pub OldPassword: TThostFtdcPasswordType,
    #[doc = "�µĿ���"]
    pub NewPassword: TThostFtdcPasswordType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcTradingAccountPasswordUpdateField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcTradingAccountPasswordUpdateField>(),
        110usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcTradingAccountPasswordUpdateField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcTradingAccountPasswordUpdateField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcTradingAccountPasswordUpdateField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountPasswordUpdateField>())).BrokerID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountPasswordUpdateField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountPasswordUpdateField>())).AccountID
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountPasswordUpdateField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountPasswordUpdateField>())).OldPassword
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountPasswordUpdateField),
            "::",
            stringify!(OldPassword)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountPasswordUpdateField>())).NewPassword
                as *const _ as usize
        },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountPasswordUpdateField),
            "::",
            stringify!(NewPassword)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountPasswordUpdateField>())).CurrencyID
                as *const _ as usize
        },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountPasswordUpdateField),
            "::",
            stringify!(CurrencyID)
        )
    );
}
impl Default for CThostFtdcTradingAccountPasswordUpdateField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ��Ϻ�Լ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryCombinationLegField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "���ȱ��"]
    pub LegID: TThostFtdcLegIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldInstrumentIDType,
    #[doc = "��Ϻ�Լ����"]
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "���Ⱥ�Լ����"]
    pub LegInstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryCombinationLegField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryCombinationLegField>(),
        232usize,
        concat!("Size of: ", stringify!(CThostFtdcQryCombinationLegField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryCombinationLegField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryCombinationLegField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryCombinationLegField>())).reserve1 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryCombinationLegField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryCombinationLegField>())).LegID as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryCombinationLegField),
            "::",
            stringify!(LegID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryCombinationLegField>())).reserve2 as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryCombinationLegField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryCombinationLegField>())).CombInstrumentID
                as *const _ as usize
        },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryCombinationLegField),
            "::",
            stringify!(CombInstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryCombinationLegField>())).LegInstrumentID as *const _
                as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryCombinationLegField),
            "::",
            stringify!(LegInstrumentID)
        )
    );
}
impl Default for CThostFtdcQryCombinationLegField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ��Ϻ�Լ����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQrySyncStatusField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQrySyncStatusField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQrySyncStatusField>(),
        9usize,
        concat!("Size of: ", stringify!(CThostFtdcQrySyncStatusField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQrySyncStatusField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQrySyncStatusField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQrySyncStatusField>())).TradingDay as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQrySyncStatusField),
            "::",
            stringify!(TradingDay)
        )
    );
}
#[doc = "��Ͻ��\u{5fa}�Լ�ĵ���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcCombinationLegField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "���ȱ��"]
    pub LegID: TThostFtdcLegIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldInstrumentIDType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "���ȳ���"]
    pub LegMultiple: TThostFtdcLegMultipleType,
    #[doc = "��������"]
    pub ImplyLevel: TThostFtdcImplyLevelType,
    #[doc = "��Ϻ�Լ����"]
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "���Ⱥ�Լ����"]
    pub LegInstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcCombinationLegField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcCombinationLegField>(),
        240usize,
        concat!("Size of: ", stringify!(CThostFtdcCombinationLegField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcCombinationLegField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcCombinationLegField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombinationLegField>())).reserve1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombinationLegField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombinationLegField>())).LegID as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombinationLegField),
            "::",
            stringify!(LegID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombinationLegField>())).reserve2 as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombinationLegField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombinationLegField>())).Direction as *const _ as usize
        },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombinationLegField),
            "::",
            stringify!(Direction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombinationLegField>())).LegMultiple as *const _
                as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombinationLegField),
            "::",
            stringify!(LegMultiple)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombinationLegField>())).ImplyLevel as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombinationLegField),
            "::",
            stringify!(ImplyLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombinationLegField>())).CombInstrumentID as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombinationLegField),
            "::",
            stringify!(CombInstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombinationLegField>())).LegInstrumentID as *const _
                as usize
        },
        157usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombinationLegField),
            "::",
            stringify!(LegInstrumentID)
        )
    );
}
impl Default for CThostFtdcCombinationLegField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "����\u{36c}��״\u{32c}"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcSyncStatusField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "����\u{36c}��״\u{32c}"]
    pub DataSyncStatus: TThostFtdcDataSyncStatusType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSyncStatusField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSyncStatusField>(),
        10usize,
        concat!("Size of: ", stringify!(CThostFtdcSyncStatusField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSyncStatusField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcSyncStatusField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncStatusField>())).TradingDay as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncStatusField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncStatusField>())).DataSyncStatus as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncStatusField),
            "::",
            stringify!(DataSyncStatus)
        )
    );
}
#[doc = "��ѯ��ϵ��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryLinkManField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryLinkManField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryLinkManField>(),
        24usize,
        concat!("Size of: ", stringify!(CThostFtdcQryLinkManField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryLinkManField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryLinkManField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryLinkManField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryLinkManField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryLinkManField>())).InvestorID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryLinkManField),
            "::",
            stringify!(InvestorID)
        )
    );
}
#[doc = "��ϵ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcLinkManField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��ϵ������"]
    pub PersonType: TThostFtdcPersonTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "����"]
    pub PersonName: TThostFtdcPartyNameType,
    #[doc = "��ϵ�绰"]
    pub Telephone: TThostFtdcTelephoneType,
    #[doc = "\u{368}Ѷ��\u{5b7}"]
    pub Address: TThostFtdcAddressType,
    #[doc = "��������"]
    pub ZipCode: TThostFtdcZipCodeType,
    #[doc = "���ȼ�"]
    pub Priority: TThostFtdcPriorityType,
    #[doc = "������������"]
    pub UOAZipCode: TThostFtdcUOAZipCodeType,
    #[doc = "ȫ��"]
    pub PersonFullName: TThostFtdcInvestorFullNameType,
}
#[test]
fn bindgen_test_layout_CThostFtdcLinkManField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcLinkManField>(),
        424usize,
        concat!("Size of: ", stringify!(CThostFtdcLinkManField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcLinkManField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcLinkManField))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcLinkManField>())).BrokerID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLinkManField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLinkManField>())).InvestorID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLinkManField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLinkManField>())).PersonType as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLinkManField),
            "::",
            stringify!(PersonType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLinkManField>())).IdentifiedCardType as *const _
                as usize
        },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLinkManField),
            "::",
            stringify!(IdentifiedCardType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLinkManField>())).IdentifiedCardNo as *const _ as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLinkManField),
            "::",
            stringify!(IdentifiedCardNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLinkManField>())).PersonName as *const _ as usize
        },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLinkManField),
            "::",
            stringify!(PersonName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLinkManField>())).Telephone as *const _ as usize
        },
        158usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLinkManField),
            "::",
            stringify!(Telephone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcLinkManField>())).Address as *const _ as usize },
        199usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLinkManField),
            "::",
            stringify!(Address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcLinkManField>())).ZipCode as *const _ as usize },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLinkManField),
            "::",
            stringify!(ZipCode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcLinkManField>())).Priority as *const _ as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLinkManField),
            "::",
            stringify!(Priority)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLinkManField>())).UOAZipCode as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLinkManField),
            "::",
            stringify!(UOAZipCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLinkManField>())).PersonFullName as *const _ as usize
        },
        323usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLinkManField),
            "::",
            stringify!(PersonFullName)
        )
    );
}
impl Default for CThostFtdcLinkManField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ���\u{379}�˾�û��¼�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryBrokerUserEventField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�û��¼�����"]
    pub UserEventType: TThostFtdcUserEventTypeType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryBrokerUserEventField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryBrokerUserEventField>(),
        28usize,
        concat!("Size of: ", stringify!(CThostFtdcQryBrokerUserEventField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryBrokerUserEventField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryBrokerUserEventField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryBrokerUserEventField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryBrokerUserEventField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryBrokerUserEventField>())).UserID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryBrokerUserEventField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryBrokerUserEventField>())).UserEventType as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryBrokerUserEventField),
            "::",
            stringify!(UserEventType)
        )
    );
}
#[doc = "��ѯ���\u{379}�˾�û��¼�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBrokerUserEventField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�û��¼�����"]
    pub UserEventType: TThostFtdcUserEventTypeType,
    #[doc = "�û��¼����"]
    pub EventSequenceNo: TThostFtdcSequenceNoType,
    #[doc = "�¼���������"]
    pub EventDate: TThostFtdcDateType,
    #[doc = "�¼�����ʱ��"]
    pub EventTime: TThostFtdcTimeType,
    #[doc = "�û��¼���Ϣ"]
    pub UserEventInfo: TThostFtdcUserEventInfoType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcBrokerUserEventField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcBrokerUserEventField>(),
        1200usize,
        concat!("Size of: ", stringify!(CThostFtdcBrokerUserEventField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcBrokerUserEventField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcBrokerUserEventField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserEventField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserEventField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserEventField>())).UserID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserEventField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserEventField>())).UserEventType as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserEventField),
            "::",
            stringify!(UserEventType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserEventField>())).EventSequenceNo as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserEventField),
            "::",
            stringify!(EventSequenceNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserEventField>())).EventDate as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserEventField),
            "::",
            stringify!(EventDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserEventField>())).EventTime as *const _
                as usize
        },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserEventField),
            "::",
            stringify!(EventTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserEventField>())).UserEventInfo as *const _
                as usize
        },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserEventField),
            "::",
            stringify!(UserEventInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserEventField>())).InvestorID as *const _
                as usize
        },
        1075usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserEventField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserEventField>())).reserve1 as *const _ as usize
        },
        1088usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserEventField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserEventField>())).InstrumentID as *const _
                as usize
        },
        1119usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserEventField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcBrokerUserEventField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯǩԼ��������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryContractBankField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з����Ĵ���"]
    pub BankBrchID: TThostFtdcBankBrchIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryContractBankField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryContractBankField>(),
        20usize,
        concat!("Size of: ", stringify!(CThostFtdcQryContractBankField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryContractBankField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryContractBankField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryContractBankField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryContractBankField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryContractBankField>())).BankID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryContractBankField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryContractBankField>())).BankBrchID as *const _
                as usize
        },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryContractBankField),
            "::",
            stringify!(BankBrchID)
        )
    );
}
#[doc = "��ѯǩԼ������Ӧ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcContractBankField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з����Ĵ���"]
    pub BankBrchID: TThostFtdcBankBrchIDType,
    #[doc = "��������"]
    pub BankName: TThostFtdcBankNameType,
}
#[test]
fn bindgen_test_layout_CThostFtdcContractBankField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcContractBankField>(),
        121usize,
        concat!("Size of: ", stringify!(CThostFtdcContractBankField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcContractBankField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcContractBankField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcContractBankField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcContractBankField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcContractBankField>())).BankID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcContractBankField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcContractBankField>())).BankBrchID as *const _ as usize
        },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcContractBankField),
            "::",
            stringify!(BankBrchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcContractBankField>())).BankName as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcContractBankField),
            "::",
            stringify!(BankName)
        )
    );
}
impl Default for CThostFtdcContractBankField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "Ͷ������ϳ\u{5b2}���ϸ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInvestorPositionCombineDetailField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "��������"]
    pub OpenDate: TThostFtdcDateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��ϱ��"]
    pub ComTradeID: TThostFtdcTradeIDType,
    #[doc = "��ϱ��"]
    pub TradeID: TThostFtdcTradeIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "����"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "�\u{5b2}���"]
    pub TotalAmt: TThostFtdcVolumeType,
    #[doc = "Ͷ���\u{7f1}�\u{5a4}��"]
    pub Margin: TThostFtdcMoneyType,
    #[doc = "��������\u{5a4}��"]
    pub ExchMargin: TThostFtdcMoneyType,
    #[doc = "��\u{5a4}����"]
    pub MarginRateByMoney: TThostFtdcRatioType,
    #[doc = "��\u{5a4}����(������)"]
    pub MarginRateByVolume: TThostFtdcRatioType,
    #[doc = "���ȱ��"]
    pub LegID: TThostFtdcLegIDType,
    #[doc = "���ȳ���"]
    pub LegMultiple: TThostFtdcLegMultipleType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldInstrumentIDType,
    #[doc = "�ɽ����"]
    pub TradeGroupID: TThostFtdcTradeGroupIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��ϳ\u{5b2}\u{5ba}�Լ����"]
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcInvestorPositionCombineDetailField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcInvestorPositionCombineDetailField>(),
        392usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcInvestorPositionCombineDetailField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcInvestorPositionCombineDetailField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcInvestorPositionCombineDetailField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionCombineDetailField>())).TradingDay
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionCombineDetailField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionCombineDetailField>())).OpenDate
                as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionCombineDetailField),
            "::",
            stringify!(OpenDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionCombineDetailField>())).ExchangeID
                as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionCombineDetailField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionCombineDetailField>())).SettlementID
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionCombineDetailField),
            "::",
            stringify!(SettlementID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionCombineDetailField>())).BrokerID
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionCombineDetailField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionCombineDetailField>())).InvestorID
                as *const _ as usize
        },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionCombineDetailField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionCombineDetailField>())).ComTradeID
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionCombineDetailField),
            "::",
            stringify!(ComTradeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionCombineDetailField>())).TradeID
                as *const _ as usize
        },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionCombineDetailField),
            "::",
            stringify!(TradeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionCombineDetailField>())).reserve1
                as *const _ as usize
        },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionCombineDetailField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionCombineDetailField>())).HedgeFlag
                as *const _ as usize
        },
        129usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionCombineDetailField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionCombineDetailField>())).Direction
                as *const _ as usize
        },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionCombineDetailField),
            "::",
            stringify!(Direction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionCombineDetailField>())).TotalAmt
                as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionCombineDetailField),
            "::",
            stringify!(TotalAmt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionCombineDetailField>())).Margin
                as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionCombineDetailField),
            "::",
            stringify!(Margin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionCombineDetailField>())).ExchMargin
                as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionCombineDetailField),
            "::",
            stringify!(ExchMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionCombineDetailField>()))
                .MarginRateByMoney as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionCombineDetailField),
            "::",
            stringify!(MarginRateByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionCombineDetailField>()))
                .MarginRateByVolume as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionCombineDetailField),
            "::",
            stringify!(MarginRateByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionCombineDetailField>())).LegID
                as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionCombineDetailField),
            "::",
            stringify!(LegID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionCombineDetailField>())).LegMultiple
                as *const _ as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionCombineDetailField),
            "::",
            stringify!(LegMultiple)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionCombineDetailField>())).reserve2
                as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionCombineDetailField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionCombineDetailField>())).TradeGroupID
                as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionCombineDetailField),
            "::",
            stringify!(TradeGroupID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionCombineDetailField>())).InvestUnitID
                as *const _ as usize
        },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionCombineDetailField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionCombineDetailField>())).InstrumentID
                as *const _ as usize
        },
        229usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionCombineDetailField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorPositionCombineDetailField>()))
                .CombInstrumentID as *const _ as usize
        },
        310usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorPositionCombineDetailField),
            "::",
            stringify!(CombInstrumentID)
        )
    );
}
impl Default for CThostFtdcInvestorPositionCombineDetailField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "Ԥ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcParkedOrderField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��������"]
    pub OrderRef: TThostFtdcOrderRefType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�����۸�����"]
    pub OrderPriceType: TThostFtdcOrderPriceTypeType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "��Ͽ�ƽ��־"]
    pub CombOffsetFlag: TThostFtdcCombOffsetFlagType,
    #[doc = "���Ͷ���ױ���־"]
    pub CombHedgeFlag: TThostFtdcCombHedgeFlagType,
    #[doc = "�۸�"]
    pub LimitPrice: TThostFtdcPriceType,
    #[doc = "����"]
    pub VolumeTotalOriginal: TThostFtdcVolumeType,
    #[doc = "��Ч������"]
    pub TimeCondition: TThostFtdcTimeConditionType,
    #[doc = "GTD����"]
    pub GTDDate: TThostFtdcDateType,
    #[doc = "�ɽ�������"]
    pub VolumeCondition: TThostFtdcVolumeConditionType,
    #[doc = "��С�ɽ���"]
    pub MinVolume: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub ContingentCondition: TThostFtdcContingentConditionType,
    #[doc = "\u{5b9}���"]
    pub StopPrice: TThostFtdcPriceType,
    #[doc = "ǿƽԭ��"]
    pub ForceCloseReason: TThostFtdcForceCloseReasonType,
    #[doc = "�Զ������־"]
    pub IsAutoSuspend: TThostFtdcBoolType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "�û�ǿ����־"]
    pub UserForceClose: TThostFtdcBoolType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ԥ�\u{71a35}����"]
    pub ParkedOrderID: TThostFtdcParkedOrderIDType,
    #[doc = "�û�����"]
    pub UserType: TThostFtdcUserTypeType,
    #[doc = "Ԥ��״\u{32c}"]
    pub Status: TThostFtdcParkedOrderStatusType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "��������־"]
    pub IsSwapOrder: TThostFtdcBoolType,
    #[doc = "�ʽ��˺�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "���ױ���"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcParkedOrderField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcParkedOrderField>(),
        488usize,
        concat!("Size of: ", stringify!(CThostFtdcParkedOrderField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcParkedOrderField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcParkedOrderField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).InvestorID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).reserve1 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).OrderRef as *const _ as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(OrderRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).UserID as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).OrderPriceType as *const _
                as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(OrderPriceType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).Direction as *const _ as usize
        },
        85usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(Direction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).CombOffsetFlag as *const _
                as usize
        },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(CombOffsetFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).CombHedgeFlag as *const _
                as usize
        },
        91usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(CombHedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).LimitPrice as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(LimitPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).VolumeTotalOriginal as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(VolumeTotalOriginal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).TimeCondition as *const _
                as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(TimeCondition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).GTDDate as *const _ as usize
        },
        109usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(GTDDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).VolumeCondition as *const _
                as usize
        },
        118usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(VolumeCondition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).MinVolume as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(MinVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).ContingentCondition as *const _
                as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(ContingentCondition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).StopPrice as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(StopPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).ForceCloseReason as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(ForceCloseReason)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).IsAutoSuspend as *const _
                as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(IsAutoSuspend)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).BusinessUnit as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(BusinessUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).RequestID as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).UserForceClose as *const _
                as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(UserForceClose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).ExchangeID as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).ParkedOrderID as *const _
                as usize
        },
        185usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(ParkedOrderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).UserType as *const _ as usize
        },
        198usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(UserType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).Status as *const _ as usize
        },
        199usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(Status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).ErrorID as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(ErrorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).ErrorMsg as *const _ as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(ErrorMsg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).IsSwapOrder as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(IsSwapOrder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).AccountID as *const _ as usize
        },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).CurrencyID as *const _ as usize
        },
        305usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).ClientID as *const _ as usize
        },
        309usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).InvestUnitID as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).reserve2 as *const _ as usize
        },
        337usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).MacAddress as *const _ as usize
        },
        353usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).InstrumentID as *const _ as usize
        },
        374usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderField>())).IPAddress as *const _ as usize
        },
        455usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcParkedOrderField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "����Ԥ�\u{75972}���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcParkedOrderActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "������������"]
    pub OrderActionRef: TThostFtdcOrderActionRefType,
    #[doc = "��������"]
    pub OrderRef: TThostFtdcOrderRefType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "�������"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "������־"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "�۸�"]
    pub LimitPrice: TThostFtdcPriceType,
    #[doc = "�����仯"]
    pub VolumeChange: TThostFtdcVolumeType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ԥ�\u{73df5}������"]
    pub ParkedOrderActionID: TThostFtdcParkedOrderActionIDType,
    #[doc = "�û�����"]
    pub UserType: TThostFtdcUserTypeType,
    #[doc = "Ԥ�\u{73df5}�״\u{32c}"]
    pub Status: TThostFtdcParkedOrderStatusType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcParkedOrderActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcParkedOrderActionField>(),
        424usize,
        concat!("Size of: ", stringify!(CThostFtdcParkedOrderActionField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcParkedOrderActionField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcParkedOrderActionField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderActionField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderActionField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderActionField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderActionField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderActionField>())).OrderActionRef as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderActionField),
            "::",
            stringify!(OrderActionRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderActionField>())).OrderRef as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderActionField),
            "::",
            stringify!(OrderRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderActionField>())).RequestID as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderActionField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderActionField>())).FrontID as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderActionField),
            "::",
            stringify!(FrontID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderActionField>())).SessionID as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderActionField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderActionField>())).ExchangeID as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderActionField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderActionField>())).OrderSysID as *const _
                as usize
        },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderActionField),
            "::",
            stringify!(OrderSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderActionField>())).ActionFlag as *const _
                as usize
        },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderActionField),
            "::",
            stringify!(ActionFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderActionField>())).LimitPrice as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderActionField),
            "::",
            stringify!(LimitPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderActionField>())).VolumeChange as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderActionField),
            "::",
            stringify!(VolumeChange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderActionField>())).UserID as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderActionField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderActionField>())).reserve1 as *const _
                as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderActionField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderActionField>())).ParkedOrderActionID
                as *const _ as usize
        },
        147usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderActionField),
            "::",
            stringify!(ParkedOrderActionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderActionField>())).UserType as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderActionField),
            "::",
            stringify!(UserType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderActionField>())).Status as *const _ as usize
        },
        161usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderActionField),
            "::",
            stringify!(Status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderActionField>())).ErrorID as *const _
                as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderActionField),
            "::",
            stringify!(ErrorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderActionField>())).ErrorMsg as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderActionField),
            "::",
            stringify!(ErrorMsg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderActionField>())).InvestUnitID as *const _
                as usize
        },
        249usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderActionField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderActionField>())).reserve2 as *const _
                as usize
        },
        266usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderActionField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderActionField>())).MacAddress as *const _
                as usize
        },
        282usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderActionField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderActionField>())).InstrumentID as *const _
                as usize
        },
        303usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderActionField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcParkedOrderActionField>())).IPAddress as *const _
                as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcParkedOrderActionField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcParkedOrderActionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯԤ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryParkedOrderField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryParkedOrderField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryParkedOrderField>(),
        162usize,
        concat!("Size of: ", stringify!(CThostFtdcQryParkedOrderField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryParkedOrderField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryParkedOrderField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryParkedOrderField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryParkedOrderField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryParkedOrderField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryParkedOrderField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryParkedOrderField>())).reserve1 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryParkedOrderField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryParkedOrderField>())).ExchangeID as *const _
                as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryParkedOrderField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryParkedOrderField>())).InvestUnitID as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryParkedOrderField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryParkedOrderField>())).InstrumentID as *const _
                as usize
        },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryParkedOrderField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcQryParkedOrderField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯԤ�\u{73df5}�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryParkedOrderActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryParkedOrderActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryParkedOrderActionField>(),
        162usize,
        concat!("Size of: ", stringify!(CThostFtdcQryParkedOrderActionField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryParkedOrderActionField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryParkedOrderActionField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryParkedOrderActionField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryParkedOrderActionField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryParkedOrderActionField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryParkedOrderActionField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryParkedOrderActionField>())).reserve1 as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryParkedOrderActionField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryParkedOrderActionField>())).ExchangeID as *const _
                as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryParkedOrderActionField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryParkedOrderActionField>())).InvestUnitID as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryParkedOrderActionField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryParkedOrderActionField>())).InstrumentID as *const _
                as usize
        },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryParkedOrderActionField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcQryParkedOrderActionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "ɾ��Ԥ��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcRemoveParkedOrderField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ԥ�\u{71a35}����"]
    pub ParkedOrderID: TThostFtdcParkedOrderIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcRemoveParkedOrderField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcRemoveParkedOrderField>(),
        54usize,
        concat!("Size of: ", stringify!(CThostFtdcRemoveParkedOrderField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcRemoveParkedOrderField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcRemoveParkedOrderField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRemoveParkedOrderField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRemoveParkedOrderField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRemoveParkedOrderField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRemoveParkedOrderField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRemoveParkedOrderField>())).ParkedOrderID as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRemoveParkedOrderField),
            "::",
            stringify!(ParkedOrderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRemoveParkedOrderField>())).InvestUnitID as *const _
                as usize
        },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRemoveParkedOrderField),
            "::",
            stringify!(InvestUnitID)
        )
    );
}
#[doc = "ɾ��Ԥ�\u{73df5}�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcRemoveParkedOrderActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ԥ�\u{73df5}����"]
    pub ParkedOrderActionID: TThostFtdcParkedOrderActionIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcRemoveParkedOrderActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcRemoveParkedOrderActionField>(),
        54usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcRemoveParkedOrderActionField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcRemoveParkedOrderActionField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcRemoveParkedOrderActionField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRemoveParkedOrderActionField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRemoveParkedOrderActionField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRemoveParkedOrderActionField>())).InvestorID
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRemoveParkedOrderActionField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRemoveParkedOrderActionField>())).ParkedOrderActionID
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRemoveParkedOrderActionField),
            "::",
            stringify!(ParkedOrderActionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRemoveParkedOrderActionField>())).InvestUnitID
                as *const _ as usize
        },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRemoveParkedOrderActionField),
            "::",
            stringify!(InvestUnitID)
        )
    );
}
#[doc = "���\u{379}�˾�����ʽ��㷨��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcInvestorWithdrawAlgorithmField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "�����ʽ����"]
    pub UsingRatio: TThostFtdcRatioType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "������Ѻ����"]
    pub FundMortgageRatio: TThostFtdcRatioType,
}
#[test]
fn bindgen_test_layout_CThostFtdcInvestorWithdrawAlgorithmField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcInvestorWithdrawAlgorithmField>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcInvestorWithdrawAlgorithmField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcInvestorWithdrawAlgorithmField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcInvestorWithdrawAlgorithmField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorWithdrawAlgorithmField>())).BrokerID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorWithdrawAlgorithmField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorWithdrawAlgorithmField>())).InvestorRange
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorWithdrawAlgorithmField),
            "::",
            stringify!(InvestorRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorWithdrawAlgorithmField>())).InvestorID
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorWithdrawAlgorithmField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorWithdrawAlgorithmField>())).UsingRatio
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorWithdrawAlgorithmField),
            "::",
            stringify!(UsingRatio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorWithdrawAlgorithmField>())).CurrencyID
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorWithdrawAlgorithmField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorWithdrawAlgorithmField>())).FundMortgageRatio
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorWithdrawAlgorithmField),
            "::",
            stringify!(FundMortgageRatio)
        )
    );
}
#[doc = "��ѯ��ϳ\u{5b2}���ϸ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInvestorPositionCombineDetailField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��ϳ\u{5b2}\u{5ba}�Լ����"]
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryInvestorPositionCombineDetailField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryInvestorPositionCombineDetailField>(),
        162usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcQryInvestorPositionCombineDetailField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryInvestorPositionCombineDetailField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryInvestorPositionCombineDetailField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInvestorPositionCombineDetailField>())).BrokerID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInvestorPositionCombineDetailField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInvestorPositionCombineDetailField>())).InvestorID
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInvestorPositionCombineDetailField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInvestorPositionCombineDetailField>())).reserve1
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInvestorPositionCombineDetailField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInvestorPositionCombineDetailField>())).ExchangeID
                as *const _ as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInvestorPositionCombineDetailField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInvestorPositionCombineDetailField>())).InvestUnitID
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInvestorPositionCombineDetailField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInvestorPositionCombineDetailField>()))
                .CombInstrumentID as *const _ as usize
        },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInvestorPositionCombineDetailField),
            "::",
            stringify!(CombInstrumentID)
        )
    );
}
impl Default for CThostFtdcQryInvestorPositionCombineDetailField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�ɽ�����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcMarketDataAveragePriceField {
    #[doc = "���վ���"]
    pub AveragePrice: TThostFtdcPriceType,
}
#[test]
fn bindgen_test_layout_CThostFtdcMarketDataAveragePriceField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcMarketDataAveragePriceField>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcMarketDataAveragePriceField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcMarketDataAveragePriceField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcMarketDataAveragePriceField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarketDataAveragePriceField>())).AveragePrice
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarketDataAveragePriceField),
            "::",
            stringify!(AveragePrice)
        )
    );
}
#[doc = "У��Ͷ��������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcVerifyInvestorPasswordField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "����"]
    pub Password: TThostFtdcPasswordType,
}
#[test]
fn bindgen_test_layout_CThostFtdcVerifyInvestorPasswordField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcVerifyInvestorPasswordField>(),
        65usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcVerifyInvestorPasswordField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcVerifyInvestorPasswordField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcVerifyInvestorPasswordField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyInvestorPasswordField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyInvestorPasswordField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyInvestorPasswordField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyInvestorPasswordField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyInvestorPasswordField>())).Password as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyInvestorPasswordField),
            "::",
            stringify!(Password)
        )
    );
}
impl Default for CThostFtdcVerifyInvestorPasswordField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�û�IP"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcUserIPField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
    #[doc = "IP��\u{5b7}����"]
    pub IPMask: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcUserIPField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcUserIPField>(),
        146usize,
        concat!("Size of: ", stringify!(CThostFtdcUserIPField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcUserIPField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcUserIPField))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcUserIPField>())).BrokerID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserIPField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcUserIPField>())).UserID as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserIPField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcUserIPField>())).reserve1 as *const _ as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserIPField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcUserIPField>())).reserve2 as *const _ as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserIPField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserIPField>())).MacAddress as *const _ as usize
        },
        59usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserIPField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcUserIPField>())).IPAddress as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserIPField),
            "::",
            stringify!(IPAddress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcUserIPField>())).IPMask as *const _ as usize },
        113usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserIPField),
            "::",
            stringify!(IPMask)
        )
    );
}
impl Default for CThostFtdcUserIPField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�û��¼�\u{368}\u{5aa}��Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTradingNoticeInfoField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "����ʱ��"]
    pub SendTime: TThostFtdcTimeType,
    #[doc = "��Ϣ����"]
    pub FieldContent: TThostFtdcContentType,
    #[doc = "����ϵ�к�"]
    pub SequenceSeries: TThostFtdcSequenceSeriesType,
    #[doc = "���к�"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcTradingNoticeInfoField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcTradingNoticeInfoField>(),
        560usize,
        concat!("Size of: ", stringify!(CThostFtdcTradingNoticeInfoField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcTradingNoticeInfoField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcTradingNoticeInfoField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingNoticeInfoField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingNoticeInfoField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingNoticeInfoField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingNoticeInfoField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingNoticeInfoField>())).SendTime as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingNoticeInfoField),
            "::",
            stringify!(SendTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingNoticeInfoField>())).FieldContent as *const _
                as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingNoticeInfoField),
            "::",
            stringify!(FieldContent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingNoticeInfoField>())).SequenceSeries as *const _
                as usize
        },
        534usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingNoticeInfoField),
            "::",
            stringify!(SequenceSeries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingNoticeInfoField>())).SequenceNo as *const _
                as usize
        },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingNoticeInfoField),
            "::",
            stringify!(SequenceNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingNoticeInfoField>())).InvestUnitID as *const _
                as usize
        },
        540usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingNoticeInfoField),
            "::",
            stringify!(InvestUnitID)
        )
    );
}
impl Default for CThostFtdcTradingNoticeInfoField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�û��¼�\u{368}\u{5aa}"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTradingNoticeField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "����ϵ�к�"]
    pub SequenceSeries: TThostFtdcSequenceSeriesType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "����ʱ��"]
    pub SendTime: TThostFtdcTimeType,
    #[doc = "���к�"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "��Ϣ����"]
    pub FieldContent: TThostFtdcContentType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcTradingNoticeField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcTradingNoticeField>(),
        580usize,
        concat!("Size of: ", stringify!(CThostFtdcTradingNoticeField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcTradingNoticeField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcTradingNoticeField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingNoticeField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingNoticeField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingNoticeField>())).InvestorRange as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingNoticeField),
            "::",
            stringify!(InvestorRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingNoticeField>())).InvestorID as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingNoticeField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingNoticeField>())).SequenceSeries as *const _
                as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingNoticeField),
            "::",
            stringify!(SequenceSeries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingNoticeField>())).UserID as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingNoticeField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingNoticeField>())).SendTime as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingNoticeField),
            "::",
            stringify!(SendTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingNoticeField>())).SequenceNo as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingNoticeField),
            "::",
            stringify!(SequenceNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingNoticeField>())).FieldContent as *const _
                as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingNoticeField),
            "::",
            stringify!(FieldContent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingNoticeField>())).InvestUnitID as *const _
                as usize
        },
        561usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingNoticeField),
            "::",
            stringify!(InvestUnitID)
        )
    );
}
impl Default for CThostFtdcTradingNoticeField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ�����¼�\u{368}\u{5aa}"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryTradingNoticeField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryTradingNoticeField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryTradingNoticeField>(),
        41usize,
        concat!("Size of: ", stringify!(CThostFtdcQryTradingNoticeField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryTradingNoticeField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryTradingNoticeField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryTradingNoticeField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTradingNoticeField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryTradingNoticeField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTradingNoticeField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryTradingNoticeField>())).InvestUnitID as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTradingNoticeField),
            "::",
            stringify!(InvestUnitID)
        )
    );
}
#[doc = "��ѯ���\u{f1a35}�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryErrOrderField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryErrOrderField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryErrOrderField>(),
        24usize,
        concat!("Size of: ", stringify!(CThostFtdcQryErrOrderField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryErrOrderField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryErrOrderField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryErrOrderField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryErrOrderField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryErrOrderField>())).InvestorID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryErrOrderField),
            "::",
            stringify!(InvestorID)
        )
    );
}
#[doc = "���\u{f1a35}�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcErrOrderField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��������"]
    pub OrderRef: TThostFtdcOrderRefType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�����۸�����"]
    pub OrderPriceType: TThostFtdcOrderPriceTypeType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "��Ͽ�ƽ��־"]
    pub CombOffsetFlag: TThostFtdcCombOffsetFlagType,
    #[doc = "���Ͷ���ױ���־"]
    pub CombHedgeFlag: TThostFtdcCombHedgeFlagType,
    #[doc = "�۸�"]
    pub LimitPrice: TThostFtdcPriceType,
    #[doc = "����"]
    pub VolumeTotalOriginal: TThostFtdcVolumeType,
    #[doc = "��Ч������"]
    pub TimeCondition: TThostFtdcTimeConditionType,
    #[doc = "GTD����"]
    pub GTDDate: TThostFtdcDateType,
    #[doc = "�ɽ�������"]
    pub VolumeCondition: TThostFtdcVolumeConditionType,
    #[doc = "��С�ɽ���"]
    pub MinVolume: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub ContingentCondition: TThostFtdcContingentConditionType,
    #[doc = "\u{5b9}���"]
    pub StopPrice: TThostFtdcPriceType,
    #[doc = "ǿƽԭ��"]
    pub ForceCloseReason: TThostFtdcForceCloseReasonType,
    #[doc = "�Զ������־"]
    pub IsAutoSuspend: TThostFtdcBoolType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "�û�ǿ����־"]
    pub UserForceClose: TThostFtdcBoolType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "��������־"]
    pub IsSwapOrder: TThostFtdcBoolType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "�ʽ��˺�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "���ױ���"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcErrOrderField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcErrOrderField>(),
        480usize,
        concat!("Size of: ", stringify!(CThostFtdcErrOrderField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcErrOrderField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcErrOrderField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderField>())).InvestorID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderField>())).reserve1 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderField>())).OrderRef as *const _ as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderField),
            "::",
            stringify!(OrderRef)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcErrOrderField>())).UserID as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderField>())).OrderPriceType as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderField),
            "::",
            stringify!(OrderPriceType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderField>())).Direction as *const _ as usize
        },
        85usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderField),
            "::",
            stringify!(Direction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderField>())).CombOffsetFlag as *const _ as usize
        },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderField),
            "::",
            stringify!(CombOffsetFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderField>())).CombHedgeFlag as *const _ as usize
        },
        91usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderField),
            "::",
            stringify!(CombHedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderField>())).LimitPrice as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderField),
            "::",
            stringify!(LimitPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderField>())).VolumeTotalOriginal as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderField),
            "::",
            stringify!(VolumeTotalOriginal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderField>())).TimeCondition as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderField),
            "::",
            stringify!(TimeCondition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcErrOrderField>())).GTDDate as *const _ as usize },
        109usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderField),
            "::",
            stringify!(GTDDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderField>())).VolumeCondition as *const _ as usize
        },
        118usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderField),
            "::",
            stringify!(VolumeCondition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderField>())).MinVolume as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderField),
            "::",
            stringify!(MinVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderField>())).ContingentCondition as *const _
                as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderField),
            "::",
            stringify!(ContingentCondition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderField>())).StopPrice as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderField),
            "::",
            stringify!(StopPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderField>())).ForceCloseReason as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderField),
            "::",
            stringify!(ForceCloseReason)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderField>())).IsAutoSuspend as *const _ as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderField),
            "::",
            stringify!(IsAutoSuspend)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderField>())).BusinessUnit as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderField),
            "::",
            stringify!(BusinessUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderField>())).RequestID as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderField>())).UserForceClose as *const _ as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderField),
            "::",
            stringify!(UserForceClose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcErrOrderField>())).ErrorID as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderField),
            "::",
            stringify!(ErrorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderField>())).ErrorMsg as *const _ as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderField),
            "::",
            stringify!(ErrorMsg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderField>())).IsSwapOrder as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderField),
            "::",
            stringify!(IsSwapOrder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderField>())).ExchangeID as *const _ as usize
        },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderField>())).InvestUnitID as *const _ as usize
        },
        277usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderField>())).AccountID as *const _ as usize
        },
        294usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderField>())).CurrencyID as *const _ as usize
        },
        307usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderField>())).ClientID as *const _ as usize
        },
        311usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderField>())).reserve2 as *const _ as usize
        },
        322usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderField>())).MacAddress as *const _ as usize
        },
        338usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderField>())).InstrumentID as *const _ as usize
        },
        359usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderField>())).IPAddress as *const _ as usize
        },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcErrOrderField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ���\u{f1a35}�����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcErrorConditionalOrderField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��������"]
    pub OrderRef: TThostFtdcOrderRefType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�����۸�����"]
    pub OrderPriceType: TThostFtdcOrderPriceTypeType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "��Ͽ�ƽ��־"]
    pub CombOffsetFlag: TThostFtdcCombOffsetFlagType,
    #[doc = "���Ͷ���ױ���־"]
    pub CombHedgeFlag: TThostFtdcCombHedgeFlagType,
    #[doc = "�۸�"]
    pub LimitPrice: TThostFtdcPriceType,
    #[doc = "����"]
    pub VolumeTotalOriginal: TThostFtdcVolumeType,
    #[doc = "��Ч������"]
    pub TimeCondition: TThostFtdcTimeConditionType,
    #[doc = "GTD����"]
    pub GTDDate: TThostFtdcDateType,
    #[doc = "�ɽ�������"]
    pub VolumeCondition: TThostFtdcVolumeConditionType,
    #[doc = "��С�ɽ���"]
    pub MinVolume: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub ContingentCondition: TThostFtdcContingentConditionType,
    #[doc = "\u{5b9}���"]
    pub StopPrice: TThostFtdcPriceType,
    #[doc = "ǿƽԭ��"]
    pub ForceCloseReason: TThostFtdcForceCloseReasonType,
    #[doc = "�Զ������־"]
    pub IsAutoSuspend: TThostFtdcBoolType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "���ر������"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�����ύ״\u{32c}"]
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    #[doc = "������ʾ���"]
    pub NotifySequence: TThostFtdcSequenceNoType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "�������"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "������Դ"]
    pub OrderSource: TThostFtdcOrderSourceType,
    #[doc = "����״\u{32c}"]
    pub OrderStatus: TThostFtdcOrderStatusType,
    #[doc = "��������"]
    pub OrderType: TThostFtdcOrderTypeType,
    #[doc = "��ɽ�����"]
    pub VolumeTraded: TThostFtdcVolumeType,
    #[doc = "ʣ������"]
    pub VolumeTotal: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub InsertDate: TThostFtdcDateType,
    #[doc = "ί��ʱ��"]
    pub InsertTime: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub ActiveTime: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub SuspendTime: TThostFtdcTimeType,
    #[doc = "����\u{7b8}�ʱ��"]
    pub UpdateTime: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub CancelTime: TThostFtdcTimeType,
    #[doc = "����\u{7b8}Ľ���������Ա����"]
    pub ActiveTraderID: TThostFtdcTraderIDType,
    #[doc = "�����Ա���"]
    pub ClearingPartID: TThostFtdcParticipantIDType,
    #[doc = "���"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�û��˲�Ʒ��Ϣ"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "״\u{32c}��Ϣ"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "�û�ǿ����־"]
    pub UserForceClose: TThostFtdcBoolType,
    #[doc = "�����û�����"]
    pub ActiveUserID: TThostFtdcUserIDType,
    #[doc = "���\u{379}�˾�������"]
    pub BrokerOrderSeq: TThostFtdcSequenceNoType,
    #[doc = "��ر���"]
    pub RelativeOrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "\u{5a3}�����ɽ�����"]
    pub ZCETotalTradedVolume: TThostFtdcVolumeType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "��������־"]
    pub IsSwapOrder: TThostFtdcBoolType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "�ʽ��˺�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve3: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcErrorConditionalOrderField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcErrorConditionalOrderField>(),
        944usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcErrorConditionalOrderField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcErrorConditionalOrderField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcErrorConditionalOrderField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).reserve1 as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).OrderRef as *const _
                as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(OrderRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).UserID as *const _
                as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).OrderPriceType
                as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(OrderPriceType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).Direction as *const _
                as usize
        },
        85usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(Direction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).CombOffsetFlag
                as *const _ as usize
        },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(CombOffsetFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).CombHedgeFlag
                as *const _ as usize
        },
        91usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(CombHedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).LimitPrice as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(LimitPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).VolumeTotalOriginal
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(VolumeTotalOriginal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).TimeCondition
                as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(TimeCondition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).GTDDate as *const _
                as usize
        },
        109usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(GTDDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).VolumeCondition
                as *const _ as usize
        },
        118usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(VolumeCondition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).MinVolume as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(MinVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).ContingentCondition
                as *const _ as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(ContingentCondition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).StopPrice as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(StopPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).ForceCloseReason
                as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(ForceCloseReason)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).IsAutoSuspend
                as *const _ as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(IsAutoSuspend)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).BusinessUnit
                as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(BusinessUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).RequestID as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).OrderLocalID
                as *const _ as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(OrderLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).ExchangeID as *const _
                as usize
        },
        185usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).ParticipantID
                as *const _ as usize
        },
        194usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).ClientID as *const _
                as usize
        },
        205usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).reserve2 as *const _
                as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).TraderID as *const _
                as usize
        },
        247usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).InstallID as *const _
                as usize
        },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).OrderSubmitStatus
                as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(OrderSubmitStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).NotifySequence
                as *const _ as usize
        },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(NotifySequence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).TradingDay as *const _
                as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).SettlementID
                as *const _ as usize
        },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(SettlementID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).OrderSysID as *const _
                as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(OrderSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).OrderSource as *const _
                as usize
        },
        317usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(OrderSource)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).OrderStatus as *const _
                as usize
        },
        318usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(OrderStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).OrderType as *const _
                as usize
        },
        319usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(OrderType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).VolumeTraded
                as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(VolumeTraded)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).VolumeTotal as *const _
                as usize
        },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(VolumeTotal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).InsertDate as *const _
                as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(InsertDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).InsertTime as *const _
                as usize
        },
        337usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(InsertTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).ActiveTime as *const _
                as usize
        },
        346usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(ActiveTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).SuspendTime as *const _
                as usize
        },
        355usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(SuspendTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).UpdateTime as *const _
                as usize
        },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(UpdateTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).CancelTime as *const _
                as usize
        },
        373usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(CancelTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).ActiveTraderID
                as *const _ as usize
        },
        382usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(ActiveTraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).ClearingPartID
                as *const _ as usize
        },
        403usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(ClearingPartID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).SequenceNo as *const _
                as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(SequenceNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).FrontID as *const _
                as usize
        },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(FrontID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).SessionID as *const _
                as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).UserProductInfo
                as *const _ as usize
        },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(UserProductInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).StatusMsg as *const _
                as usize
        },
        439usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(StatusMsg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).UserForceClose
                as *const _ as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(UserForceClose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).ActiveUserID
                as *const _ as usize
        },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(ActiveUserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).BrokerOrderSeq
                as *const _ as usize
        },
        540usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(BrokerOrderSeq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).RelativeOrderSysID
                as *const _ as usize
        },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(RelativeOrderSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).ZCETotalTradedVolume
                as *const _ as usize
        },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(ZCETotalTradedVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).ErrorID as *const _
                as usize
        },
        572usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(ErrorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).ErrorMsg as *const _
                as usize
        },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(ErrorMsg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).IsSwapOrder as *const _
                as usize
        },
        660usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(IsSwapOrder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).BranchID as *const _
                as usize
        },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(BranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).InvestUnitID
                as *const _ as usize
        },
        673usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).AccountID as *const _
                as usize
        },
        690usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).CurrencyID as *const _
                as usize
        },
        703usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).reserve3 as *const _
                as usize
        },
        707usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(reserve3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).MacAddress as *const _
                as usize
        },
        723usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).InstrumentID
                as *const _ as usize
        },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).ExchangeInstID
                as *const _ as usize
        },
        825usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(ExchangeInstID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrorConditionalOrderField>())).IPAddress as *const _
                as usize
        },
        906usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrorConditionalOrderField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcErrorConditionalOrderField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ���\u{f1a35}�����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryErrOrderActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryErrOrderActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryErrOrderActionField>(),
        24usize,
        concat!("Size of: ", stringify!(CThostFtdcQryErrOrderActionField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryErrOrderActionField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryErrOrderActionField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryErrOrderActionField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryErrOrderActionField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryErrOrderActionField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryErrOrderActionField),
            "::",
            stringify!(InvestorID)
        )
    );
}
#[doc = "���\u{f1a35}�����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcErrOrderActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "������������"]
    pub OrderActionRef: TThostFtdcOrderActionRefType,
    #[doc = "��������"]
    pub OrderRef: TThostFtdcOrderRefType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "�������"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "������־"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "�۸�"]
    pub LimitPrice: TThostFtdcPriceType,
    #[doc = "�����仯"]
    pub VolumeChange: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub ActionDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub ActionTime: TThostFtdcTimeType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "���ر������"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "�������ر��"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "��������״\u{32c}"]
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "״\u{32c}��Ϣ"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcErrOrderActionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcErrOrderActionField>(),
        608usize,
        concat!("Size of: ", stringify!(CThostFtdcErrOrderActionField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcErrOrderActionField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcErrOrderActionField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderActionField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderActionField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderActionField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderActionField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderActionField>())).OrderActionRef as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderActionField),
            "::",
            stringify!(OrderActionRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderActionField>())).OrderRef as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderActionField),
            "::",
            stringify!(OrderRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderActionField>())).RequestID as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderActionField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderActionField>())).FrontID as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderActionField),
            "::",
            stringify!(FrontID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderActionField>())).SessionID as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderActionField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderActionField>())).ExchangeID as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderActionField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderActionField>())).OrderSysID as *const _
                as usize
        },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderActionField),
            "::",
            stringify!(OrderSysID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderActionField>())).ActionFlag as *const _
                as usize
        },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderActionField),
            "::",
            stringify!(ActionFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderActionField>())).LimitPrice as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderActionField),
            "::",
            stringify!(LimitPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderActionField>())).VolumeChange as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderActionField),
            "::",
            stringify!(VolumeChange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderActionField>())).ActionDate as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderActionField),
            "::",
            stringify!(ActionDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderActionField>())).ActionTime as *const _
                as usize
        },
        109usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderActionField),
            "::",
            stringify!(ActionTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderActionField>())).TraderID as *const _ as usize
        },
        118usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderActionField),
            "::",
            stringify!(TraderID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderActionField>())).InstallID as *const _ as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderActionField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderActionField>())).OrderLocalID as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderActionField),
            "::",
            stringify!(OrderLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderActionField>())).ActionLocalID as *const _
                as usize
        },
        157usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderActionField),
            "::",
            stringify!(ActionLocalID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderActionField>())).ParticipantID as *const _
                as usize
        },
        170usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderActionField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderActionField>())).ClientID as *const _ as usize
        },
        181usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderActionField),
            "::",
            stringify!(ClientID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderActionField>())).BusinessUnit as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderActionField),
            "::",
            stringify!(BusinessUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderActionField>())).OrderActionStatus as *const _
                as usize
        },
        213usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderActionField),
            "::",
            stringify!(OrderActionStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderActionField>())).UserID as *const _ as usize
        },
        214usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderActionField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderActionField>())).StatusMsg as *const _ as usize
        },
        230usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderActionField),
            "::",
            stringify!(StatusMsg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderActionField>())).reserve1 as *const _ as usize
        },
        311usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderActionField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderActionField>())).BranchID as *const _ as usize
        },
        342usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderActionField),
            "::",
            stringify!(BranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderActionField>())).InvestUnitID as *const _
                as usize
        },
        351usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderActionField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderActionField>())).reserve2 as *const _ as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderActionField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderActionField>())).MacAddress as *const _
                as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderActionField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderActionField>())).ErrorID as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderActionField),
            "::",
            stringify!(ErrorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderActionField>())).ErrorMsg as *const _ as usize
        },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderActionField),
            "::",
            stringify!(ErrorMsg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderActionField>())).InstrumentID as *const _
                as usize
        },
        493usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderActionField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcErrOrderActionField>())).IPAddress as *const _ as usize
        },
        574usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcErrOrderActionField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcErrOrderActionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ������״\u{32c}"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryExchangeSequenceField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryExchangeSequenceField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryExchangeSequenceField>(),
        9usize,
        concat!("Size of: ", stringify!(CThostFtdcQryExchangeSequenceField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryExchangeSequenceField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryExchangeSequenceField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryExchangeSequenceField>())).ExchangeID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryExchangeSequenceField),
            "::",
            stringify!(ExchangeID)
        )
    );
}
#[doc = "������״\u{32c}"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcExchangeSequenceField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "��Լ����״\u{32c}"]
    pub MarketStatus: TThostFtdcInstrumentStatusType,
}
#[test]
fn bindgen_test_layout_CThostFtdcExchangeSequenceField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcExchangeSequenceField>(),
        20usize,
        concat!("Size of: ", stringify!(CThostFtdcExchangeSequenceField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcExchangeSequenceField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcExchangeSequenceField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeSequenceField>())).ExchangeID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeSequenceField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeSequenceField>())).SequenceNo as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeSequenceField),
            "::",
            stringify!(SequenceNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcExchangeSequenceField>())).MarketStatus as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcExchangeSequenceField),
            "::",
            stringify!(MarketStatus)
        )
    );
}
#[doc = "���ݼ۸��ѯ��\u{f1a35}�����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryMaxOrderVolumeWithPriceField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "��ƽ��־"]
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "���������������"]
    pub MaxVolume: TThostFtdcVolumeType,
    #[doc = "�����۸�"]
    pub Price: TThostFtdcPriceType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryMaxOrderVolumeWithPriceField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryMaxOrderVolumeWithPriceField>(),
        184usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcQryMaxOrderVolumeWithPriceField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryMaxOrderVolumeWithPriceField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryMaxOrderVolumeWithPriceField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMaxOrderVolumeWithPriceField>())).BrokerID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMaxOrderVolumeWithPriceField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMaxOrderVolumeWithPriceField>())).InvestorID
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMaxOrderVolumeWithPriceField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMaxOrderVolumeWithPriceField>())).reserve1
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMaxOrderVolumeWithPriceField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMaxOrderVolumeWithPriceField>())).Direction
                as *const _ as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMaxOrderVolumeWithPriceField),
            "::",
            stringify!(Direction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMaxOrderVolumeWithPriceField>())).OffsetFlag
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMaxOrderVolumeWithPriceField),
            "::",
            stringify!(OffsetFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMaxOrderVolumeWithPriceField>())).HedgeFlag
                as *const _ as usize
        },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMaxOrderVolumeWithPriceField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMaxOrderVolumeWithPriceField>())).MaxVolume
                as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMaxOrderVolumeWithPriceField),
            "::",
            stringify!(MaxVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMaxOrderVolumeWithPriceField>())).Price as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMaxOrderVolumeWithPriceField),
            "::",
            stringify!(Price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMaxOrderVolumeWithPriceField>())).ExchangeID
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMaxOrderVolumeWithPriceField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMaxOrderVolumeWithPriceField>())).InvestUnitID
                as *const _ as usize
        },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMaxOrderVolumeWithPriceField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMaxOrderVolumeWithPriceField>())).InstrumentID
                as *const _ as usize
        },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMaxOrderVolumeWithPriceField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcQryMaxOrderVolumeWithPriceField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ���\u{379}�˾���ײ���"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryBrokerTradingParamsField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryBrokerTradingParamsField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryBrokerTradingParamsField>(),
        41usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcQryBrokerTradingParamsField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryBrokerTradingParamsField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryBrokerTradingParamsField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryBrokerTradingParamsField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryBrokerTradingParamsField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryBrokerTradingParamsField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryBrokerTradingParamsField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryBrokerTradingParamsField>())).CurrencyID as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryBrokerTradingParamsField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryBrokerTradingParamsField>())).AccountID as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryBrokerTradingParamsField),
            "::",
            stringify!(AccountID)
        )
    );
}
#[doc = "���\u{379}�˾���ײ���"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcBrokerTradingParamsField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��\u{5a4}��۸�����"]
    pub MarginPriceType: TThostFtdcMarginPriceTypeType,
    #[doc = "ӯ���㷨"]
    pub Algorithm: TThostFtdcAlgorithmType,
    #[doc = "�����Ƿ����ƽ��ӯ��"]
    pub AvailIncludeCloseProfit: TThostFtdcIncludeCloseProfitType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "��ȨȨ����۸�����"]
    pub OptionRoyaltyPriceType: TThostFtdcOptionRoyaltyPriceTypeType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcBrokerTradingParamsField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcBrokerTradingParamsField>(),
        45usize,
        concat!("Size of: ", stringify!(CThostFtdcBrokerTradingParamsField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcBrokerTradingParamsField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcBrokerTradingParamsField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerTradingParamsField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerTradingParamsField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerTradingParamsField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerTradingParamsField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerTradingParamsField>())).MarginPriceType
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerTradingParamsField),
            "::",
            stringify!(MarginPriceType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerTradingParamsField>())).Algorithm as *const _
                as usize
        },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerTradingParamsField),
            "::",
            stringify!(Algorithm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerTradingParamsField>())).AvailIncludeCloseProfit
                as *const _ as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerTradingParamsField),
            "::",
            stringify!(AvailIncludeCloseProfit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerTradingParamsField>())).CurrencyID as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerTradingParamsField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerTradingParamsField>())).OptionRoyaltyPriceType
                as *const _ as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerTradingParamsField),
            "::",
            stringify!(OptionRoyaltyPriceType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerTradingParamsField>())).AccountID as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerTradingParamsField),
            "::",
            stringify!(AccountID)
        )
    );
}
#[doc = "��ѯ���\u{379}�˾�����㷨"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryBrokerTradingAlgosField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryBrokerTradingAlgosField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryBrokerTradingAlgosField>(),
        132usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcQryBrokerTradingAlgosField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryBrokerTradingAlgosField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryBrokerTradingAlgosField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryBrokerTradingAlgosField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryBrokerTradingAlgosField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryBrokerTradingAlgosField>())).ExchangeID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryBrokerTradingAlgosField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryBrokerTradingAlgosField>())).reserve1 as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryBrokerTradingAlgosField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryBrokerTradingAlgosField>())).InstrumentID
                as *const _ as usize
        },
        51usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryBrokerTradingAlgosField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcQryBrokerTradingAlgosField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���\u{379}�˾�����㷨"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBrokerTradingAlgosField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "�\u{5b2}\u{5b4}����㷨���"]
    pub HandlePositionAlgoID: TThostFtdcHandlePositionAlgoIDType,
    #[doc = "Ѱ�ұ�\u{5a4}�����㷨���"]
    pub FindMarginRateAlgoID: TThostFtdcFindMarginRateAlgoIDType,
    #[doc = "�ʽ����㷨���"]
    pub HandleTradingAccountAlgoID: TThostFtdcHandleTradingAccountAlgoIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcBrokerTradingAlgosField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcBrokerTradingAlgosField>(),
        135usize,
        concat!("Size of: ", stringify!(CThostFtdcBrokerTradingAlgosField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcBrokerTradingAlgosField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcBrokerTradingAlgosField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerTradingAlgosField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerTradingAlgosField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerTradingAlgosField>())).ExchangeID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerTradingAlgosField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerTradingAlgosField>())).reserve1 as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerTradingAlgosField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerTradingAlgosField>())).HandlePositionAlgoID
                as *const _ as usize
        },
        51usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerTradingAlgosField),
            "::",
            stringify!(HandlePositionAlgoID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerTradingAlgosField>())).FindMarginRateAlgoID
                as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerTradingAlgosField),
            "::",
            stringify!(FindMarginRateAlgoID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerTradingAlgosField>())).HandleTradingAccountAlgoID
                as *const _ as usize
        },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerTradingAlgosField),
            "::",
            stringify!(HandleTradingAccountAlgoID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerTradingAlgosField>())).InstrumentID as *const _
                as usize
        },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerTradingAlgosField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcBrokerTradingAlgosField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ���\u{379}�˾�ʽ�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQueryBrokerDepositField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQueryBrokerDepositField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQueryBrokerDepositField>(),
        20usize,
        concat!("Size of: ", stringify!(CThostFtdcQueryBrokerDepositField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQueryBrokerDepositField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQueryBrokerDepositField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQueryBrokerDepositField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQueryBrokerDepositField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQueryBrokerDepositField>())).ExchangeID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQueryBrokerDepositField),
            "::",
            stringify!(ExchangeID)
        )
    );
}
#[doc = "���\u{379}�˾�ʽ�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcBrokerDepositField {
    #[doc = "��������"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "�ϴν���\u{5fc}����"]
    pub PreBalance: TThostFtdcMoneyType,
    #[doc = "��ǰ��\u{5a4}���\u{736}�"]
    pub CurrMargin: TThostFtdcMoneyType,
    #[doc = "ƽ��ӯ��"]
    pub CloseProfit: TThostFtdcMoneyType,
    #[doc = "�ڻ�����\u{5fc}����"]
    pub Balance: TThostFtdcMoneyType,
    #[doc = "�����"]
    pub Deposit: TThostFtdcMoneyType,
    #[doc = "������"]
    pub Withdraw: TThostFtdcMoneyType,
    #[doc = "�����ʽ�"]
    pub Available: TThostFtdcMoneyType,
    #[doc = "����\u{5fc}����"]
    pub Reserve: TThostFtdcMoneyType,
    #[doc = "����ı�\u{5a4}��"]
    pub FrozenMargin: TThostFtdcMoneyType,
}
#[test]
fn bindgen_test_layout_CThostFtdcBrokerDepositField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcBrokerDepositField>(),
        112usize,
        concat!("Size of: ", stringify!(CThostFtdcBrokerDepositField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcBrokerDepositField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcBrokerDepositField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerDepositField>())).TradingDay as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerDepositField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerDepositField>())).BrokerID as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerDepositField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerDepositField>())).ParticipantID as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerDepositField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerDepositField>())).ExchangeID as *const _ as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerDepositField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerDepositField>())).PreBalance as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerDepositField),
            "::",
            stringify!(PreBalance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerDepositField>())).CurrMargin as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerDepositField),
            "::",
            stringify!(CurrMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerDepositField>())).CloseProfit as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerDepositField),
            "::",
            stringify!(CloseProfit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerDepositField>())).Balance as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerDepositField),
            "::",
            stringify!(Balance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerDepositField>())).Deposit as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerDepositField),
            "::",
            stringify!(Deposit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerDepositField>())).Withdraw as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerDepositField),
            "::",
            stringify!(Withdraw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerDepositField>())).Available as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerDepositField),
            "::",
            stringify!(Available)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerDepositField>())).Reserve as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerDepositField),
            "::",
            stringify!(Reserve)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerDepositField>())).FrozenMargin as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerDepositField),
            "::",
            stringify!(FrozenMargin)
        )
    );
}
#[doc = "��ѯ��\u{5a4}����ϵͳ���\u{379}�˾��Կ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryCFMMCBrokerKeyField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryCFMMCBrokerKeyField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryCFMMCBrokerKeyField>(),
        11usize,
        concat!("Size of: ", stringify!(CThostFtdcQryCFMMCBrokerKeyField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryCFMMCBrokerKeyField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryCFMMCBrokerKeyField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryCFMMCBrokerKeyField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryCFMMCBrokerKeyField),
            "::",
            stringify!(BrokerID)
        )
    );
}
#[doc = "��\u{5a4}����ϵͳ���\u{379}�˾��Կ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcCFMMCBrokerKeyField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{379}�˾ͳһ����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "��Կ��������"]
    pub CreateDate: TThostFtdcDateType,
    #[doc = "��Կ����ʱ��"]
    pub CreateTime: TThostFtdcTimeType,
    #[doc = "��Կ���"]
    pub KeyID: TThostFtdcSequenceNoType,
    #[doc = "��\u{32c}��Կ"]
    pub CurrentKey: TThostFtdcCFMMCKeyType,
    #[doc = "��\u{32c}��Կ����"]
    pub KeyKind: TThostFtdcCFMMCKeyKindType,
}
#[test]
fn bindgen_test_layout_CThostFtdcCFMMCBrokerKeyField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcCFMMCBrokerKeyField>(),
        68usize,
        concat!("Size of: ", stringify!(CThostFtdcCFMMCBrokerKeyField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcCFMMCBrokerKeyField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcCFMMCBrokerKeyField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCFMMCBrokerKeyField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCFMMCBrokerKeyField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCFMMCBrokerKeyField>())).ParticipantID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCFMMCBrokerKeyField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCFMMCBrokerKeyField>())).CreateDate as *const _
                as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCFMMCBrokerKeyField),
            "::",
            stringify!(CreateDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCFMMCBrokerKeyField>())).CreateTime as *const _
                as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCFMMCBrokerKeyField),
            "::",
            stringify!(CreateTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCFMMCBrokerKeyField>())).KeyID as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCFMMCBrokerKeyField),
            "::",
            stringify!(KeyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCFMMCBrokerKeyField>())).CurrentKey as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCFMMCBrokerKeyField),
            "::",
            stringify!(CurrentKey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCFMMCBrokerKeyField>())).KeyKind as *const _ as usize
        },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCFMMCBrokerKeyField),
            "::",
            stringify!(KeyKind)
        )
    );
}
#[doc = "��\u{5a4}����ϵͳ���\u{379}�˾�ʽ��˻���Կ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcCFMMCTradingAccountKeyField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{379}�˾ͳһ����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "��Կ���"]
    pub KeyID: TThostFtdcSequenceNoType,
    #[doc = "��\u{32c}��Կ"]
    pub CurrentKey: TThostFtdcCFMMCKeyType,
}
#[test]
fn bindgen_test_layout_CThostFtdcCFMMCTradingAccountKeyField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcCFMMCTradingAccountKeyField>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcCFMMCTradingAccountKeyField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcCFMMCTradingAccountKeyField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcCFMMCTradingAccountKeyField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCFMMCTradingAccountKeyField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCFMMCTradingAccountKeyField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCFMMCTradingAccountKeyField>())).ParticipantID
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCFMMCTradingAccountKeyField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCFMMCTradingAccountKeyField>())).AccountID as *const _
                as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCFMMCTradingAccountKeyField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCFMMCTradingAccountKeyField>())).KeyID as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCFMMCTradingAccountKeyField),
            "::",
            stringify!(KeyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCFMMCTradingAccountKeyField>())).CurrentKey as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCFMMCTradingAccountKeyField),
            "::",
            stringify!(CurrentKey)
        )
    );
}
#[doc = "�����ѯ��\u{5a4}����ϵͳ���\u{379}�˾�ʽ��˻���Կ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryCFMMCTradingAccountKeyField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryCFMMCTradingAccountKeyField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryCFMMCTradingAccountKeyField>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcQryCFMMCTradingAccountKeyField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryCFMMCTradingAccountKeyField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryCFMMCTradingAccountKeyField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryCFMMCTradingAccountKeyField>())).BrokerID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryCFMMCTradingAccountKeyField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryCFMMCTradingAccountKeyField>())).InvestorID
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryCFMMCTradingAccountKeyField),
            "::",
            stringify!(InvestorID)
        )
    );
}
#[doc = "�û���\u{32c}���Ʋ���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBrokerUserOTPParamField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��\u{32c}�����ṩ��"]
    pub OTPVendorsID: TThostFtdcOTPVendorsIDType,
    #[doc = "��\u{32c}�������к�"]
    pub SerialNumber: TThostFtdcSerialNumberType,
    #[doc = "������Կ"]
    pub AuthKey: TThostFtdcAuthKeyType,
    #[doc = "Ư��\u{5b5}"]
    pub LastDrift: TThostFtdcLastDriftType,
    #[doc = "�ɹ�\u{5b5}"]
    pub LastSuccess: TThostFtdcLastSuccessType,
    #[doc = "��\u{32c}��������"]
    pub OTPType: TThostFtdcOTPTypeType,
}
#[test]
fn bindgen_test_layout_CThostFtdcBrokerUserOTPParamField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcBrokerUserOTPParamField>(),
        100usize,
        concat!("Size of: ", stringify!(CThostFtdcBrokerUserOTPParamField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcBrokerUserOTPParamField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcBrokerUserOTPParamField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserOTPParamField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserOTPParamField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserOTPParamField>())).UserID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserOTPParamField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserOTPParamField>())).OTPVendorsID as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserOTPParamField),
            "::",
            stringify!(OTPVendorsID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserOTPParamField>())).SerialNumber as *const _
                as usize
        },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserOTPParamField),
            "::",
            stringify!(SerialNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserOTPParamField>())).AuthKey as *const _
                as usize
        },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserOTPParamField),
            "::",
            stringify!(AuthKey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserOTPParamField>())).LastDrift as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserOTPParamField),
            "::",
            stringify!(LastDrift)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserOTPParamField>())).LastSuccess as *const _
                as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserOTPParamField),
            "::",
            stringify!(LastSuccess)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserOTPParamField>())).OTPType as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserOTPParamField),
            "::",
            stringify!(OTPType)
        )
    );
}
impl Default for CThostFtdcBrokerUserOTPParamField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�\u{5b9}�\u{36c}���û���\u{32c}����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcManualSyncBrokerUserOTPField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��\u{32c}��������"]
    pub OTPType: TThostFtdcOTPTypeType,
    #[doc = "��һ����\u{32c}����"]
    pub FirstOTP: TThostFtdcPasswordType,
    #[doc = "�ڶ�����\u{32c}����"]
    pub SecondOTP: TThostFtdcPasswordType,
}
#[test]
fn bindgen_test_layout_CThostFtdcManualSyncBrokerUserOTPField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcManualSyncBrokerUserOTPField>(),
        110usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcManualSyncBrokerUserOTPField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcManualSyncBrokerUserOTPField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcManualSyncBrokerUserOTPField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcManualSyncBrokerUserOTPField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcManualSyncBrokerUserOTPField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcManualSyncBrokerUserOTPField>())).UserID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcManualSyncBrokerUserOTPField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcManualSyncBrokerUserOTPField>())).OTPType as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcManualSyncBrokerUserOTPField),
            "::",
            stringify!(OTPType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcManualSyncBrokerUserOTPField>())).FirstOTP as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcManualSyncBrokerUserOTPField),
            "::",
            stringify!(FirstOTP)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcManualSyncBrokerUserOTPField>())).SecondOTP as *const _
                as usize
        },
        69usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcManualSyncBrokerUserOTPField),
            "::",
            stringify!(SecondOTP)
        )
    );
}
impl Default for CThostFtdcManualSyncBrokerUserOTPField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "Ͷ������������ģ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcCommRateModelField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��������ģ�����"]
    pub CommModelID: TThostFtdcInvestorIDType,
    #[doc = "ģ������"]
    pub CommModelName: TThostFtdcCommModelNameType,
}
#[test]
fn bindgen_test_layout_CThostFtdcCommRateModelField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcCommRateModelField>(),
        185usize,
        concat!("Size of: ", stringify!(CThostFtdcCommRateModelField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcCommRateModelField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcCommRateModelField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCommRateModelField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCommRateModelField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCommRateModelField>())).CommModelID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCommRateModelField),
            "::",
            stringify!(CommModelID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCommRateModelField>())).CommModelName as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCommRateModelField),
            "::",
            stringify!(CommModelName)
        )
    );
}
impl Default for CThostFtdcCommRateModelField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�����ѯͶ������������ģ��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryCommRateModelField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��������ģ�����"]
    pub CommModelID: TThostFtdcInvestorIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryCommRateModelField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryCommRateModelField>(),
        24usize,
        concat!("Size of: ", stringify!(CThostFtdcQryCommRateModelField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryCommRateModelField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryCommRateModelField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryCommRateModelField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryCommRateModelField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryCommRateModelField>())).CommModelID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryCommRateModelField),
            "::",
            stringify!(CommModelID)
        )
    );
}
#[doc = "Ͷ���\u{7f1}�\u{5a4}����ģ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcMarginModelField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��\u{5a4}����ģ�����"]
    pub MarginModelID: TThostFtdcInvestorIDType,
    #[doc = "ģ������"]
    pub MarginModelName: TThostFtdcCommModelNameType,
}
#[test]
fn bindgen_test_layout_CThostFtdcMarginModelField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcMarginModelField>(),
        185usize,
        concat!("Size of: ", stringify!(CThostFtdcMarginModelField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcMarginModelField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcMarginModelField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarginModelField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarginModelField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarginModelField>())).MarginModelID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarginModelField),
            "::",
            stringify!(MarginModelID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMarginModelField>())).MarginModelName as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMarginModelField),
            "::",
            stringify!(MarginModelName)
        )
    );
}
impl Default for CThostFtdcMarginModelField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�����ѯͶ���\u{7f1}�\u{5a4}����ģ��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryMarginModelField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��\u{5a4}����ģ�����"]
    pub MarginModelID: TThostFtdcInvestorIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryMarginModelField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryMarginModelField>(),
        24usize,
        concat!("Size of: ", stringify!(CThostFtdcQryMarginModelField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryMarginModelField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryMarginModelField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMarginModelField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMarginModelField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMarginModelField>())).MarginModelID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMarginModelField),
            "::",
            stringify!(MarginModelID)
        )
    );
}
#[doc = "�\u{5b5}��۵���Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcEWarrantOffsetField {
    #[doc = "��������"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcEWarrantOffsetField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcEWarrantOffsetField>(),
        180usize,
        concat!("Size of: ", stringify!(CThostFtdcEWarrantOffsetField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcEWarrantOffsetField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcEWarrantOffsetField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcEWarrantOffsetField>())).TradingDay as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcEWarrantOffsetField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcEWarrantOffsetField>())).BrokerID as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcEWarrantOffsetField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcEWarrantOffsetField>())).InvestorID as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcEWarrantOffsetField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcEWarrantOffsetField>())).ExchangeID as *const _
                as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcEWarrantOffsetField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcEWarrantOffsetField>())).reserve1 as *const _ as usize
        },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcEWarrantOffsetField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcEWarrantOffsetField>())).Direction as *const _ as usize
        },
        73usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcEWarrantOffsetField),
            "::",
            stringify!(Direction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcEWarrantOffsetField>())).HedgeFlag as *const _ as usize
        },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcEWarrantOffsetField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcEWarrantOffsetField>())).Volume as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcEWarrantOffsetField),
            "::",
            stringify!(Volume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcEWarrantOffsetField>())).InvestUnitID as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcEWarrantOffsetField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcEWarrantOffsetField>())).InstrumentID as *const _
                as usize
        },
        97usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcEWarrantOffsetField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcEWarrantOffsetField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ�\u{5b5}��۵���Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryEWarrantOffsetField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryEWarrantOffsetField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryEWarrantOffsetField>(),
        162usize,
        concat!("Size of: ", stringify!(CThostFtdcQryEWarrantOffsetField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryEWarrantOffsetField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryEWarrantOffsetField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryEWarrantOffsetField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryEWarrantOffsetField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryEWarrantOffsetField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryEWarrantOffsetField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryEWarrantOffsetField>())).ExchangeID as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryEWarrantOffsetField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryEWarrantOffsetField>())).reserve1 as *const _
                as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryEWarrantOffsetField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryEWarrantOffsetField>())).InvestUnitID as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryEWarrantOffsetField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryEWarrantOffsetField>())).InstrumentID as *const _
                as usize
        },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryEWarrantOffsetField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcQryEWarrantOffsetField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯͶ����Ʒ��/��Ʒ�\u{5b1}�\u{5a4}��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInvestorProductGroupMarginField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "Ʒ��/��Ʒ�\u{5b1}�ʾ"]
    pub ProductGroupID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryInvestorProductGroupMarginField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryInvestorProductGroupMarginField>(),
        163usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcQryInvestorProductGroupMarginField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryInvestorProductGroupMarginField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryInvestorProductGroupMarginField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInvestorProductGroupMarginField>())).BrokerID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInvestorProductGroupMarginField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInvestorProductGroupMarginField>())).InvestorID
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInvestorProductGroupMarginField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInvestorProductGroupMarginField>())).reserve1
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInvestorProductGroupMarginField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInvestorProductGroupMarginField>())).HedgeFlag
                as *const _ as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInvestorProductGroupMarginField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInvestorProductGroupMarginField>())).ExchangeID
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInvestorProductGroupMarginField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInvestorProductGroupMarginField>())).InvestUnitID
                as *const _ as usize
        },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInvestorProductGroupMarginField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryInvestorProductGroupMarginField>())).ProductGroupID
                as *const _ as usize
        },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryInvestorProductGroupMarginField),
            "::",
            stringify!(ProductGroupID)
        )
    );
}
impl Default for CThostFtdcQryInvestorProductGroupMarginField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "Ͷ����Ʒ��/��Ʒ�\u{5b1}�\u{5a4}��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInvestorProductGroupMarginField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "����ı�\u{5a4}��"]
    pub FrozenMargin: TThostFtdcMoneyType,
    #[doc = "��ͷ����ı�\u{5a4}��"]
    pub LongFrozenMargin: TThostFtdcMoneyType,
    #[doc = "��ͷ����ı�\u{5a4}��"]
    pub ShortFrozenMargin: TThostFtdcMoneyType,
    #[doc = "ռ�õı�\u{5a4}��"]
    pub UseMargin: TThostFtdcMoneyType,
    #[doc = "��ͷ��\u{5a4}��"]
    pub LongUseMargin: TThostFtdcMoneyType,
    #[doc = "��ͷ��\u{5a4}��"]
    pub ShortUseMargin: TThostFtdcMoneyType,
    #[doc = "��������\u{5a4}��"]
    pub ExchMargin: TThostFtdcMoneyType,
    #[doc = "��������ͷ��\u{5a4}��"]
    pub LongExchMargin: TThostFtdcMoneyType,
    #[doc = "��������ͷ��\u{5a4}��"]
    pub ShortExchMargin: TThostFtdcMoneyType,
    #[doc = "ƽ��ӯ��"]
    pub CloseProfit: TThostFtdcMoneyType,
    #[doc = "�����������"]
    pub FrozenCommission: TThostFtdcMoneyType,
    #[doc = "������"]
    pub Commission: TThostFtdcMoneyType,
    #[doc = "������ʽ�"]
    pub FrozenCash: TThostFtdcMoneyType,
    #[doc = "�ʽ���"]
    pub CashIn: TThostFtdcMoneyType,
    #[doc = "�\u{5b2}�ӯ��"]
    pub PositionProfit: TThostFtdcMoneyType,
    #[doc = "�۵��\u{73d}��"]
    pub OffsetAmount: TThostFtdcMoneyType,
    #[doc = "��ͷ�۵��\u{73d}��"]
    pub LongOffsetAmount: TThostFtdcMoneyType,
    #[doc = "��ͷ�۵��\u{73d}��"]
    pub ShortOffsetAmount: TThostFtdcMoneyType,
    #[doc = "�������۵��\u{73d}��"]
    pub ExchOffsetAmount: TThostFtdcMoneyType,
    #[doc = "��������ͷ�۵��\u{73d}��"]
    pub LongExchOffsetAmount: TThostFtdcMoneyType,
    #[doc = "��������ͷ�۵��\u{73d}��"]
    pub ShortExchOffsetAmount: TThostFtdcMoneyType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "Ʒ��/��Ʒ�\u{5b1}�ʾ"]
    pub ProductGroupID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcInvestorProductGroupMarginField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcInvestorProductGroupMarginField>(),
        352usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcInvestorProductGroupMarginField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcInvestorProductGroupMarginField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcInvestorProductGroupMarginField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorProductGroupMarginField>())).reserve1
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorProductGroupMarginField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorProductGroupMarginField>())).BrokerID
                as *const _ as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorProductGroupMarginField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorProductGroupMarginField>())).InvestorID
                as *const _ as usize
        },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorProductGroupMarginField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorProductGroupMarginField>())).TradingDay
                as *const _ as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorProductGroupMarginField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorProductGroupMarginField>())).SettlementID
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorProductGroupMarginField),
            "::",
            stringify!(SettlementID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorProductGroupMarginField>())).FrozenMargin
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorProductGroupMarginField),
            "::",
            stringify!(FrozenMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorProductGroupMarginField>())).LongFrozenMargin
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorProductGroupMarginField),
            "::",
            stringify!(LongFrozenMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorProductGroupMarginField>())).ShortFrozenMargin
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorProductGroupMarginField),
            "::",
            stringify!(ShortFrozenMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorProductGroupMarginField>())).UseMargin
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorProductGroupMarginField),
            "::",
            stringify!(UseMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorProductGroupMarginField>())).LongUseMargin
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorProductGroupMarginField),
            "::",
            stringify!(LongUseMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorProductGroupMarginField>())).ShortUseMargin
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorProductGroupMarginField),
            "::",
            stringify!(ShortUseMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorProductGroupMarginField>())).ExchMargin
                as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorProductGroupMarginField),
            "::",
            stringify!(ExchMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorProductGroupMarginField>())).LongExchMargin
                as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorProductGroupMarginField),
            "::",
            stringify!(LongExchMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorProductGroupMarginField>())).ShortExchMargin
                as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorProductGroupMarginField),
            "::",
            stringify!(ShortExchMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorProductGroupMarginField>())).CloseProfit
                as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorProductGroupMarginField),
            "::",
            stringify!(CloseProfit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorProductGroupMarginField>())).FrozenCommission
                as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorProductGroupMarginField),
            "::",
            stringify!(FrozenCommission)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorProductGroupMarginField>())).Commission
                as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorProductGroupMarginField),
            "::",
            stringify!(Commission)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorProductGroupMarginField>())).FrozenCash
                as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorProductGroupMarginField),
            "::",
            stringify!(FrozenCash)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorProductGroupMarginField>())).CashIn as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorProductGroupMarginField),
            "::",
            stringify!(CashIn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorProductGroupMarginField>())).PositionProfit
                as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorProductGroupMarginField),
            "::",
            stringify!(PositionProfit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorProductGroupMarginField>())).OffsetAmount
                as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorProductGroupMarginField),
            "::",
            stringify!(OffsetAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorProductGroupMarginField>())).LongOffsetAmount
                as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorProductGroupMarginField),
            "::",
            stringify!(LongOffsetAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorProductGroupMarginField>())).ShortOffsetAmount
                as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorProductGroupMarginField),
            "::",
            stringify!(ShortOffsetAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorProductGroupMarginField>())).ExchOffsetAmount
                as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorProductGroupMarginField),
            "::",
            stringify!(ExchOffsetAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorProductGroupMarginField>()))
                .LongExchOffsetAmount as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorProductGroupMarginField),
            "::",
            stringify!(LongExchOffsetAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorProductGroupMarginField>()))
                .ShortExchOffsetAmount as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorProductGroupMarginField),
            "::",
            stringify!(ShortExchOffsetAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorProductGroupMarginField>())).HedgeFlag
                as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorProductGroupMarginField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorProductGroupMarginField>())).ExchangeID
                as *const _ as usize
        },
        241usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorProductGroupMarginField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorProductGroupMarginField>())).InvestUnitID
                as *const _ as usize
        },
        250usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorProductGroupMarginField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcInvestorProductGroupMarginField>())).ProductGroupID
                as *const _ as usize
        },
        267usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcInvestorProductGroupMarginField),
            "::",
            stringify!(ProductGroupID)
        )
    );
}
impl Default for CThostFtdcInvestorProductGroupMarginField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ��������û�����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQueryCFMMCTradingAccountTokenField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQueryCFMMCTradingAccountTokenField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQueryCFMMCTradingAccountTokenField>(),
        41usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcQueryCFMMCTradingAccountTokenField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQueryCFMMCTradingAccountTokenField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQueryCFMMCTradingAccountTokenField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQueryCFMMCTradingAccountTokenField>())).BrokerID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQueryCFMMCTradingAccountTokenField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQueryCFMMCTradingAccountTokenField>())).InvestorID
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQueryCFMMCTradingAccountTokenField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQueryCFMMCTradingAccountTokenField>())).InvestUnitID
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQueryCFMMCTradingAccountTokenField),
            "::",
            stringify!(InvestUnitID)
        )
    );
}
#[doc = "��������û�����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcCFMMCTradingAccountTokenField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{379}�˾ͳһ����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "��Կ���"]
    pub KeyID: TThostFtdcSequenceNoType,
    #[doc = "��\u{32c}����"]
    pub Token: TThostFtdcCFMMCTokenType,
}
#[test]
fn bindgen_test_layout_CThostFtdcCFMMCTradingAccountTokenField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcCFMMCTradingAccountTokenField>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcCFMMCTradingAccountTokenField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcCFMMCTradingAccountTokenField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcCFMMCTradingAccountTokenField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCFMMCTradingAccountTokenField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCFMMCTradingAccountTokenField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCFMMCTradingAccountTokenField>())).ParticipantID
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCFMMCTradingAccountTokenField),
            "::",
            stringify!(ParticipantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCFMMCTradingAccountTokenField>())).AccountID
                as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCFMMCTradingAccountTokenField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCFMMCTradingAccountTokenField>())).KeyID as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCFMMCTradingAccountTokenField),
            "::",
            stringify!(KeyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCFMMCTradingAccountTokenField>())).Token as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCFMMCTradingAccountTokenField),
            "::",
            stringify!(Token)
        )
    );
}
#[doc = "��ѯ��Ʒ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryProductGroupField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryProductGroupField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryProductGroupField>(),
        121usize,
        concat!("Size of: ", stringify!(CThostFtdcQryProductGroupField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryProductGroupField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryProductGroupField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryProductGroupField>())).reserve1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryProductGroupField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryProductGroupField>())).ExchangeID as *const _
                as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryProductGroupField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryProductGroupField>())).ProductID as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryProductGroupField),
            "::",
            stringify!(ProductID)
        )
    );
}
impl Default for CThostFtdcQryProductGroupField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "Ͷ����Ʒ��/��Ʒ�\u{5b1}�\u{5a4}���Ʒ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcProductGroupField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldInstrumentIDType,
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcInstrumentIDType,
    #[doc = "��Ʒ�����"]
    pub ProductGroupID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcProductGroupField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcProductGroupField>(),
        233usize,
        concat!("Size of: ", stringify!(CThostFtdcProductGroupField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcProductGroupField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcProductGroupField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcProductGroupField>())).reserve1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcProductGroupField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcProductGroupField>())).ExchangeID as *const _ as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcProductGroupField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcProductGroupField>())).reserve2 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcProductGroupField),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcProductGroupField>())).ProductID as *const _ as usize
        },
        71usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcProductGroupField),
            "::",
            stringify!(ProductID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcProductGroupField>())).ProductGroupID as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcProductGroupField),
            "::",
            stringify!(ProductGroupID)
        )
    );
}
impl Default for CThostFtdcProductGroupField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "����������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBulletinField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub BulletinID: TThostFtdcBulletinIDType,
    #[doc = "���к�"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "��������"]
    pub NewsType: TThostFtdcNewsTypeType,
    #[doc = "�����\u{336}�"]
    pub NewsUrgency: TThostFtdcNewsUrgencyType,
    #[doc = "����ʱ��"]
    pub SendTime: TThostFtdcTimeType,
    #[doc = "��ϢժҪ"]
    pub Abstract: TThostFtdcAbstractType,
    #[doc = "��Ϣ��Դ"]
    pub ComeFrom: TThostFtdcComeFromType,
    #[doc = "��Ϣ����"]
    pub Content: TThostFtdcContentType,
    #[doc = "WEB��\u{5b7}"]
    pub URLLink: TThostFtdcURLLinkType,
    #[doc = "�г�����"]
    pub MarketID: TThostFtdcMarketIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcBulletinField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcBulletinField>(),
        876usize,
        concat!("Size of: ", stringify!(CThostFtdcBulletinField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcBulletinField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcBulletinField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBulletinField>())).ExchangeID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBulletinField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBulletinField>())).TradingDay as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBulletinField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBulletinField>())).BulletinID as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBulletinField),
            "::",
            stringify!(BulletinID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBulletinField>())).SequenceNo as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBulletinField),
            "::",
            stringify!(SequenceNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBulletinField>())).NewsType as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBulletinField),
            "::",
            stringify!(NewsType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBulletinField>())).NewsUrgency as *const _ as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBulletinField),
            "::",
            stringify!(NewsUrgency)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBulletinField>())).SendTime as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBulletinField),
            "::",
            stringify!(SendTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBulletinField>())).Abstract as *const _ as usize
        },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBulletinField),
            "::",
            stringify!(Abstract)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBulletinField>())).ComeFrom as *const _ as usize
        },
        122usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBulletinField),
            "::",
            stringify!(ComeFrom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcBulletinField>())).Content as *const _ as usize },
        143usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBulletinField),
            "::",
            stringify!(Content)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcBulletinField>())).URLLink as *const _ as usize },
        644usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBulletinField),
            "::",
            stringify!(URLLink)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBulletinField>())).MarketID as *const _ as usize
        },
        845usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBulletinField),
            "::",
            stringify!(MarketID)
        )
    );
}
impl Default for CThostFtdcBulletinField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ����������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryBulletinField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "������"]
    pub BulletinID: TThostFtdcBulletinIDType,
    #[doc = "���к�"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "��������"]
    pub NewsType: TThostFtdcNewsTypeType,
    #[doc = "�����\u{336}�"]
    pub NewsUrgency: TThostFtdcNewsUrgencyType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryBulletinField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryBulletinField>(),
        24usize,
        concat!("Size of: ", stringify!(CThostFtdcQryBulletinField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryBulletinField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryBulletinField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryBulletinField>())).ExchangeID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryBulletinField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryBulletinField>())).BulletinID as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryBulletinField),
            "::",
            stringify!(BulletinID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryBulletinField>())).SequenceNo as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryBulletinField),
            "::",
            stringify!(SequenceNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryBulletinField>())).NewsType as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryBulletinField),
            "::",
            stringify!(NewsType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryBulletinField>())).NewsUrgency as *const _ as usize
        },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryBulletinField),
            "::",
            stringify!(NewsUrgency)
        )
    );
}
#[doc = "MulticastInstrument"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcMulticastInstrumentField {
    #[doc = "�����"]
    pub TopicID: TThostFtdcInstallIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��Լ���"]
    pub InstrumentNo: TThostFtdcInstallIDType,
    #[doc = "��\u{5fc}��"]
    pub CodePrice: TThostFtdcPriceType,
    #[doc = "��Լ��������"]
    pub VolumeMultiple: TThostFtdcVolumeMultipleType,
    #[doc = "��С�䶯��λ"]
    pub PriceTick: TThostFtdcPriceType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcMulticastInstrumentField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcMulticastInstrumentField>(),
        152usize,
        concat!("Size of: ", stringify!(CThostFtdcMulticastInstrumentField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcMulticastInstrumentField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcMulticastInstrumentField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMulticastInstrumentField>())).TopicID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMulticastInstrumentField),
            "::",
            stringify!(TopicID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMulticastInstrumentField>())).reserve1 as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMulticastInstrumentField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMulticastInstrumentField>())).InstrumentNo as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMulticastInstrumentField),
            "::",
            stringify!(InstrumentNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMulticastInstrumentField>())).CodePrice as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMulticastInstrumentField),
            "::",
            stringify!(CodePrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMulticastInstrumentField>())).VolumeMultiple
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMulticastInstrumentField),
            "::",
            stringify!(VolumeMultiple)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMulticastInstrumentField>())).PriceTick as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMulticastInstrumentField),
            "::",
            stringify!(PriceTick)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcMulticastInstrumentField>())).InstrumentID as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcMulticastInstrumentField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcMulticastInstrumentField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "QryMulticastInstrument"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryMulticastInstrumentField {
    #[doc = "�����"]
    pub TopicID: TThostFtdcInstallIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryMulticastInstrumentField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryMulticastInstrumentField>(),
        116usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcQryMulticastInstrumentField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryMulticastInstrumentField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryMulticastInstrumentField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMulticastInstrumentField>())).TopicID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMulticastInstrumentField),
            "::",
            stringify!(TopicID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMulticastInstrumentField>())).reserve1 as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMulticastInstrumentField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryMulticastInstrumentField>())).InstrumentID
                as *const _ as usize
        },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryMulticastInstrumentField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcQryMulticastInstrumentField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "App�ͻ���Ȩ�\u{7b7}���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcAppIDAuthAssignField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "App����"]
    pub AppID: TThostFtdcAppIDType,
    #[doc = "�������Ĵ���"]
    pub DRIdentityID: TThostFtdcDRIdentityIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcAppIDAuthAssignField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcAppIDAuthAssignField>(),
        48usize,
        concat!("Size of: ", stringify!(CThostFtdcAppIDAuthAssignField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcAppIDAuthAssignField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcAppIDAuthAssignField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAppIDAuthAssignField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAppIDAuthAssignField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAppIDAuthAssignField>())).AppID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAppIDAuthAssignField),
            "::",
            stringify!(AppID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAppIDAuthAssignField>())).DRIdentityID as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAppIDAuthAssignField),
            "::",
            stringify!(DRIdentityID)
        )
    );
}
impl Default for CThostFtdcAppIDAuthAssignField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "ת�ʿ�������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqOpenAccountField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�Ա�"]
    pub Gender: TThostFtdcGenderType,
    #[doc = "���Ҵ���"]
    pub CountryCode: TThostFtdcCountryCodeType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "��\u{5b7}"]
    pub Address: TThostFtdcAddressType,
    #[doc = "�ʱ�"]
    pub ZipCode: TThostFtdcZipCodeType,
    #[doc = "�绰����"]
    pub Telephone: TThostFtdcTelephoneType,
    #[doc = "�\u{5bb}�"]
    pub MobilePhone: TThostFtdcMobilePhoneType,
    #[doc = "����"]
    pub Fax: TThostFtdcFaxType,
    #[doc = "�����ʼ�"]
    pub EMail: TThostFtdcEMailType,
    #[doc = "�ʽ��˻�״\u{32c}"]
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "��\u{5a4}�ͻ�\u{5a4}�������־"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "�㳮��־"]
    pub CashExchangeCode: TThostFtdcCashExchangeCodeType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "�����ʺ�����"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���λ�ʺ�����"]
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "�ڻ���λ�ʺ�"]
    pub BankSecuAcc: TThostFtdcBankAccountType,
    #[doc = "���������־"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "�ڻ��ʽ�����˶Ա�־"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "���ͻ�����"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[test]
fn bindgen_test_layout_CThostFtdcReqOpenAccountField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcReqOpenAccountField>(),
        956usize,
        concat!("Size of: ", stringify!(CThostFtdcReqOpenAccountField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcReqOpenAccountField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcReqOpenAccountField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).TradeCode as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(TradeCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).BankID as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).BankBranchID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(BankBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).BrokerID as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).BrokerBranchID as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(BrokerBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).TradeDate as *const _ as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(TradeDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).TradeTime as *const _ as usize
        },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(TradeTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).BankSerial as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(BankSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).TradingDay as *const _
                as usize
        },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).PlateSerial as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(PlateSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).LastFragment as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(LastFragment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).SessionID as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).CustomerName as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(CustomerName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).IdCardType as *const _
                as usize
        },
        163usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(IdCardType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).IdentifiedCardNo as *const _
                as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(IdentifiedCardNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).Gender as *const _ as usize
        },
        215usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(Gender)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).CountryCode as *const _
                as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(CountryCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).CustType as *const _ as usize
        },
        237usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(CustType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).Address as *const _ as usize
        },
        238usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(Address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).ZipCode as *const _ as usize
        },
        339usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(ZipCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).Telephone as *const _ as usize
        },
        346usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(Telephone)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).MobilePhone as *const _
                as usize
        },
        387usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(MobilePhone)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).Fax as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(Fax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).EMail as *const _ as usize
        },
        449usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(EMail)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).MoneyAccountStatus as *const _
                as usize
        },
        490usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(MoneyAccountStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).BankAccount as *const _
                as usize
        },
        491usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(BankAccount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).BankPassWord as *const _
                as usize
        },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(BankPassWord)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).AccountID as *const _ as usize
        },
        573usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).Password as *const _ as usize
        },
        586usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(Password)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).InstallID as *const _ as usize
        },
        628usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).VerifyCertNoFlag as *const _
                as usize
        },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(VerifyCertNoFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).CurrencyID as *const _
                as usize
        },
        633usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).CashExchangeCode as *const _
                as usize
        },
        637usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(CashExchangeCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).Digest as *const _ as usize
        },
        638usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(Digest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).BankAccType as *const _
                as usize
        },
        674usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(BankAccType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).DeviceID as *const _ as usize
        },
        675usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(DeviceID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).BankSecuAccType as *const _
                as usize
        },
        678usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(BankSecuAccType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).BrokerIDByBank as *const _
                as usize
        },
        679usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(BrokerIDByBank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).BankSecuAcc as *const _
                as usize
        },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(BankSecuAcc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).BankPwdFlag as *const _
                as usize
        },
        753usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(BankPwdFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).SecuPwdFlag as *const _
                as usize
        },
        754usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(SecuPwdFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).OperNo as *const _ as usize
        },
        755usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(OperNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).TID as *const _ as usize
        },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(TID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).UserID as *const _ as usize
        },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqOpenAccountField>())).LongCustomerName as *const _
                as usize
        },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqOpenAccountField),
            "::",
            stringify!(LongCustomerName)
        )
    );
}
impl Default for CThostFtdcReqOpenAccountField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "ת����������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqCancelAccountField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�Ա�"]
    pub Gender: TThostFtdcGenderType,
    #[doc = "���Ҵ���"]
    pub CountryCode: TThostFtdcCountryCodeType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "��\u{5b7}"]
    pub Address: TThostFtdcAddressType,
    #[doc = "�ʱ�"]
    pub ZipCode: TThostFtdcZipCodeType,
    #[doc = "�绰����"]
    pub Telephone: TThostFtdcTelephoneType,
    #[doc = "�\u{5bb}�"]
    pub MobilePhone: TThostFtdcMobilePhoneType,
    #[doc = "����"]
    pub Fax: TThostFtdcFaxType,
    #[doc = "�����ʼ�"]
    pub EMail: TThostFtdcEMailType,
    #[doc = "�ʽ��˻�״\u{32c}"]
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "��\u{5a4}�ͻ�\u{5a4}�������־"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "�㳮��־"]
    pub CashExchangeCode: TThostFtdcCashExchangeCodeType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "�����ʺ�����"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���λ�ʺ�����"]
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "�ڻ���λ�ʺ�"]
    pub BankSecuAcc: TThostFtdcBankAccountType,
    #[doc = "���������־"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "�ڻ��ʽ�����˶Ա�־"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "���ͻ�����"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[test]
fn bindgen_test_layout_CThostFtdcReqCancelAccountField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcReqCancelAccountField>(),
        956usize,
        concat!("Size of: ", stringify!(CThostFtdcReqCancelAccountField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcReqCancelAccountField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcReqCancelAccountField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).TradeCode as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(TradeCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).BankID as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).BankBranchID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(BankBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).BrokerID as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).BrokerBranchID as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(BrokerBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).TradeDate as *const _
                as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(TradeDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).TradeTime as *const _
                as usize
        },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(TradeTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).BankSerial as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(BankSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).TradingDay as *const _
                as usize
        },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).PlateSerial as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(PlateSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).LastFragment as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(LastFragment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).SessionID as *const _
                as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).CustomerName as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(CustomerName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).IdCardType as *const _
                as usize
        },
        163usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(IdCardType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).IdentifiedCardNo as *const _
                as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(IdentifiedCardNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).Gender as *const _ as usize
        },
        215usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(Gender)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).CountryCode as *const _
                as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(CountryCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).CustType as *const _
                as usize
        },
        237usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(CustType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).Address as *const _ as usize
        },
        238usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(Address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).ZipCode as *const _ as usize
        },
        339usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(ZipCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).Telephone as *const _
                as usize
        },
        346usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(Telephone)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).MobilePhone as *const _
                as usize
        },
        387usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(MobilePhone)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).Fax as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(Fax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).EMail as *const _ as usize
        },
        449usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(EMail)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).MoneyAccountStatus
                as *const _ as usize
        },
        490usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(MoneyAccountStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).BankAccount as *const _
                as usize
        },
        491usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(BankAccount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).BankPassWord as *const _
                as usize
        },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(BankPassWord)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).AccountID as *const _
                as usize
        },
        573usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).Password as *const _
                as usize
        },
        586usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(Password)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).InstallID as *const _
                as usize
        },
        628usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).VerifyCertNoFlag as *const _
                as usize
        },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(VerifyCertNoFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).CurrencyID as *const _
                as usize
        },
        633usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).CashExchangeCode as *const _
                as usize
        },
        637usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(CashExchangeCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).Digest as *const _ as usize
        },
        638usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(Digest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).BankAccType as *const _
                as usize
        },
        674usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(BankAccType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).DeviceID as *const _
                as usize
        },
        675usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(DeviceID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).BankSecuAccType as *const _
                as usize
        },
        678usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(BankSecuAccType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).BrokerIDByBank as *const _
                as usize
        },
        679usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(BrokerIDByBank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).BankSecuAcc as *const _
                as usize
        },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(BankSecuAcc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).BankPwdFlag as *const _
                as usize
        },
        753usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(BankPwdFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).SecuPwdFlag as *const _
                as usize
        },
        754usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(SecuPwdFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).OperNo as *const _ as usize
        },
        755usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(OperNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).TID as *const _ as usize
        },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(TID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).UserID as *const _ as usize
        },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqCancelAccountField>())).LongCustomerName as *const _
                as usize
        },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqCancelAccountField),
            "::",
            stringify!(LongCustomerName)
        )
    );
}
impl Default for CThostFtdcReqCancelAccountField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��������˻�����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqChangeAccountField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�Ա�"]
    pub Gender: TThostFtdcGenderType,
    #[doc = "���Ҵ���"]
    pub CountryCode: TThostFtdcCountryCodeType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "��\u{5b7}"]
    pub Address: TThostFtdcAddressType,
    #[doc = "�ʱ�"]
    pub ZipCode: TThostFtdcZipCodeType,
    #[doc = "�绰����"]
    pub Telephone: TThostFtdcTelephoneType,
    #[doc = "�\u{5bb}�"]
    pub MobilePhone: TThostFtdcMobilePhoneType,
    #[doc = "����"]
    pub Fax: TThostFtdcFaxType,
    #[doc = "�����ʼ�"]
    pub EMail: TThostFtdcEMailType,
    #[doc = "�ʽ��˻�״\u{32c}"]
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "�������ʺ�"]
    pub NewBankAccount: TThostFtdcBankAccountType,
    #[doc = "����������"]
    pub NewBankPassWord: TThostFtdcPasswordType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "�����ʺ�����"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "��\u{5a4}�ͻ�\u{5a4}�������־"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "���������־"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "�ڻ��ʽ�����˶Ա�־"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "���ͻ�����"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[test]
fn bindgen_test_layout_CThostFtdcReqChangeAccountField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcReqChangeAccountField>(),
        960usize,
        concat!("Size of: ", stringify!(CThostFtdcReqChangeAccountField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcReqChangeAccountField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcReqChangeAccountField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).TradeCode as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(TradeCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).BankID as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).BankBranchID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(BankBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).BrokerID as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).BrokerBranchID as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(BrokerBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).TradeDate as *const _
                as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(TradeDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).TradeTime as *const _
                as usize
        },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(TradeTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).BankSerial as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(BankSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).TradingDay as *const _
                as usize
        },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).PlateSerial as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(PlateSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).LastFragment as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(LastFragment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).SessionID as *const _
                as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).CustomerName as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(CustomerName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).IdCardType as *const _
                as usize
        },
        163usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(IdCardType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).IdentifiedCardNo as *const _
                as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(IdentifiedCardNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).Gender as *const _ as usize
        },
        215usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(Gender)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).CountryCode as *const _
                as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(CountryCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).CustType as *const _
                as usize
        },
        237usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(CustType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).Address as *const _ as usize
        },
        238usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(Address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).ZipCode as *const _ as usize
        },
        339usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(ZipCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).Telephone as *const _
                as usize
        },
        346usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(Telephone)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).MobilePhone as *const _
                as usize
        },
        387usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(MobilePhone)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).Fax as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(Fax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).EMail as *const _ as usize
        },
        449usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(EMail)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).MoneyAccountStatus
                as *const _ as usize
        },
        490usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(MoneyAccountStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).BankAccount as *const _
                as usize
        },
        491usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(BankAccount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).BankPassWord as *const _
                as usize
        },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(BankPassWord)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).NewBankAccount as *const _
                as usize
        },
        573usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(NewBankAccount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).NewBankPassWord as *const _
                as usize
        },
        614usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(NewBankPassWord)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).AccountID as *const _
                as usize
        },
        655usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).Password as *const _
                as usize
        },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(Password)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).BankAccType as *const _
                as usize
        },
        709usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(BankAccType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).InstallID as *const _
                as usize
        },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).VerifyCertNoFlag as *const _
                as usize
        },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(VerifyCertNoFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).CurrencyID as *const _
                as usize
        },
        717usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).BrokerIDByBank as *const _
                as usize
        },
        721usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(BrokerIDByBank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).BankPwdFlag as *const _
                as usize
        },
        754usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(BankPwdFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).SecuPwdFlag as *const _
                as usize
        },
        755usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(SecuPwdFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).TID as *const _ as usize
        },
        756usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(TID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).Digest as *const _ as usize
        },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(Digest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqChangeAccountField>())).LongCustomerName as *const _
                as usize
        },
        796usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqChangeAccountField),
            "::",
            stringify!(LongCustomerName)
        )
    );
}
impl Default for CThostFtdcReqChangeAccountField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "ת������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqTransferField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�ڻ���˾��ˮ��"]
    pub FutureSerial: TThostFtdcFutureSerialType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��\u{5a4}�ͻ�\u{5a4}�������־"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "ת�ʽ��"]
    pub TradeAmount: TThostFtdcTradeAmountType,
    #[doc = "�ڻ���ȡ���"]
    pub FutureFetchAmount: TThostFtdcTradeAmountType,
    #[doc = "����\u{5a7}����־"]
    pub FeePayFlag: TThostFtdcFeePayFlagType,
    #[doc = "Ӧ�տͻ�����"]
    pub CustFee: TThostFtdcCustFeeType,
    #[doc = "Ӧ���ڻ���˾����"]
    pub BrokerFee: TThostFtdcFutureFeeType,
    #[doc = "���ͷ������շ�����Ϣ"]
    pub Message: TThostFtdcAddInfoType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "�����ʺ�����"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���λ�ʺ�����"]
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "�ڻ���λ�ʺ�"]
    pub BankSecuAcc: TThostFtdcBankAccountType,
    #[doc = "���������־"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "�ڻ��ʽ�����˶Ա�־"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "ת�˽���״\u{32c}"]
    pub TransferStatus: TThostFtdcTransferStatusType,
    #[doc = "���ͻ�����"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[test]
fn bindgen_test_layout_CThostFtdcReqTransferField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcReqTransferField>(),
        864usize,
        concat!("Size of: ", stringify!(CThostFtdcReqTransferField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcReqTransferField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcReqTransferField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).TradeCode as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(TradeCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).BankID as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).BankBranchID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(BankBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).BrokerID as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).BrokerBranchID as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(BrokerBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).TradeDate as *const _ as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(TradeDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).TradeTime as *const _ as usize
        },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(TradeTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).BankSerial as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(BankSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).TradingDay as *const _ as usize
        },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).PlateSerial as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(PlateSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).LastFragment as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(LastFragment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).SessionID as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).CustomerName as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(CustomerName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).IdCardType as *const _ as usize
        },
        163usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(IdCardType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).IdentifiedCardNo as *const _
                as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(IdentifiedCardNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).CustType as *const _ as usize
        },
        215usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(CustType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).BankAccount as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(BankAccount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).BankPassWord as *const _ as usize
        },
        257usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(BankPassWord)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).AccountID as *const _ as usize
        },
        298usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).Password as *const _ as usize
        },
        311usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(Password)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).InstallID as *const _ as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).FutureSerial as *const _ as usize
        },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(FutureSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).UserID as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).VerifyCertNoFlag as *const _
                as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(VerifyCertNoFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).CurrencyID as *const _ as usize
        },
        377usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).TradeAmount as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(TradeAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).FutureFetchAmount as *const _
                as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(FutureFetchAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).FeePayFlag as *const _ as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(FeePayFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).CustFee as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(CustFee)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).BrokerFee as *const _ as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(BrokerFee)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).Message as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(Message)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).Digest as *const _ as usize
        },
        553usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(Digest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).BankAccType as *const _ as usize
        },
        589usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(BankAccType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).DeviceID as *const _ as usize
        },
        590usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(DeviceID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).BankSecuAccType as *const _
                as usize
        },
        593usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(BankSecuAccType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).BrokerIDByBank as *const _
                as usize
        },
        594usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(BrokerIDByBank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).BankSecuAcc as *const _ as usize
        },
        627usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(BankSecuAcc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).BankPwdFlag as *const _ as usize
        },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(BankPwdFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).SecuPwdFlag as *const _ as usize
        },
        669usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(SecuPwdFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).OperNo as *const _ as usize
        },
        670usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(OperNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).RequestID as *const _ as usize
        },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).TID as *const _ as usize },
        692usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(TID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).TransferStatus as *const _
                as usize
        },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(TransferStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqTransferField>())).LongCustomerName as *const _
                as usize
        },
        697usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqTransferField),
            "::",
            stringify!(LongCustomerName)
        )
    );
}
impl Default for CThostFtdcReqTransferField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���з��������ʽ�ת�ڻ���Ӧ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspTransferField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�ڻ���˾��ˮ��"]
    pub FutureSerial: TThostFtdcFutureSerialType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��\u{5a4}�ͻ�\u{5a4}�������־"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "ת�ʽ��"]
    pub TradeAmount: TThostFtdcTradeAmountType,
    #[doc = "�ڻ���ȡ���"]
    pub FutureFetchAmount: TThostFtdcTradeAmountType,
    #[doc = "����\u{5a7}����־"]
    pub FeePayFlag: TThostFtdcFeePayFlagType,
    #[doc = "Ӧ�տͻ�����"]
    pub CustFee: TThostFtdcCustFeeType,
    #[doc = "Ӧ���ڻ���˾����"]
    pub BrokerFee: TThostFtdcFutureFeeType,
    #[doc = "���ͷ������շ�����Ϣ"]
    pub Message: TThostFtdcAddInfoType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "�����ʺ�����"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���λ�ʺ�����"]
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "�ڻ���λ�ʺ�"]
    pub BankSecuAcc: TThostFtdcBankAccountType,
    #[doc = "���������־"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "�ڻ��ʽ�����˶Ա�־"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "ת�˽���״\u{32c}"]
    pub TransferStatus: TThostFtdcTransferStatusType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "���ͻ�����"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[test]
fn bindgen_test_layout_CThostFtdcRspTransferField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcRspTransferField>(),
        952usize,
        concat!("Size of: ", stringify!(CThostFtdcRspTransferField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcRspTransferField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcRspTransferField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).TradeCode as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(TradeCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).BankID as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).BankBranchID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(BankBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).BrokerID as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).BrokerBranchID as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(BrokerBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).TradeDate as *const _ as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(TradeDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).TradeTime as *const _ as usize
        },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(TradeTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).BankSerial as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(BankSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).TradingDay as *const _ as usize
        },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).PlateSerial as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(PlateSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).LastFragment as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(LastFragment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).SessionID as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).CustomerName as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(CustomerName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).IdCardType as *const _ as usize
        },
        163usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(IdCardType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).IdentifiedCardNo as *const _
                as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(IdentifiedCardNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).CustType as *const _ as usize
        },
        215usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(CustType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).BankAccount as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(BankAccount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).BankPassWord as *const _ as usize
        },
        257usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(BankPassWord)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).AccountID as *const _ as usize
        },
        298usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).Password as *const _ as usize
        },
        311usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(Password)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).InstallID as *const _ as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).FutureSerial as *const _ as usize
        },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(FutureSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).UserID as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).VerifyCertNoFlag as *const _
                as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(VerifyCertNoFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).CurrencyID as *const _ as usize
        },
        377usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).TradeAmount as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(TradeAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).FutureFetchAmount as *const _
                as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(FutureFetchAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).FeePayFlag as *const _ as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(FeePayFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).CustFee as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(CustFee)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).BrokerFee as *const _ as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(BrokerFee)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).Message as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(Message)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).Digest as *const _ as usize
        },
        553usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(Digest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).BankAccType as *const _ as usize
        },
        589usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(BankAccType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).DeviceID as *const _ as usize
        },
        590usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(DeviceID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).BankSecuAccType as *const _
                as usize
        },
        593usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(BankSecuAccType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).BrokerIDByBank as *const _
                as usize
        },
        594usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(BrokerIDByBank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).BankSecuAcc as *const _ as usize
        },
        627usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(BankSecuAcc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).BankPwdFlag as *const _ as usize
        },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(BankPwdFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).SecuPwdFlag as *const _ as usize
        },
        669usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(SecuPwdFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).OperNo as *const _ as usize
        },
        670usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(OperNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).RequestID as *const _ as usize
        },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).TID as *const _ as usize },
        692usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(TID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).TransferStatus as *const _
                as usize
        },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(TransferStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).ErrorID as *const _ as usize
        },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(ErrorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).ErrorMsg as *const _ as usize
        },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(ErrorMsg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspTransferField>())).LongCustomerName as *const _
                as usize
        },
        785usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspTransferField),
            "::",
            stringify!(LongCustomerName)
        )
    );
}
impl Default for CThostFtdcRspTransferField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqRepealField {
    #[doc = "����ʱ����"]
    pub RepealTimeInterval: TThostFtdcRepealTimeIntervalType,
    #[doc = "�Ѿ���������"]
    pub RepealedTimes: TThostFtdcRepealedTimesType,
    #[doc = "���г�����־"]
    pub BankRepealFlag: TThostFtdcBankRepealFlagType,
    #[doc = "���\u{333}�����־"]
    pub BrokerRepealFlag: TThostFtdcBrokerRepealFlagType,
    #[doc = "������ƽ\u{328}��ˮ��"]
    pub PlateRepealSerial: TThostFtdcPlateSerialType,
    #[doc = "������������ˮ��"]
    pub BankRepealSerial: TThostFtdcBankSerialType,
    #[doc = "�������ڻ���ˮ��"]
    pub FutureRepealSerial: TThostFtdcFutureSerialType,
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�ڻ���˾��ˮ��"]
    pub FutureSerial: TThostFtdcFutureSerialType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��\u{5a4}�ͻ�\u{5a4}�������־"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "ת�ʽ��"]
    pub TradeAmount: TThostFtdcTradeAmountType,
    #[doc = "�ڻ���ȡ���"]
    pub FutureFetchAmount: TThostFtdcTradeAmountType,
    #[doc = "����\u{5a7}����־"]
    pub FeePayFlag: TThostFtdcFeePayFlagType,
    #[doc = "Ӧ�տͻ�����"]
    pub CustFee: TThostFtdcCustFeeType,
    #[doc = "Ӧ���ڻ���˾����"]
    pub BrokerFee: TThostFtdcFutureFeeType,
    #[doc = "���ͷ������շ�����Ϣ"]
    pub Message: TThostFtdcAddInfoType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "�����ʺ�����"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���λ�ʺ�����"]
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "�ڻ���λ�ʺ�"]
    pub BankSecuAcc: TThostFtdcBankAccountType,
    #[doc = "���������־"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "�ڻ��ʽ�����˶Ա�־"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "ת�˽���״\u{32c}"]
    pub TransferStatus: TThostFtdcTransferStatusType,
    #[doc = "���ͻ�����"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[test]
fn bindgen_test_layout_CThostFtdcReqRepealField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcReqRepealField>(),
        904usize,
        concat!("Size of: ", stringify!(CThostFtdcReqRepealField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcReqRepealField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcReqRepealField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).RepealTimeInterval as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(RepealTimeInterval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).RepealedTimes as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(RepealedTimes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).BankRepealFlag as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(BankRepealFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).BrokerRepealFlag as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(BrokerRepealFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).PlateRepealSerial as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(PlateRepealSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).BankRepealSerial as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(BankRepealSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).FutureRepealSerial as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(FutureRepealSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).TradeCode as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(TradeCode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).BankID as *const _ as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).BankBranchID as *const _ as usize
        },
        47usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(BankBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).BrokerID as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).BrokerBranchID as *const _ as usize
        },
        63usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(BrokerBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).TradeDate as *const _ as usize
        },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(TradeDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).TradeTime as *const _ as usize
        },
        103usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(TradeTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).BankSerial as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(BankSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).TradingDay as *const _ as usize
        },
        125usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).PlateSerial as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(PlateSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).LastFragment as *const _ as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(LastFragment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).SessionID as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).CustomerName as *const _ as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(CustomerName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).IdCardType as *const _ as usize
        },
        199usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(IdCardType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).IdentifiedCardNo as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(IdentifiedCardNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).CustType as *const _ as usize
        },
        251usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(CustType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).BankAccount as *const _ as usize
        },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(BankAccount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).BankPassWord as *const _ as usize
        },
        293usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(BankPassWord)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).AccountID as *const _ as usize
        },
        334usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).Password as *const _ as usize
        },
        347usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(Password)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).InstallID as *const _ as usize
        },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).FutureSerial as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(FutureSerial)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).UserID as *const _ as usize },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).VerifyCertNoFlag as *const _
                as usize
        },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(VerifyCertNoFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).CurrencyID as *const _ as usize
        },
        413usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).TradeAmount as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(TradeAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).FutureFetchAmount as *const _
                as usize
        },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(FutureFetchAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).FeePayFlag as *const _ as usize
        },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(FeePayFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).CustFee as *const _ as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(CustFee)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).BrokerFee as *const _ as usize
        },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(BrokerFee)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).Message as *const _ as usize
        },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(Message)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).Digest as *const _ as usize },
        593usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(Digest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).BankAccType as *const _ as usize
        },
        629usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(BankAccType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).DeviceID as *const _ as usize
        },
        630usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(DeviceID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).BankSecuAccType as *const _
                as usize
        },
        633usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(BankSecuAccType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).BrokerIDByBank as *const _ as usize
        },
        634usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(BrokerIDByBank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).BankSecuAcc as *const _ as usize
        },
        667usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(BankSecuAcc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).BankPwdFlag as *const _ as usize
        },
        708usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(BankPwdFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).SecuPwdFlag as *const _ as usize
        },
        709usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(SecuPwdFlag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).OperNo as *const _ as usize },
        710usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(OperNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).RequestID as *const _ as usize
        },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).TID as *const _ as usize },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(TID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).TransferStatus as *const _ as usize
        },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(TransferStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqRepealField>())).LongCustomerName as *const _
                as usize
        },
        737usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqRepealField),
            "::",
            stringify!(LongCustomerName)
        )
    );
}
impl Default for CThostFtdcReqRepealField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "������Ӧ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspRepealField {
    #[doc = "����ʱ����"]
    pub RepealTimeInterval: TThostFtdcRepealTimeIntervalType,
    #[doc = "�Ѿ���������"]
    pub RepealedTimes: TThostFtdcRepealedTimesType,
    #[doc = "���г�����־"]
    pub BankRepealFlag: TThostFtdcBankRepealFlagType,
    #[doc = "���\u{333}�����־"]
    pub BrokerRepealFlag: TThostFtdcBrokerRepealFlagType,
    #[doc = "������ƽ\u{328}��ˮ��"]
    pub PlateRepealSerial: TThostFtdcPlateSerialType,
    #[doc = "������������ˮ��"]
    pub BankRepealSerial: TThostFtdcBankSerialType,
    #[doc = "�������ڻ���ˮ��"]
    pub FutureRepealSerial: TThostFtdcFutureSerialType,
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�ڻ���˾��ˮ��"]
    pub FutureSerial: TThostFtdcFutureSerialType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��\u{5a4}�ͻ�\u{5a4}�������־"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "ת�ʽ��"]
    pub TradeAmount: TThostFtdcTradeAmountType,
    #[doc = "�ڻ���ȡ���"]
    pub FutureFetchAmount: TThostFtdcTradeAmountType,
    #[doc = "����\u{5a7}����־"]
    pub FeePayFlag: TThostFtdcFeePayFlagType,
    #[doc = "Ӧ�տͻ�����"]
    pub CustFee: TThostFtdcCustFeeType,
    #[doc = "Ӧ���ڻ���˾����"]
    pub BrokerFee: TThostFtdcFutureFeeType,
    #[doc = "���ͷ������շ�����Ϣ"]
    pub Message: TThostFtdcAddInfoType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "�����ʺ�����"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���λ�ʺ�����"]
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "�ڻ���λ�ʺ�"]
    pub BankSecuAcc: TThostFtdcBankAccountType,
    #[doc = "���������־"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "�ڻ��ʽ�����˶Ա�־"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "ת�˽���״\u{32c}"]
    pub TransferStatus: TThostFtdcTransferStatusType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "���ͻ�����"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[test]
fn bindgen_test_layout_CThostFtdcRspRepealField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcRspRepealField>(),
        992usize,
        concat!("Size of: ", stringify!(CThostFtdcRspRepealField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcRspRepealField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcRspRepealField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).RepealTimeInterval as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(RepealTimeInterval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).RepealedTimes as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(RepealedTimes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).BankRepealFlag as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(BankRepealFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).BrokerRepealFlag as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(BrokerRepealFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).PlateRepealSerial as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(PlateRepealSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).BankRepealSerial as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(BankRepealSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).FutureRepealSerial as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(FutureRepealSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).TradeCode as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(TradeCode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).BankID as *const _ as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).BankBranchID as *const _ as usize
        },
        47usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(BankBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).BrokerID as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).BrokerBranchID as *const _ as usize
        },
        63usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(BrokerBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).TradeDate as *const _ as usize
        },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(TradeDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).TradeTime as *const _ as usize
        },
        103usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(TradeTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).BankSerial as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(BankSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).TradingDay as *const _ as usize
        },
        125usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).PlateSerial as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(PlateSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).LastFragment as *const _ as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(LastFragment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).SessionID as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).CustomerName as *const _ as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(CustomerName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).IdCardType as *const _ as usize
        },
        199usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(IdCardType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).IdentifiedCardNo as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(IdentifiedCardNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).CustType as *const _ as usize
        },
        251usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(CustType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).BankAccount as *const _ as usize
        },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(BankAccount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).BankPassWord as *const _ as usize
        },
        293usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(BankPassWord)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).AccountID as *const _ as usize
        },
        334usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).Password as *const _ as usize
        },
        347usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(Password)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).InstallID as *const _ as usize
        },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).FutureSerial as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(FutureSerial)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).UserID as *const _ as usize },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).VerifyCertNoFlag as *const _
                as usize
        },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(VerifyCertNoFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).CurrencyID as *const _ as usize
        },
        413usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).TradeAmount as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(TradeAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).FutureFetchAmount as *const _
                as usize
        },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(FutureFetchAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).FeePayFlag as *const _ as usize
        },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(FeePayFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).CustFee as *const _ as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(CustFee)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).BrokerFee as *const _ as usize
        },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(BrokerFee)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).Message as *const _ as usize
        },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(Message)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).Digest as *const _ as usize },
        593usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(Digest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).BankAccType as *const _ as usize
        },
        629usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(BankAccType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).DeviceID as *const _ as usize
        },
        630usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(DeviceID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).BankSecuAccType as *const _
                as usize
        },
        633usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(BankSecuAccType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).BrokerIDByBank as *const _ as usize
        },
        634usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(BrokerIDByBank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).BankSecuAcc as *const _ as usize
        },
        667usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(BankSecuAcc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).BankPwdFlag as *const _ as usize
        },
        708usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(BankPwdFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).SecuPwdFlag as *const _ as usize
        },
        709usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(SecuPwdFlag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).OperNo as *const _ as usize },
        710usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(OperNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).RequestID as *const _ as usize
        },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).TID as *const _ as usize },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(TID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).TransferStatus as *const _ as usize
        },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(TransferStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).ErrorID as *const _ as usize
        },
        740usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(ErrorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).ErrorMsg as *const _ as usize
        },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(ErrorMsg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspRepealField>())).LongCustomerName as *const _
                as usize
        },
        825usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspRepealField),
            "::",
            stringify!(LongCustomerName)
        )
    );
}
impl Default for CThostFtdcRspRepealField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ�˻���Ϣ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqQueryAccountField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "�ڻ���˾��ˮ��"]
    pub FutureSerial: TThostFtdcFutureSerialType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��\u{5a4}�ͻ�\u{5a4}�������־"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "�����ʺ�����"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���λ�ʺ�����"]
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "�ڻ���λ�ʺ�"]
    pub BankSecuAcc: TThostFtdcBankAccountType,
    #[doc = "���������־"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "�ڻ��ʽ�����˶Ա�־"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "���ͻ�����"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[test]
fn bindgen_test_layout_CThostFtdcReqQueryAccountField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcReqQueryAccountField>(),
        688usize,
        concat!("Size of: ", stringify!(CThostFtdcReqQueryAccountField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcReqQueryAccountField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcReqQueryAccountField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).TradeCode as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(TradeCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).BankID as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).BankBranchID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(BankBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).BrokerID as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).BrokerBranchID as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(BrokerBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).TradeDate as *const _
                as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(TradeDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).TradeTime as *const _
                as usize
        },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(TradeTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).BankSerial as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(BankSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).TradingDay as *const _
                as usize
        },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).PlateSerial as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(PlateSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).LastFragment as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(LastFragment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).SessionID as *const _
                as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).CustomerName as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(CustomerName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).IdCardType as *const _
                as usize
        },
        163usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(IdCardType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).IdentifiedCardNo as *const _
                as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(IdentifiedCardNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).CustType as *const _ as usize
        },
        215usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(CustType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).BankAccount as *const _
                as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(BankAccount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).BankPassWord as *const _
                as usize
        },
        257usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(BankPassWord)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).AccountID as *const _
                as usize
        },
        298usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).Password as *const _ as usize
        },
        311usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(Password)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).FutureSerial as *const _
                as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(FutureSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).InstallID as *const _
                as usize
        },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).UserID as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).VerifyCertNoFlag as *const _
                as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(VerifyCertNoFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).CurrencyID as *const _
                as usize
        },
        377usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).Digest as *const _ as usize
        },
        381usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(Digest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).BankAccType as *const _
                as usize
        },
        417usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(BankAccType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).DeviceID as *const _ as usize
        },
        418usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(DeviceID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).BankSecuAccType as *const _
                as usize
        },
        421usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(BankSecuAccType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).BrokerIDByBank as *const _
                as usize
        },
        422usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(BrokerIDByBank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).BankSecuAcc as *const _
                as usize
        },
        455usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(BankSecuAcc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).BankPwdFlag as *const _
                as usize
        },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(BankPwdFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).SecuPwdFlag as *const _
                as usize
        },
        497usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(SecuPwdFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).OperNo as *const _ as usize
        },
        498usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(OperNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).RequestID as *const _
                as usize
        },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).TID as *const _ as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(TID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryAccountField>())).LongCustomerName as *const _
                as usize
        },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryAccountField),
            "::",
            stringify!(LongCustomerName)
        )
    );
}
impl Default for CThostFtdcReqQueryAccountField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ�˻���Ϣ��Ӧ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspQueryAccountField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "�ڻ���˾��ˮ��"]
    pub FutureSerial: TThostFtdcFutureSerialType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��\u{5a4}�ͻ�\u{5a4}�������־"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "�����ʺ�����"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���λ�ʺ�����"]
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "�ڻ���λ�ʺ�"]
    pub BankSecuAcc: TThostFtdcBankAccountType,
    #[doc = "���������־"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "�ڻ��ʽ�����˶Ա�־"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "���п��ý��"]
    pub BankUseAmount: TThostFtdcTradeAmountType,
    #[doc = "���п�ȡ���"]
    pub BankFetchAmount: TThostFtdcTradeAmountType,
    #[doc = "���ͻ�����"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[test]
fn bindgen_test_layout_CThostFtdcRspQueryAccountField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcRspQueryAccountField>(),
        712usize,
        concat!("Size of: ", stringify!(CThostFtdcRspQueryAccountField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcRspQueryAccountField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcRspQueryAccountField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).TradeCode as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(TradeCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).BankID as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).BankBranchID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(BankBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).BrokerID as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).BrokerBranchID as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(BrokerBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).TradeDate as *const _
                as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(TradeDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).TradeTime as *const _
                as usize
        },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(TradeTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).BankSerial as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(BankSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).TradingDay as *const _
                as usize
        },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).PlateSerial as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(PlateSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).LastFragment as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(LastFragment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).SessionID as *const _
                as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).CustomerName as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(CustomerName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).IdCardType as *const _
                as usize
        },
        163usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(IdCardType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).IdentifiedCardNo as *const _
                as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(IdentifiedCardNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).CustType as *const _ as usize
        },
        215usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(CustType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).BankAccount as *const _
                as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(BankAccount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).BankPassWord as *const _
                as usize
        },
        257usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(BankPassWord)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).AccountID as *const _
                as usize
        },
        298usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).Password as *const _ as usize
        },
        311usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(Password)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).FutureSerial as *const _
                as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(FutureSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).InstallID as *const _
                as usize
        },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).UserID as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).VerifyCertNoFlag as *const _
                as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(VerifyCertNoFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).CurrencyID as *const _
                as usize
        },
        377usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).Digest as *const _ as usize
        },
        381usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(Digest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).BankAccType as *const _
                as usize
        },
        417usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(BankAccType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).DeviceID as *const _ as usize
        },
        418usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(DeviceID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).BankSecuAccType as *const _
                as usize
        },
        421usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(BankSecuAccType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).BrokerIDByBank as *const _
                as usize
        },
        422usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(BrokerIDByBank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).BankSecuAcc as *const _
                as usize
        },
        455usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(BankSecuAcc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).BankPwdFlag as *const _
                as usize
        },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(BankPwdFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).SecuPwdFlag as *const _
                as usize
        },
        497usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(SecuPwdFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).OperNo as *const _ as usize
        },
        498usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(OperNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).RequestID as *const _
                as usize
        },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).TID as *const _ as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(TID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).BankUseAmount as *const _
                as usize
        },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(BankUseAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).BankFetchAmount as *const _
                as usize
        },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(BankFetchAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryAccountField>())).LongCustomerName as *const _
                as usize
        },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryAccountField),
            "::",
            stringify!(LongCustomerName)
        )
    );
}
impl Default for CThostFtdcRspQueryAccountField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "����ǩ��ǩ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcFutureSignIOField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcFutureSignIOField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcFutureSignIOField>(),
        236usize,
        concat!("Size of: ", stringify!(CThostFtdcFutureSignIOField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcFutureSignIOField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcFutureSignIOField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFutureSignIOField>())).TradeCode as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFutureSignIOField),
            "::",
            stringify!(TradeCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFutureSignIOField>())).BankID as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFutureSignIOField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFutureSignIOField>())).BankBranchID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFutureSignIOField),
            "::",
            stringify!(BankBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFutureSignIOField>())).BrokerID as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFutureSignIOField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFutureSignIOField>())).BrokerBranchID as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFutureSignIOField),
            "::",
            stringify!(BrokerBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFutureSignIOField>())).TradeDate as *const _ as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFutureSignIOField),
            "::",
            stringify!(TradeDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFutureSignIOField>())).TradeTime as *const _ as usize
        },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFutureSignIOField),
            "::",
            stringify!(TradeTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFutureSignIOField>())).BankSerial as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFutureSignIOField),
            "::",
            stringify!(BankSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFutureSignIOField>())).TradingDay as *const _ as usize
        },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFutureSignIOField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFutureSignIOField>())).PlateSerial as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFutureSignIOField),
            "::",
            stringify!(PlateSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFutureSignIOField>())).LastFragment as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFutureSignIOField),
            "::",
            stringify!(LastFragment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFutureSignIOField>())).SessionID as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFutureSignIOField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFutureSignIOField>())).InstallID as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFutureSignIOField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFutureSignIOField>())).UserID as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFutureSignIOField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFutureSignIOField>())).Digest as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFutureSignIOField),
            "::",
            stringify!(Digest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFutureSignIOField>())).CurrencyID as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFutureSignIOField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFutureSignIOField>())).DeviceID as *const _ as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFutureSignIOField),
            "::",
            stringify!(DeviceID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFutureSignIOField>())).BrokerIDByBank as *const _
                as usize
        },
        175usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFutureSignIOField),
            "::",
            stringify!(BrokerIDByBank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFutureSignIOField>())).OperNo as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFutureSignIOField),
            "::",
            stringify!(OperNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFutureSignIOField>())).RequestID as *const _ as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFutureSignIOField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcFutureSignIOField>())).TID as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFutureSignIOField),
            "::",
            stringify!(TID)
        )
    );
}
impl Default for CThostFtdcFutureSignIOField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "����ǩ����Ӧ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspFutureSignInField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "PIN��Կ"]
    pub PinKey: TThostFtdcPasswordKeyType,
    #[doc = "MAC��Կ"]
    pub MacKey: TThostFtdcPasswordKeyType,
}
#[test]
fn bindgen_test_layout_CThostFtdcRspFutureSignInField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcRspFutureSignInField>(),
        580usize,
        concat!("Size of: ", stringify!(CThostFtdcRspFutureSignInField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcRspFutureSignInField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcRspFutureSignInField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignInField>())).TradeCode as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignInField),
            "::",
            stringify!(TradeCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignInField>())).BankID as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignInField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignInField>())).BankBranchID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignInField),
            "::",
            stringify!(BankBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignInField>())).BrokerID as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignInField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignInField>())).BrokerBranchID as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignInField),
            "::",
            stringify!(BrokerBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignInField>())).TradeDate as *const _
                as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignInField),
            "::",
            stringify!(TradeDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignInField>())).TradeTime as *const _
                as usize
        },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignInField),
            "::",
            stringify!(TradeTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignInField>())).BankSerial as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignInField),
            "::",
            stringify!(BankSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignInField>())).TradingDay as *const _
                as usize
        },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignInField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignInField>())).PlateSerial as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignInField),
            "::",
            stringify!(PlateSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignInField>())).LastFragment as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignInField),
            "::",
            stringify!(LastFragment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignInField>())).SessionID as *const _
                as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignInField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignInField>())).InstallID as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignInField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignInField>())).UserID as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignInField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignInField>())).Digest as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignInField),
            "::",
            stringify!(Digest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignInField>())).CurrencyID as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignInField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignInField>())).DeviceID as *const _ as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignInField),
            "::",
            stringify!(DeviceID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignInField>())).BrokerIDByBank as *const _
                as usize
        },
        175usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignInField),
            "::",
            stringify!(BrokerIDByBank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignInField>())).OperNo as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignInField),
            "::",
            stringify!(OperNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignInField>())).RequestID as *const _
                as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignInField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignInField>())).TID as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignInField),
            "::",
            stringify!(TID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignInField>())).ErrorID as *const _ as usize
        },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignInField),
            "::",
            stringify!(ErrorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignInField>())).ErrorMsg as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignInField),
            "::",
            stringify!(ErrorMsg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignInField>())).PinKey as *const _ as usize
        },
        321usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignInField),
            "::",
            stringify!(PinKey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignInField>())).MacKey as *const _ as usize
        },
        450usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignInField),
            "::",
            stringify!(MacKey)
        )
    );
}
impl Default for CThostFtdcRspFutureSignInField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "����ǩ������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqFutureSignOutField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcReqFutureSignOutField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcReqFutureSignOutField>(),
        236usize,
        concat!("Size of: ", stringify!(CThostFtdcReqFutureSignOutField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcReqFutureSignOutField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcReqFutureSignOutField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqFutureSignOutField>())).TradeCode as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqFutureSignOutField),
            "::",
            stringify!(TradeCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqFutureSignOutField>())).BankID as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqFutureSignOutField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqFutureSignOutField>())).BankBranchID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqFutureSignOutField),
            "::",
            stringify!(BankBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqFutureSignOutField>())).BrokerID as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqFutureSignOutField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqFutureSignOutField>())).BrokerBranchID as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqFutureSignOutField),
            "::",
            stringify!(BrokerBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqFutureSignOutField>())).TradeDate as *const _
                as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqFutureSignOutField),
            "::",
            stringify!(TradeDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqFutureSignOutField>())).TradeTime as *const _
                as usize
        },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqFutureSignOutField),
            "::",
            stringify!(TradeTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqFutureSignOutField>())).BankSerial as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqFutureSignOutField),
            "::",
            stringify!(BankSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqFutureSignOutField>())).TradingDay as *const _
                as usize
        },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqFutureSignOutField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqFutureSignOutField>())).PlateSerial as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqFutureSignOutField),
            "::",
            stringify!(PlateSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqFutureSignOutField>())).LastFragment as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqFutureSignOutField),
            "::",
            stringify!(LastFragment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqFutureSignOutField>())).SessionID as *const _
                as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqFutureSignOutField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqFutureSignOutField>())).InstallID as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqFutureSignOutField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqFutureSignOutField>())).UserID as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqFutureSignOutField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqFutureSignOutField>())).Digest as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqFutureSignOutField),
            "::",
            stringify!(Digest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqFutureSignOutField>())).CurrencyID as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqFutureSignOutField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqFutureSignOutField>())).DeviceID as *const _
                as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqFutureSignOutField),
            "::",
            stringify!(DeviceID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqFutureSignOutField>())).BrokerIDByBank as *const _
                as usize
        },
        175usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqFutureSignOutField),
            "::",
            stringify!(BrokerIDByBank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqFutureSignOutField>())).OperNo as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqFutureSignOutField),
            "::",
            stringify!(OperNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqFutureSignOutField>())).RequestID as *const _
                as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqFutureSignOutField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqFutureSignOutField>())).TID as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqFutureSignOutField),
            "::",
            stringify!(TID)
        )
    );
}
impl Default for CThostFtdcReqFutureSignOutField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "����ǩ����Ӧ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspFutureSignOutField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
#[test]
fn bindgen_test_layout_CThostFtdcRspFutureSignOutField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcRspFutureSignOutField>(),
        324usize,
        concat!("Size of: ", stringify!(CThostFtdcRspFutureSignOutField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcRspFutureSignOutField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcRspFutureSignOutField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignOutField>())).TradeCode as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignOutField),
            "::",
            stringify!(TradeCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignOutField>())).BankID as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignOutField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignOutField>())).BankBranchID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignOutField),
            "::",
            stringify!(BankBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignOutField>())).BrokerID as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignOutField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignOutField>())).BrokerBranchID as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignOutField),
            "::",
            stringify!(BrokerBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignOutField>())).TradeDate as *const _
                as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignOutField),
            "::",
            stringify!(TradeDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignOutField>())).TradeTime as *const _
                as usize
        },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignOutField),
            "::",
            stringify!(TradeTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignOutField>())).BankSerial as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignOutField),
            "::",
            stringify!(BankSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignOutField>())).TradingDay as *const _
                as usize
        },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignOutField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignOutField>())).PlateSerial as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignOutField),
            "::",
            stringify!(PlateSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignOutField>())).LastFragment as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignOutField),
            "::",
            stringify!(LastFragment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignOutField>())).SessionID as *const _
                as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignOutField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignOutField>())).InstallID as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignOutField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignOutField>())).UserID as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignOutField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignOutField>())).Digest as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignOutField),
            "::",
            stringify!(Digest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignOutField>())).CurrencyID as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignOutField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignOutField>())).DeviceID as *const _
                as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignOutField),
            "::",
            stringify!(DeviceID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignOutField>())).BrokerIDByBank as *const _
                as usize
        },
        175usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignOutField),
            "::",
            stringify!(BrokerIDByBank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignOutField>())).OperNo as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignOutField),
            "::",
            stringify!(OperNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignOutField>())).RequestID as *const _
                as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignOutField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignOutField>())).TID as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignOutField),
            "::",
            stringify!(TID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignOutField>())).ErrorID as *const _ as usize
        },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignOutField),
            "::",
            stringify!(ErrorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspFutureSignOutField>())).ErrorMsg as *const _
                as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspFutureSignOutField),
            "::",
            stringify!(ErrorMsg)
        )
    );
}
impl Default for CThostFtdcRspFutureSignOutField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ\u{5b8}����ˮ�ŵĽ��\u{5fd}������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqQueryTradeResultBySerialField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "��ˮ��"]
    pub Reference: TThostFtdcSerialType,
    #[doc = "����ˮ�ŷ����ߵĻ�������"]
    pub RefrenceIssureType: TThostFtdcInstitutionTypeType,
    #[doc = "����ˮ�ŷ����\u{7fb}�������"]
    pub RefrenceIssure: TThostFtdcOrganCodeType,
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "ת�ʽ��"]
    pub TradeAmount: TThostFtdcTradeAmountType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "���ͻ�����"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[test]
fn bindgen_test_layout_CThostFtdcReqQueryTradeResultBySerialField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcReqQueryTradeResultBySerialField>(),
        608usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcReqQueryTradeResultBySerialField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcReqQueryTradeResultBySerialField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcReqQueryTradeResultBySerialField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryTradeResultBySerialField>())).TradeCode
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryTradeResultBySerialField),
            "::",
            stringify!(TradeCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryTradeResultBySerialField>())).BankID
                as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryTradeResultBySerialField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryTradeResultBySerialField>())).BankBranchID
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryTradeResultBySerialField),
            "::",
            stringify!(BankBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryTradeResultBySerialField>())).BrokerID
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryTradeResultBySerialField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryTradeResultBySerialField>())).BrokerBranchID
                as *const _ as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryTradeResultBySerialField),
            "::",
            stringify!(BrokerBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryTradeResultBySerialField>())).TradeDate
                as *const _ as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryTradeResultBySerialField),
            "::",
            stringify!(TradeDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryTradeResultBySerialField>())).TradeTime
                as *const _ as usize
        },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryTradeResultBySerialField),
            "::",
            stringify!(TradeTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryTradeResultBySerialField>())).BankSerial
                as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryTradeResultBySerialField),
            "::",
            stringify!(BankSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryTradeResultBySerialField>())).TradingDay
                as *const _ as usize
        },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryTradeResultBySerialField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryTradeResultBySerialField>())).PlateSerial
                as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryTradeResultBySerialField),
            "::",
            stringify!(PlateSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryTradeResultBySerialField>())).LastFragment
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryTradeResultBySerialField),
            "::",
            stringify!(LastFragment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryTradeResultBySerialField>())).SessionID
                as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryTradeResultBySerialField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryTradeResultBySerialField>())).Reference
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryTradeResultBySerialField),
            "::",
            stringify!(Reference)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryTradeResultBySerialField>()))
                .RefrenceIssureType as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryTradeResultBySerialField),
            "::",
            stringify!(RefrenceIssureType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryTradeResultBySerialField>())).RefrenceIssure
                as *const _ as usize
        },
        117usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryTradeResultBySerialField),
            "::",
            stringify!(RefrenceIssure)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryTradeResultBySerialField>())).CustomerName
                as *const _ as usize
        },
        153usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryTradeResultBySerialField),
            "::",
            stringify!(CustomerName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryTradeResultBySerialField>())).IdCardType
                as *const _ as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryTradeResultBySerialField),
            "::",
            stringify!(IdCardType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryTradeResultBySerialField>())).IdentifiedCardNo
                as *const _ as usize
        },
        205usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryTradeResultBySerialField),
            "::",
            stringify!(IdentifiedCardNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryTradeResultBySerialField>())).CustType
                as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryTradeResultBySerialField),
            "::",
            stringify!(CustType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryTradeResultBySerialField>())).BankAccount
                as *const _ as usize
        },
        257usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryTradeResultBySerialField),
            "::",
            stringify!(BankAccount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryTradeResultBySerialField>())).BankPassWord
                as *const _ as usize
        },
        298usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryTradeResultBySerialField),
            "::",
            stringify!(BankPassWord)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryTradeResultBySerialField>())).AccountID
                as *const _ as usize
        },
        339usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryTradeResultBySerialField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryTradeResultBySerialField>())).Password
                as *const _ as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryTradeResultBySerialField),
            "::",
            stringify!(Password)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryTradeResultBySerialField>())).CurrencyID
                as *const _ as usize
        },
        393usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryTradeResultBySerialField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryTradeResultBySerialField>())).TradeAmount
                as *const _ as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryTradeResultBySerialField),
            "::",
            stringify!(TradeAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryTradeResultBySerialField>())).Digest
                as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryTradeResultBySerialField),
            "::",
            stringify!(Digest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqQueryTradeResultBySerialField>())).LongCustomerName
                as *const _ as usize
        },
        444usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqQueryTradeResultBySerialField),
            "::",
            stringify!(LongCustomerName)
        )
    );
}
impl Default for CThostFtdcReqQueryTradeResultBySerialField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ\u{5b8}����ˮ�ŵĽ��\u{5fd}����Ӧ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspQueryTradeResultBySerialField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "��ˮ��"]
    pub Reference: TThostFtdcSerialType,
    #[doc = "����ˮ�ŷ����ߵĻ�������"]
    pub RefrenceIssureType: TThostFtdcInstitutionTypeType,
    #[doc = "����ˮ�ŷ����\u{7fb}�������"]
    pub RefrenceIssure: TThostFtdcOrganCodeType,
    #[doc = "ԭʼ���ش���"]
    pub OriginReturnCode: TThostFtdcReturnCodeType,
    #[doc = "ԭʼ����������"]
    pub OriginDescrInfoForReturnCode: TThostFtdcDescrInfoForReturnCodeType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "ת�ʽ��"]
    pub TradeAmount: TThostFtdcTradeAmountType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
}
#[test]
fn bindgen_test_layout_CThostFtdcRspQueryTradeResultBySerialField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcRspQueryTradeResultBySerialField>(),
        568usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcRspQueryTradeResultBySerialField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcRspQueryTradeResultBySerialField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcRspQueryTradeResultBySerialField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryTradeResultBySerialField>())).TradeCode
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryTradeResultBySerialField),
            "::",
            stringify!(TradeCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryTradeResultBySerialField>())).BankID
                as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryTradeResultBySerialField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryTradeResultBySerialField>())).BankBranchID
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryTradeResultBySerialField),
            "::",
            stringify!(BankBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryTradeResultBySerialField>())).BrokerID
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryTradeResultBySerialField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryTradeResultBySerialField>())).BrokerBranchID
                as *const _ as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryTradeResultBySerialField),
            "::",
            stringify!(BrokerBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryTradeResultBySerialField>())).TradeDate
                as *const _ as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryTradeResultBySerialField),
            "::",
            stringify!(TradeDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryTradeResultBySerialField>())).TradeTime
                as *const _ as usize
        },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryTradeResultBySerialField),
            "::",
            stringify!(TradeTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryTradeResultBySerialField>())).BankSerial
                as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryTradeResultBySerialField),
            "::",
            stringify!(BankSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryTradeResultBySerialField>())).TradingDay
                as *const _ as usize
        },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryTradeResultBySerialField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryTradeResultBySerialField>())).PlateSerial
                as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryTradeResultBySerialField),
            "::",
            stringify!(PlateSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryTradeResultBySerialField>())).LastFragment
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryTradeResultBySerialField),
            "::",
            stringify!(LastFragment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryTradeResultBySerialField>())).SessionID
                as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryTradeResultBySerialField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryTradeResultBySerialField>())).ErrorID
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryTradeResultBySerialField),
            "::",
            stringify!(ErrorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryTradeResultBySerialField>())).ErrorMsg
                as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryTradeResultBySerialField),
            "::",
            stringify!(ErrorMsg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryTradeResultBySerialField>())).Reference
                as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryTradeResultBySerialField),
            "::",
            stringify!(Reference)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryTradeResultBySerialField>()))
                .RefrenceIssureType as *const _ as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryTradeResultBySerialField),
            "::",
            stringify!(RefrenceIssureType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryTradeResultBySerialField>())).RefrenceIssure
                as *const _ as usize
        },
        205usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryTradeResultBySerialField),
            "::",
            stringify!(RefrenceIssure)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryTradeResultBySerialField>())).OriginReturnCode
                as *const _ as usize
        },
        241usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryTradeResultBySerialField),
            "::",
            stringify!(OriginReturnCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryTradeResultBySerialField>()))
                .OriginDescrInfoForReturnCode as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryTradeResultBySerialField),
            "::",
            stringify!(OriginDescrInfoForReturnCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryTradeResultBySerialField>())).BankAccount
                as *const _ as usize
        },
        377usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryTradeResultBySerialField),
            "::",
            stringify!(BankAccount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryTradeResultBySerialField>())).BankPassWord
                as *const _ as usize
        },
        418usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryTradeResultBySerialField),
            "::",
            stringify!(BankPassWord)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryTradeResultBySerialField>())).AccountID
                as *const _ as usize
        },
        459usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryTradeResultBySerialField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryTradeResultBySerialField>())).Password
                as *const _ as usize
        },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryTradeResultBySerialField),
            "::",
            stringify!(Password)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryTradeResultBySerialField>())).CurrencyID
                as *const _ as usize
        },
        513usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryTradeResultBySerialField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryTradeResultBySerialField>())).TradeAmount
                as *const _ as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryTradeResultBySerialField),
            "::",
            stringify!(TradeAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspQueryTradeResultBySerialField>())).Digest
                as *const _ as usize
        },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspQueryTradeResultBySerialField),
            "::",
            stringify!(Digest)
        )
    );
}
impl Default for CThostFtdcRspQueryTradeResultBySerialField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�����ļ���������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqDayEndFileReadyField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�ļ�ҵ����"]
    pub FileBusinessCode: TThostFtdcFileBusinessCodeType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
}
#[test]
fn bindgen_test_layout_CThostFtdcReqDayEndFileReadyField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcReqDayEndFileReadyField>(),
        152usize,
        concat!("Size of: ", stringify!(CThostFtdcReqDayEndFileReadyField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcReqDayEndFileReadyField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcReqDayEndFileReadyField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqDayEndFileReadyField>())).TradeCode as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqDayEndFileReadyField),
            "::",
            stringify!(TradeCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqDayEndFileReadyField>())).BankID as *const _
                as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqDayEndFileReadyField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqDayEndFileReadyField>())).BankBranchID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqDayEndFileReadyField),
            "::",
            stringify!(BankBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqDayEndFileReadyField>())).BrokerID as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqDayEndFileReadyField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqDayEndFileReadyField>())).BrokerBranchID as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqDayEndFileReadyField),
            "::",
            stringify!(BrokerBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqDayEndFileReadyField>())).TradeDate as *const _
                as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqDayEndFileReadyField),
            "::",
            stringify!(TradeDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqDayEndFileReadyField>())).TradeTime as *const _
                as usize
        },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqDayEndFileReadyField),
            "::",
            stringify!(TradeTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqDayEndFileReadyField>())).BankSerial as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqDayEndFileReadyField),
            "::",
            stringify!(BankSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqDayEndFileReadyField>())).TradingDay as *const _
                as usize
        },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqDayEndFileReadyField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqDayEndFileReadyField>())).PlateSerial as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqDayEndFileReadyField),
            "::",
            stringify!(PlateSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqDayEndFileReadyField>())).LastFragment as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqDayEndFileReadyField),
            "::",
            stringify!(LastFragment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqDayEndFileReadyField>())).SessionID as *const _
                as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqDayEndFileReadyField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqDayEndFileReadyField>())).FileBusinessCode
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqDayEndFileReadyField),
            "::",
            stringify!(FileBusinessCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqDayEndFileReadyField>())).Digest as *const _
                as usize
        },
        113usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqDayEndFileReadyField),
            "::",
            stringify!(Digest)
        )
    );
}
impl Default for CThostFtdcReqDayEndFileReadyField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���ؽ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReturnResultField {
    #[doc = "���ش���"]
    pub ReturnCode: TThostFtdcReturnCodeType,
    #[doc = "����������"]
    pub DescrInfoForReturnCode: TThostFtdcDescrInfoForReturnCodeType,
}
#[test]
fn bindgen_test_layout_CThostFtdcReturnResultField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcReturnResultField>(),
        136usize,
        concat!("Size of: ", stringify!(CThostFtdcReturnResultField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcReturnResultField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcReturnResultField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReturnResultField>())).ReturnCode as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReturnResultField),
            "::",
            stringify!(ReturnCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReturnResultField>())).DescrInfoForReturnCode
                as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReturnResultField),
            "::",
            stringify!(DescrInfoForReturnCode)
        )
    );
}
impl Default for CThostFtdcReturnResultField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��\u{5a4}�ڻ��ʽ�����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcVerifyFuturePasswordField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcVerifyFuturePasswordField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcVerifyFuturePasswordField>(),
        260usize,
        concat!("Size of: ", stringify!(CThostFtdcVerifyFuturePasswordField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcVerifyFuturePasswordField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcVerifyFuturePasswordField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyFuturePasswordField>())).TradeCode as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyFuturePasswordField),
            "::",
            stringify!(TradeCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyFuturePasswordField>())).BankID as *const _
                as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyFuturePasswordField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyFuturePasswordField>())).BankBranchID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyFuturePasswordField),
            "::",
            stringify!(BankBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyFuturePasswordField>())).BrokerID as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyFuturePasswordField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyFuturePasswordField>())).BrokerBranchID
                as *const _ as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyFuturePasswordField),
            "::",
            stringify!(BrokerBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyFuturePasswordField>())).TradeDate as *const _
                as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyFuturePasswordField),
            "::",
            stringify!(TradeDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyFuturePasswordField>())).TradeTime as *const _
                as usize
        },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyFuturePasswordField),
            "::",
            stringify!(TradeTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyFuturePasswordField>())).BankSerial as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyFuturePasswordField),
            "::",
            stringify!(BankSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyFuturePasswordField>())).TradingDay as *const _
                as usize
        },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyFuturePasswordField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyFuturePasswordField>())).PlateSerial as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyFuturePasswordField),
            "::",
            stringify!(PlateSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyFuturePasswordField>())).LastFragment as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyFuturePasswordField),
            "::",
            stringify!(LastFragment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyFuturePasswordField>())).SessionID as *const _
                as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyFuturePasswordField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyFuturePasswordField>())).AccountID as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyFuturePasswordField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyFuturePasswordField>())).Password as *const _
                as usize
        },
        125usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyFuturePasswordField),
            "::",
            stringify!(Password)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyFuturePasswordField>())).BankAccount as *const _
                as usize
        },
        166usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyFuturePasswordField),
            "::",
            stringify!(BankAccount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyFuturePasswordField>())).BankPassWord as *const _
                as usize
        },
        207usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyFuturePasswordField),
            "::",
            stringify!(BankPassWord)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyFuturePasswordField>())).InstallID as *const _
                as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyFuturePasswordField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyFuturePasswordField>())).TID as *const _ as usize
        },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyFuturePasswordField),
            "::",
            stringify!(TID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyFuturePasswordField>())).CurrencyID as *const _
                as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyFuturePasswordField),
            "::",
            stringify!(CurrencyID)
        )
    );
}
impl Default for CThostFtdcVerifyFuturePasswordField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��\u{5a4}�ͻ���Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcVerifyCustInfoField {
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "���ͻ�����"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[test]
fn bindgen_test_layout_CThostFtdcVerifyCustInfoField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcVerifyCustInfoField>(),
        265usize,
        concat!("Size of: ", stringify!(CThostFtdcVerifyCustInfoField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcVerifyCustInfoField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcVerifyCustInfoField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyCustInfoField>())).CustomerName as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyCustInfoField),
            "::",
            stringify!(CustomerName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyCustInfoField>())).IdCardType as *const _
                as usize
        },
        51usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyCustInfoField),
            "::",
            stringify!(IdCardType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyCustInfoField>())).IdentifiedCardNo as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyCustInfoField),
            "::",
            stringify!(IdentifiedCardNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyCustInfoField>())).CustType as *const _ as usize
        },
        103usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyCustInfoField),
            "::",
            stringify!(CustType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyCustInfoField>())).LongCustomerName as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyCustInfoField),
            "::",
            stringify!(LongCustomerName)
        )
    );
}
impl Default for CThostFtdcVerifyCustInfoField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��\u{5a4}�ڻ��ʽ�����Ϳͻ���Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcVerifyFuturePasswordAndCustInfoField {
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "���ͻ�����"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[test]
fn bindgen_test_layout_CThostFtdcVerifyFuturePasswordAndCustInfoField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcVerifyFuturePasswordAndCustInfoField>(),
        323usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcVerifyFuturePasswordAndCustInfoField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcVerifyFuturePasswordAndCustInfoField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcVerifyFuturePasswordAndCustInfoField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyFuturePasswordAndCustInfoField>())).CustomerName
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyFuturePasswordAndCustInfoField),
            "::",
            stringify!(CustomerName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyFuturePasswordAndCustInfoField>())).IdCardType
                as *const _ as usize
        },
        51usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyFuturePasswordAndCustInfoField),
            "::",
            stringify!(IdCardType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyFuturePasswordAndCustInfoField>()))
                .IdentifiedCardNo as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyFuturePasswordAndCustInfoField),
            "::",
            stringify!(IdentifiedCardNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyFuturePasswordAndCustInfoField>())).CustType
                as *const _ as usize
        },
        103usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyFuturePasswordAndCustInfoField),
            "::",
            stringify!(CustType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyFuturePasswordAndCustInfoField>())).AccountID
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyFuturePasswordAndCustInfoField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyFuturePasswordAndCustInfoField>())).Password
                as *const _ as usize
        },
        117usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyFuturePasswordAndCustInfoField),
            "::",
            stringify!(Password)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyFuturePasswordAndCustInfoField>())).CurrencyID
                as *const _ as usize
        },
        158usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyFuturePasswordAndCustInfoField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcVerifyFuturePasswordAndCustInfoField>()))
                .LongCustomerName as *const _ as usize
        },
        162usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcVerifyFuturePasswordAndCustInfoField),
            "::",
            stringify!(LongCustomerName)
        )
    );
}
impl Default for CThostFtdcVerifyFuturePasswordAndCustInfoField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��\u{5a4}�ڻ��ʽ�����Ϳͻ���Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcDepositResultInformField {
    #[doc = "�������ˮ�ţ�����ˮ��Ϊ���ڱ��\u{337}��ص���ˮ��"]
    pub DepositSeqNo: TThostFtdcDepositSeqNoType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "�����"]
    pub Deposit: TThostFtdcMoneyType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "���ش���"]
    pub ReturnCode: TThostFtdcReturnCodeType,
    #[doc = "����������"]
    pub DescrInfoForReturnCode: TThostFtdcDescrInfoForReturnCodeType,
}
#[test]
fn bindgen_test_layout_CThostFtdcDepositResultInformField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcDepositResultInformField>(),
        192usize,
        concat!("Size of: ", stringify!(CThostFtdcDepositResultInformField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcDepositResultInformField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcDepositResultInformField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepositResultInformField>())).DepositSeqNo as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepositResultInformField),
            "::",
            stringify!(DepositSeqNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepositResultInformField>())).BrokerID as *const _
                as usize
        },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepositResultInformField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepositResultInformField>())).InvestorID as *const _
                as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepositResultInformField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepositResultInformField>())).Deposit as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepositResultInformField),
            "::",
            stringify!(Deposit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepositResultInformField>())).RequestID as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepositResultInformField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepositResultInformField>())).ReturnCode as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepositResultInformField),
            "::",
            stringify!(ReturnCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepositResultInformField>())).DescrInfoForReturnCode
                as *const _ as usize
        },
        59usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepositResultInformField),
            "::",
            stringify!(DescrInfoForReturnCode)
        )
    );
}
impl Default for CThostFtdcDepositResultInformField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���\u{5fa}��������ڱ��\u{337}�����Կ\u{36c}������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqSyncKeyField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "���\u{5fa}��ĸ����ڱ��\u{335}���Ϣ"]
    pub Message: TThostFtdcAddInfoType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcReqSyncKeyField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcReqSyncKeyField>(),
        324usize,
        concat!("Size of: ", stringify!(CThostFtdcReqSyncKeyField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcReqSyncKeyField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcReqSyncKeyField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqSyncKeyField>())).TradeCode as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqSyncKeyField),
            "::",
            stringify!(TradeCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqSyncKeyField>())).BankID as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqSyncKeyField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqSyncKeyField>())).BankBranchID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqSyncKeyField),
            "::",
            stringify!(BankBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqSyncKeyField>())).BrokerID as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqSyncKeyField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqSyncKeyField>())).BrokerBranchID as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqSyncKeyField),
            "::",
            stringify!(BrokerBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqSyncKeyField>())).TradeDate as *const _ as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqSyncKeyField),
            "::",
            stringify!(TradeDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqSyncKeyField>())).TradeTime as *const _ as usize
        },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqSyncKeyField),
            "::",
            stringify!(TradeTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqSyncKeyField>())).BankSerial as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqSyncKeyField),
            "::",
            stringify!(BankSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqSyncKeyField>())).TradingDay as *const _ as usize
        },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqSyncKeyField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqSyncKeyField>())).PlateSerial as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqSyncKeyField),
            "::",
            stringify!(PlateSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqSyncKeyField>())).LastFragment as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqSyncKeyField),
            "::",
            stringify!(LastFragment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqSyncKeyField>())).SessionID as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqSyncKeyField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqSyncKeyField>())).InstallID as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqSyncKeyField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqSyncKeyField>())).UserID as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqSyncKeyField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqSyncKeyField>())).Message as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqSyncKeyField),
            "::",
            stringify!(Message)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqSyncKeyField>())).DeviceID as *const _ as usize
        },
        261usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqSyncKeyField),
            "::",
            stringify!(DeviceID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqSyncKeyField>())).BrokerIDByBank as *const _
                as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqSyncKeyField),
            "::",
            stringify!(BrokerIDByBank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqSyncKeyField>())).OperNo as *const _ as usize
        },
        297usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqSyncKeyField),
            "::",
            stringify!(OperNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqSyncKeyField>())).RequestID as *const _ as usize
        },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqSyncKeyField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcReqSyncKeyField>())).TID as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqSyncKeyField),
            "::",
            stringify!(TID)
        )
    );
}
impl Default for CThostFtdcReqSyncKeyField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���\u{5fa}��������ڱ��\u{337}�����Կ\u{36c}����Ӧ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspSyncKeyField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "���\u{5fa}��ĸ����ڱ��\u{335}���Ϣ"]
    pub Message: TThostFtdcAddInfoType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
#[test]
fn bindgen_test_layout_CThostFtdcRspSyncKeyField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcRspSyncKeyField>(),
        412usize,
        concat!("Size of: ", stringify!(CThostFtdcRspSyncKeyField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcRspSyncKeyField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcRspSyncKeyField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspSyncKeyField>())).TradeCode as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspSyncKeyField),
            "::",
            stringify!(TradeCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspSyncKeyField>())).BankID as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspSyncKeyField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspSyncKeyField>())).BankBranchID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspSyncKeyField),
            "::",
            stringify!(BankBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspSyncKeyField>())).BrokerID as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspSyncKeyField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspSyncKeyField>())).BrokerBranchID as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspSyncKeyField),
            "::",
            stringify!(BrokerBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspSyncKeyField>())).TradeDate as *const _ as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspSyncKeyField),
            "::",
            stringify!(TradeDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspSyncKeyField>())).TradeTime as *const _ as usize
        },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspSyncKeyField),
            "::",
            stringify!(TradeTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspSyncKeyField>())).BankSerial as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspSyncKeyField),
            "::",
            stringify!(BankSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspSyncKeyField>())).TradingDay as *const _ as usize
        },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspSyncKeyField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspSyncKeyField>())).PlateSerial as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspSyncKeyField),
            "::",
            stringify!(PlateSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspSyncKeyField>())).LastFragment as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspSyncKeyField),
            "::",
            stringify!(LastFragment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspSyncKeyField>())).SessionID as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspSyncKeyField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspSyncKeyField>())).InstallID as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspSyncKeyField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspSyncKeyField>())).UserID as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspSyncKeyField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspSyncKeyField>())).Message as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspSyncKeyField),
            "::",
            stringify!(Message)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspSyncKeyField>())).DeviceID as *const _ as usize
        },
        261usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspSyncKeyField),
            "::",
            stringify!(DeviceID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspSyncKeyField>())).BrokerIDByBank as *const _
                as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspSyncKeyField),
            "::",
            stringify!(BrokerIDByBank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspSyncKeyField>())).OperNo as *const _ as usize
        },
        297usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspSyncKeyField),
            "::",
            stringify!(OperNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspSyncKeyField>())).RequestID as *const _ as usize
        },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspSyncKeyField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcRspSyncKeyField>())).TID as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspSyncKeyField),
            "::",
            stringify!(TID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspSyncKeyField>())).ErrorID as *const _ as usize
        },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspSyncKeyField),
            "::",
            stringify!(ErrorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspSyncKeyField>())).ErrorMsg as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspSyncKeyField),
            "::",
            stringify!(ErrorMsg)
        )
    );
}
impl Default for CThostFtdcRspSyncKeyField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ�˻���Ϣ\u{368}\u{5aa}"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcNotifyQueryAccountField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "�ڻ���˾��ˮ��"]
    pub FutureSerial: TThostFtdcFutureSerialType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��\u{5a4}�ͻ�\u{5a4}�������־"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "�����ʺ�����"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���λ�ʺ�����"]
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "�ڻ���λ�ʺ�"]
    pub BankSecuAcc: TThostFtdcBankAccountType,
    #[doc = "���������־"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "�ڻ��ʽ�����˶Ա�־"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "���п��ý��"]
    pub BankUseAmount: TThostFtdcTradeAmountType,
    #[doc = "���п�ȡ���"]
    pub BankFetchAmount: TThostFtdcTradeAmountType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "���ͻ�����"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[test]
fn bindgen_test_layout_CThostFtdcNotifyQueryAccountField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcNotifyQueryAccountField>(),
        792usize,
        concat!("Size of: ", stringify!(CThostFtdcNotifyQueryAccountField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcNotifyQueryAccountField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcNotifyQueryAccountField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).TradeCode as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(TradeCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).BankID as *const _
                as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).BankBranchID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(BankBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).BrokerID as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).BrokerBranchID as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(BrokerBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).TradeDate as *const _
                as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(TradeDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).TradeTime as *const _
                as usize
        },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(TradeTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).BankSerial as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(BankSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).TradingDay as *const _
                as usize
        },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).PlateSerial as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(PlateSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).LastFragment as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(LastFragment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).SessionID as *const _
                as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).CustomerName as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(CustomerName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).IdCardType as *const _
                as usize
        },
        163usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(IdCardType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).IdentifiedCardNo
                as *const _ as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(IdentifiedCardNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).CustType as *const _
                as usize
        },
        215usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(CustType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).BankAccount as *const _
                as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(BankAccount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).BankPassWord as *const _
                as usize
        },
        257usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(BankPassWord)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).AccountID as *const _
                as usize
        },
        298usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).Password as *const _
                as usize
        },
        311usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(Password)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).FutureSerial as *const _
                as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(FutureSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).InstallID as *const _
                as usize
        },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).UserID as *const _
                as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).VerifyCertNoFlag
                as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(VerifyCertNoFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).CurrencyID as *const _
                as usize
        },
        377usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).Digest as *const _
                as usize
        },
        381usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(Digest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).BankAccType as *const _
                as usize
        },
        417usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(BankAccType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).DeviceID as *const _
                as usize
        },
        418usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(DeviceID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).BankSecuAccType
                as *const _ as usize
        },
        421usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(BankSecuAccType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).BrokerIDByBank as *const _
                as usize
        },
        422usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(BrokerIDByBank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).BankSecuAcc as *const _
                as usize
        },
        455usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(BankSecuAcc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).BankPwdFlag as *const _
                as usize
        },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(BankPwdFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).SecuPwdFlag as *const _
                as usize
        },
        497usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(SecuPwdFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).OperNo as *const _
                as usize
        },
        498usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(OperNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).RequestID as *const _
                as usize
        },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).TID as *const _ as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(TID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).BankUseAmount as *const _
                as usize
        },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(BankUseAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).BankFetchAmount
                as *const _ as usize
        },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(BankFetchAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).ErrorID as *const _
                as usize
        },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(ErrorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).ErrorMsg as *const _
                as usize
        },
        548usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(ErrorMsg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyQueryAccountField>())).LongCustomerName
                as *const _ as usize
        },
        629usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyQueryAccountField),
            "::",
            stringify!(LongCustomerName)
        )
    );
}
impl Default for CThostFtdcNotifyQueryAccountField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "����ת�˽�����ˮ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTransferSerialField {
    #[doc = "ƽ\u{328}��ˮ��"]
    pub PlateSerial: TThostFtdcPlateSerialType,
    #[doc = "���\u{5f7}�������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "��������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "���״���"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "���б���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "�����ʺ�����"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "�ڻ���˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "�ڻ���˾�ʺ�����"]
    pub FutureAccType: TThostFtdcFutureAccTypeType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "�ڻ���˾��ˮ��"]
    pub FutureSerial: TThostFtdcFutureSerialType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "���\u{5fd}��"]
    pub TradeAmount: TThostFtdcTradeAmountType,
    #[doc = "Ӧ�տͻ�����"]
    pub CustFee: TThostFtdcCustFeeType,
    #[doc = "Ӧ���ڻ���˾����"]
    pub BrokerFee: TThostFtdcFutureFeeType,
    #[doc = "��Ч��־"]
    pub AvailabilityFlag: TThostFtdcAvailabilityFlagType,
    #[doc = "����Ա"]
    pub OperatorCode: TThostFtdcOperatorCodeType,
    #[doc = "�������ʺ�"]
    pub BankNewAccount: TThostFtdcBankAccountType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
#[test]
fn bindgen_test_layout_CThostFtdcTransferSerialField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcTransferSerialField>(),
        416usize,
        concat!("Size of: ", stringify!(CThostFtdcTransferSerialField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcTransferSerialField>(),
        8usize,
        concat!("Alignment of ", stringify!(CThostFtdcTransferSerialField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferSerialField>())).PlateSerial as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferSerialField),
            "::",
            stringify!(PlateSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferSerialField>())).TradeDate as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferSerialField),
            "::",
            stringify!(TradeDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferSerialField>())).TradingDay as *const _
                as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferSerialField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferSerialField>())).TradeTime as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferSerialField),
            "::",
            stringify!(TradeTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferSerialField>())).TradeCode as *const _ as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferSerialField),
            "::",
            stringify!(TradeCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferSerialField>())).SessionID as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferSerialField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferSerialField>())).BankID as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferSerialField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferSerialField>())).BankBranchID as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferSerialField),
            "::",
            stringify!(BankBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferSerialField>())).BankAccType as *const _
                as usize
        },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferSerialField),
            "::",
            stringify!(BankAccType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferSerialField>())).BankAccount as *const _
                as usize
        },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferSerialField),
            "::",
            stringify!(BankAccount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferSerialField>())).BankSerial as *const _
                as usize
        },
        95usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferSerialField),
            "::",
            stringify!(BankSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferSerialField>())).BrokerID as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferSerialField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferSerialField>())).BrokerBranchID as *const _
                as usize
        },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferSerialField),
            "::",
            stringify!(BrokerBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferSerialField>())).FutureAccType as *const _
                as usize
        },
        150usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferSerialField),
            "::",
            stringify!(FutureAccType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferSerialField>())).AccountID as *const _ as usize
        },
        151usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferSerialField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferSerialField>())).InvestorID as *const _
                as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferSerialField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferSerialField>())).FutureSerial as *const _
                as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferSerialField),
            "::",
            stringify!(FutureSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferSerialField>())).IdCardType as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferSerialField),
            "::",
            stringify!(IdCardType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferSerialField>())).IdentifiedCardNo as *const _
                as usize
        },
        185usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferSerialField),
            "::",
            stringify!(IdentifiedCardNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferSerialField>())).CurrencyID as *const _
                as usize
        },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferSerialField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferSerialField>())).TradeAmount as *const _
                as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferSerialField),
            "::",
            stringify!(TradeAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferSerialField>())).CustFee as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferSerialField),
            "::",
            stringify!(CustFee)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferSerialField>())).BrokerFee as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferSerialField),
            "::",
            stringify!(BrokerFee)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferSerialField>())).AvailabilityFlag as *const _
                as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferSerialField),
            "::",
            stringify!(AvailabilityFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferSerialField>())).OperatorCode as *const _
                as usize
        },
        265usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferSerialField),
            "::",
            stringify!(OperatorCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferSerialField>())).BankNewAccount as *const _
                as usize
        },
        282usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferSerialField),
            "::",
            stringify!(BankNewAccount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferSerialField>())).ErrorID as *const _ as usize
        },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferSerialField),
            "::",
            stringify!(ErrorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTransferSerialField>())).ErrorMsg as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTransferSerialField),
            "::",
            stringify!(ErrorMsg)
        )
    );
}
impl Default for CThostFtdcTransferSerialField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�����ѯת����ˮ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryTransferSerialField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���б���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryTransferSerialField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryTransferSerialField>(),
        32usize,
        concat!("Size of: ", stringify!(CThostFtdcQryTransferSerialField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryTransferSerialField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryTransferSerialField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryTransferSerialField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTransferSerialField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryTransferSerialField>())).AccountID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTransferSerialField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryTransferSerialField>())).BankID as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTransferSerialField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryTransferSerialField>())).CurrencyID as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryTransferSerialField),
            "::",
            stringify!(CurrencyID)
        )
    );
}
#[doc = "����ǩ��\u{368}\u{5aa}"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcNotifyFutureSignInField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "PIN��Կ"]
    pub PinKey: TThostFtdcPasswordKeyType,
    #[doc = "MAC��Կ"]
    pub MacKey: TThostFtdcPasswordKeyType,
}
#[test]
fn bindgen_test_layout_CThostFtdcNotifyFutureSignInField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcNotifyFutureSignInField>(),
        580usize,
        concat!("Size of: ", stringify!(CThostFtdcNotifyFutureSignInField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcNotifyFutureSignInField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcNotifyFutureSignInField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignInField>())).TradeCode as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignInField),
            "::",
            stringify!(TradeCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignInField>())).BankID as *const _
                as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignInField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignInField>())).BankBranchID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignInField),
            "::",
            stringify!(BankBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignInField>())).BrokerID as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignInField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignInField>())).BrokerBranchID as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignInField),
            "::",
            stringify!(BrokerBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignInField>())).TradeDate as *const _
                as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignInField),
            "::",
            stringify!(TradeDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignInField>())).TradeTime as *const _
                as usize
        },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignInField),
            "::",
            stringify!(TradeTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignInField>())).BankSerial as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignInField),
            "::",
            stringify!(BankSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignInField>())).TradingDay as *const _
                as usize
        },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignInField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignInField>())).PlateSerial as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignInField),
            "::",
            stringify!(PlateSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignInField>())).LastFragment as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignInField),
            "::",
            stringify!(LastFragment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignInField>())).SessionID as *const _
                as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignInField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignInField>())).InstallID as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignInField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignInField>())).UserID as *const _
                as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignInField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignInField>())).Digest as *const _
                as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignInField),
            "::",
            stringify!(Digest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignInField>())).CurrencyID as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignInField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignInField>())).DeviceID as *const _
                as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignInField),
            "::",
            stringify!(DeviceID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignInField>())).BrokerIDByBank as *const _
                as usize
        },
        175usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignInField),
            "::",
            stringify!(BrokerIDByBank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignInField>())).OperNo as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignInField),
            "::",
            stringify!(OperNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignInField>())).RequestID as *const _
                as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignInField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignInField>())).TID as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignInField),
            "::",
            stringify!(TID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignInField>())).ErrorID as *const _
                as usize
        },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignInField),
            "::",
            stringify!(ErrorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignInField>())).ErrorMsg as *const _
                as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignInField),
            "::",
            stringify!(ErrorMsg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignInField>())).PinKey as *const _
                as usize
        },
        321usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignInField),
            "::",
            stringify!(PinKey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignInField>())).MacKey as *const _
                as usize
        },
        450usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignInField),
            "::",
            stringify!(MacKey)
        )
    );
}
impl Default for CThostFtdcNotifyFutureSignInField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "����ǩ��\u{368}\u{5aa}"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcNotifyFutureSignOutField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
#[test]
fn bindgen_test_layout_CThostFtdcNotifyFutureSignOutField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcNotifyFutureSignOutField>(),
        324usize,
        concat!("Size of: ", stringify!(CThostFtdcNotifyFutureSignOutField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcNotifyFutureSignOutField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcNotifyFutureSignOutField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignOutField>())).TradeCode as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignOutField),
            "::",
            stringify!(TradeCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignOutField>())).BankID as *const _
                as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignOutField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignOutField>())).BankBranchID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignOutField),
            "::",
            stringify!(BankBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignOutField>())).BrokerID as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignOutField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignOutField>())).BrokerBranchID
                as *const _ as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignOutField),
            "::",
            stringify!(BrokerBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignOutField>())).TradeDate as *const _
                as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignOutField),
            "::",
            stringify!(TradeDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignOutField>())).TradeTime as *const _
                as usize
        },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignOutField),
            "::",
            stringify!(TradeTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignOutField>())).BankSerial as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignOutField),
            "::",
            stringify!(BankSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignOutField>())).TradingDay as *const _
                as usize
        },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignOutField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignOutField>())).PlateSerial as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignOutField),
            "::",
            stringify!(PlateSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignOutField>())).LastFragment as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignOutField),
            "::",
            stringify!(LastFragment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignOutField>())).SessionID as *const _
                as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignOutField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignOutField>())).InstallID as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignOutField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignOutField>())).UserID as *const _
                as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignOutField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignOutField>())).Digest as *const _
                as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignOutField),
            "::",
            stringify!(Digest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignOutField>())).CurrencyID as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignOutField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignOutField>())).DeviceID as *const _
                as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignOutField),
            "::",
            stringify!(DeviceID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignOutField>())).BrokerIDByBank
                as *const _ as usize
        },
        175usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignOutField),
            "::",
            stringify!(BrokerIDByBank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignOutField>())).OperNo as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignOutField),
            "::",
            stringify!(OperNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignOutField>())).RequestID as *const _
                as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignOutField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignOutField>())).TID as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignOutField),
            "::",
            stringify!(TID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignOutField>())).ErrorID as *const _
                as usize
        },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignOutField),
            "::",
            stringify!(ErrorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifyFutureSignOutField>())).ErrorMsg as *const _
                as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifyFutureSignOutField),
            "::",
            stringify!(ErrorMsg)
        )
    );
}
impl Default for CThostFtdcNotifyFutureSignOutField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���\u{5fa}��������ڱ��\u{337}�����Կ\u{36c}�����������\u{368}\u{5aa}"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcNotifySyncKeyField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "���\u{5fa}��ĸ����ڱ��\u{335}���Ϣ"]
    pub Message: TThostFtdcAddInfoType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
#[test]
fn bindgen_test_layout_CThostFtdcNotifySyncKeyField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcNotifySyncKeyField>(),
        412usize,
        concat!("Size of: ", stringify!(CThostFtdcNotifySyncKeyField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcNotifySyncKeyField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcNotifySyncKeyField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifySyncKeyField>())).TradeCode as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifySyncKeyField),
            "::",
            stringify!(TradeCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifySyncKeyField>())).BankID as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifySyncKeyField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifySyncKeyField>())).BankBranchID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifySyncKeyField),
            "::",
            stringify!(BankBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifySyncKeyField>())).BrokerID as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifySyncKeyField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifySyncKeyField>())).BrokerBranchID as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifySyncKeyField),
            "::",
            stringify!(BrokerBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifySyncKeyField>())).TradeDate as *const _ as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifySyncKeyField),
            "::",
            stringify!(TradeDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifySyncKeyField>())).TradeTime as *const _ as usize
        },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifySyncKeyField),
            "::",
            stringify!(TradeTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifySyncKeyField>())).BankSerial as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifySyncKeyField),
            "::",
            stringify!(BankSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifySyncKeyField>())).TradingDay as *const _ as usize
        },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifySyncKeyField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifySyncKeyField>())).PlateSerial as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifySyncKeyField),
            "::",
            stringify!(PlateSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifySyncKeyField>())).LastFragment as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifySyncKeyField),
            "::",
            stringify!(LastFragment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifySyncKeyField>())).SessionID as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifySyncKeyField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifySyncKeyField>())).InstallID as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifySyncKeyField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifySyncKeyField>())).UserID as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifySyncKeyField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifySyncKeyField>())).Message as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifySyncKeyField),
            "::",
            stringify!(Message)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifySyncKeyField>())).DeviceID as *const _ as usize
        },
        261usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifySyncKeyField),
            "::",
            stringify!(DeviceID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifySyncKeyField>())).BrokerIDByBank as *const _
                as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifySyncKeyField),
            "::",
            stringify!(BrokerIDByBank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifySyncKeyField>())).OperNo as *const _ as usize
        },
        297usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifySyncKeyField),
            "::",
            stringify!(OperNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifySyncKeyField>())).RequestID as *const _ as usize
        },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifySyncKeyField),
            "::",
            stringify!(RequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifySyncKeyField>())).TID as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifySyncKeyField),
            "::",
            stringify!(TID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifySyncKeyField>())).ErrorID as *const _ as usize
        },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifySyncKeyField),
            "::",
            stringify!(ErrorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcNotifySyncKeyField>())).ErrorMsg as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcNotifySyncKeyField),
            "::",
            stringify!(ErrorMsg)
        )
    );
}
impl Default for CThostFtdcNotifySyncKeyField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�����ѯ����ǩԼ��ϵ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryAccountregisterField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���б���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryAccountregisterField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryAccountregisterField>(),
        37usize,
        concat!("Size of: ", stringify!(CThostFtdcQryAccountregisterField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryAccountregisterField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryAccountregisterField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryAccountregisterField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryAccountregisterField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryAccountregisterField>())).AccountID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryAccountregisterField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryAccountregisterField>())).BankID as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryAccountregisterField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryAccountregisterField>())).BankBranchID as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryAccountregisterField),
            "::",
            stringify!(BankBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryAccountregisterField>())).CurrencyID as *const _
                as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryAccountregisterField),
            "::",
            stringify!(CurrencyID)
        )
    );
}
#[doc = "�ͻ���������Ϣ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcAccountregisterField {
    #[doc = "��������"]
    pub TradeDay: TThostFtdcTradeDateType,
    #[doc = "���б���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "�ڻ���˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�ڻ���˾��\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "���������"]
    pub OpenOrDestroy: TThostFtdcOpenOrDestroyType,
    #[doc = "ǩԼ����"]
    pub RegDate: TThostFtdcTradeDateType,
    #[doc = "��Լ����"]
    pub OutDate: TThostFtdcTradeDateType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "�����ʺ�����"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "���ͻ�����"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[test]
fn bindgen_test_layout_CThostFtdcAccountregisterField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcAccountregisterField>(),
        408usize,
        concat!("Size of: ", stringify!(CThostFtdcAccountregisterField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcAccountregisterField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcAccountregisterField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAccountregisterField>())).TradeDay as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAccountregisterField),
            "::",
            stringify!(TradeDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAccountregisterField>())).BankID as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAccountregisterField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAccountregisterField>())).BankBranchID as *const _
                as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAccountregisterField),
            "::",
            stringify!(BankBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAccountregisterField>())).BankAccount as *const _
                as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAccountregisterField),
            "::",
            stringify!(BankAccount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAccountregisterField>())).BrokerID as *const _ as usize
        },
        59usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAccountregisterField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAccountregisterField>())).BrokerBranchID as *const _
                as usize
        },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAccountregisterField),
            "::",
            stringify!(BrokerBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAccountregisterField>())).AccountID as *const _
                as usize
        },
        101usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAccountregisterField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAccountregisterField>())).IdCardType as *const _
                as usize
        },
        114usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAccountregisterField),
            "::",
            stringify!(IdCardType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAccountregisterField>())).IdentifiedCardNo as *const _
                as usize
        },
        115usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAccountregisterField),
            "::",
            stringify!(IdentifiedCardNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAccountregisterField>())).CustomerName as *const _
                as usize
        },
        166usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAccountregisterField),
            "::",
            stringify!(CustomerName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAccountregisterField>())).CurrencyID as *const _
                as usize
        },
        217usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAccountregisterField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAccountregisterField>())).OpenOrDestroy as *const _
                as usize
        },
        221usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAccountregisterField),
            "::",
            stringify!(OpenOrDestroy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAccountregisterField>())).RegDate as *const _ as usize
        },
        222usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAccountregisterField),
            "::",
            stringify!(RegDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAccountregisterField>())).OutDate as *const _ as usize
        },
        231usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAccountregisterField),
            "::",
            stringify!(OutDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAccountregisterField>())).TID as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAccountregisterField),
            "::",
            stringify!(TID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAccountregisterField>())).CustType as *const _ as usize
        },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAccountregisterField),
            "::",
            stringify!(CustType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAccountregisterField>())).BankAccType as *const _
                as usize
        },
        245usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAccountregisterField),
            "::",
            stringify!(BankAccType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAccountregisterField>())).LongCustomerName as *const _
                as usize
        },
        246usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAccountregisterField),
            "::",
            stringify!(LongCustomerName)
        )
    );
}
impl Default for CThostFtdcAccountregisterField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���ڿ�����Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOpenAccountField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�Ա�"]
    pub Gender: TThostFtdcGenderType,
    #[doc = "���Ҵ���"]
    pub CountryCode: TThostFtdcCountryCodeType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "��\u{5b7}"]
    pub Address: TThostFtdcAddressType,
    #[doc = "�ʱ�"]
    pub ZipCode: TThostFtdcZipCodeType,
    #[doc = "�绰����"]
    pub Telephone: TThostFtdcTelephoneType,
    #[doc = "�\u{5bb}�"]
    pub MobilePhone: TThostFtdcMobilePhoneType,
    #[doc = "����"]
    pub Fax: TThostFtdcFaxType,
    #[doc = "�����ʼ�"]
    pub EMail: TThostFtdcEMailType,
    #[doc = "�ʽ��˻�״\u{32c}"]
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "��\u{5a4}�ͻ�\u{5a4}�������־"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "�㳮��־"]
    pub CashExchangeCode: TThostFtdcCashExchangeCodeType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "�����ʺ�����"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���λ�ʺ�����"]
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "�ڻ���λ�ʺ�"]
    pub BankSecuAcc: TThostFtdcBankAccountType,
    #[doc = "���������־"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "�ڻ��ʽ�����˶Ա�־"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "���ͻ�����"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[test]
fn bindgen_test_layout_CThostFtdcOpenAccountField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcOpenAccountField>(),
        1040usize,
        concat!("Size of: ", stringify!(CThostFtdcOpenAccountField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcOpenAccountField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcOpenAccountField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).TradeCode as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(TradeCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).BankID as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).BankBranchID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(BankBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).BrokerID as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).BrokerBranchID as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(BrokerBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).TradeDate as *const _ as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(TradeDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).TradeTime as *const _ as usize
        },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(TradeTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).BankSerial as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(BankSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).TradingDay as *const _ as usize
        },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).PlateSerial as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(PlateSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).LastFragment as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(LastFragment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).SessionID as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).CustomerName as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(CustomerName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).IdCardType as *const _ as usize
        },
        163usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(IdCardType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).IdentifiedCardNo as *const _
                as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(IdentifiedCardNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).Gender as *const _ as usize
        },
        215usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(Gender)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).CountryCode as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(CountryCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).CustType as *const _ as usize
        },
        237usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(CustType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).Address as *const _ as usize
        },
        238usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(Address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).ZipCode as *const _ as usize
        },
        339usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(ZipCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).Telephone as *const _ as usize
        },
        346usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(Telephone)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).MobilePhone as *const _ as usize
        },
        387usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(MobilePhone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).Fax as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(Fax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).EMail as *const _ as usize
        },
        449usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(EMail)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).MoneyAccountStatus as *const _
                as usize
        },
        490usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(MoneyAccountStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).BankAccount as *const _ as usize
        },
        491usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(BankAccount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).BankPassWord as *const _ as usize
        },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(BankPassWord)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).AccountID as *const _ as usize
        },
        573usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).Password as *const _ as usize
        },
        586usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(Password)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).InstallID as *const _ as usize
        },
        628usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).VerifyCertNoFlag as *const _
                as usize
        },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(VerifyCertNoFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).CurrencyID as *const _ as usize
        },
        633usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).CashExchangeCode as *const _
                as usize
        },
        637usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(CashExchangeCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).Digest as *const _ as usize
        },
        638usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(Digest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).BankAccType as *const _ as usize
        },
        674usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(BankAccType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).DeviceID as *const _ as usize
        },
        675usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(DeviceID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).BankSecuAccType as *const _
                as usize
        },
        678usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(BankSecuAccType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).BrokerIDByBank as *const _
                as usize
        },
        679usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(BrokerIDByBank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).BankSecuAcc as *const _ as usize
        },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(BankSecuAcc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).BankPwdFlag as *const _ as usize
        },
        753usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(BankPwdFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).SecuPwdFlag as *const _ as usize
        },
        754usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(SecuPwdFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).OperNo as *const _ as usize
        },
        755usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(OperNo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).TID as *const _ as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(TID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).UserID as *const _ as usize
        },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).ErrorID as *const _ as usize
        },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(ErrorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).ErrorMsg as *const _ as usize
        },
        796usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(ErrorMsg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcOpenAccountField>())).LongCustomerName as *const _
                as usize
        },
        877usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcOpenAccountField),
            "::",
            stringify!(LongCustomerName)
        )
    );
}
impl Default for CThostFtdcOpenAccountField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "����������Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcCancelAccountField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�Ա�"]
    pub Gender: TThostFtdcGenderType,
    #[doc = "���Ҵ���"]
    pub CountryCode: TThostFtdcCountryCodeType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "��\u{5b7}"]
    pub Address: TThostFtdcAddressType,
    #[doc = "�ʱ�"]
    pub ZipCode: TThostFtdcZipCodeType,
    #[doc = "�绰����"]
    pub Telephone: TThostFtdcTelephoneType,
    #[doc = "�\u{5bb}�"]
    pub MobilePhone: TThostFtdcMobilePhoneType,
    #[doc = "����"]
    pub Fax: TThostFtdcFaxType,
    #[doc = "�����ʼ�"]
    pub EMail: TThostFtdcEMailType,
    #[doc = "�ʽ��˻�״\u{32c}"]
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "��\u{5a4}�ͻ�\u{5a4}�������־"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "�㳮��־"]
    pub CashExchangeCode: TThostFtdcCashExchangeCodeType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "�����ʺ�����"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���λ�ʺ�����"]
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "�ڻ���λ�ʺ�"]
    pub BankSecuAcc: TThostFtdcBankAccountType,
    #[doc = "���������־"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "�ڻ��ʽ�����˶Ա�־"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "���ͻ�����"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[test]
fn bindgen_test_layout_CThostFtdcCancelAccountField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcCancelAccountField>(),
        1040usize,
        concat!("Size of: ", stringify!(CThostFtdcCancelAccountField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcCancelAccountField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcCancelAccountField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).TradeCode as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(TradeCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).BankID as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).BankBranchID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(BankBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).BrokerID as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).BrokerBranchID as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(BrokerBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).TradeDate as *const _ as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(TradeDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).TradeTime as *const _ as usize
        },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(TradeTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).BankSerial as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(BankSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).TradingDay as *const _ as usize
        },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).PlateSerial as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(PlateSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).LastFragment as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(LastFragment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).SessionID as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).CustomerName as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(CustomerName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).IdCardType as *const _ as usize
        },
        163usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(IdCardType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).IdentifiedCardNo as *const _
                as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(IdentifiedCardNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).Gender as *const _ as usize
        },
        215usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(Gender)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).CountryCode as *const _
                as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(CountryCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).CustType as *const _ as usize
        },
        237usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(CustType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).Address as *const _ as usize
        },
        238usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(Address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).ZipCode as *const _ as usize
        },
        339usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(ZipCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).Telephone as *const _ as usize
        },
        346usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(Telephone)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).MobilePhone as *const _
                as usize
        },
        387usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(MobilePhone)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).Fax as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(Fax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).EMail as *const _ as usize
        },
        449usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(EMail)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).MoneyAccountStatus as *const _
                as usize
        },
        490usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(MoneyAccountStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).BankAccount as *const _
                as usize
        },
        491usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(BankAccount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).BankPassWord as *const _
                as usize
        },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(BankPassWord)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).AccountID as *const _ as usize
        },
        573usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).Password as *const _ as usize
        },
        586usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(Password)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).InstallID as *const _ as usize
        },
        628usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).VerifyCertNoFlag as *const _
                as usize
        },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(VerifyCertNoFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).CurrencyID as *const _ as usize
        },
        633usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).CashExchangeCode as *const _
                as usize
        },
        637usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(CashExchangeCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).Digest as *const _ as usize
        },
        638usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(Digest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).BankAccType as *const _
                as usize
        },
        674usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(BankAccType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).DeviceID as *const _ as usize
        },
        675usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(DeviceID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).BankSecuAccType as *const _
                as usize
        },
        678usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(BankSecuAccType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).BrokerIDByBank as *const _
                as usize
        },
        679usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(BrokerIDByBank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).BankSecuAcc as *const _
                as usize
        },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(BankSecuAcc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).BankPwdFlag as *const _
                as usize
        },
        753usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(BankPwdFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).SecuPwdFlag as *const _
                as usize
        },
        754usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(SecuPwdFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).OperNo as *const _ as usize
        },
        755usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(OperNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).TID as *const _ as usize
        },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(TID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).UserID as *const _ as usize
        },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).ErrorID as *const _ as usize
        },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(ErrorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).ErrorMsg as *const _ as usize
        },
        796usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(ErrorMsg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCancelAccountField>())).LongCustomerName as *const _
                as usize
        },
        877usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCancelAccountField),
            "::",
            stringify!(LongCustomerName)
        )
    );
}
impl Default for CThostFtdcCancelAccountField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���ڱ�������˺���Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcChangeAccountField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�Ա�"]
    pub Gender: TThostFtdcGenderType,
    #[doc = "���Ҵ���"]
    pub CountryCode: TThostFtdcCountryCodeType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "��\u{5b7}"]
    pub Address: TThostFtdcAddressType,
    #[doc = "�ʱ�"]
    pub ZipCode: TThostFtdcZipCodeType,
    #[doc = "�绰����"]
    pub Telephone: TThostFtdcTelephoneType,
    #[doc = "�\u{5bb}�"]
    pub MobilePhone: TThostFtdcMobilePhoneType,
    #[doc = "����"]
    pub Fax: TThostFtdcFaxType,
    #[doc = "�����ʼ�"]
    pub EMail: TThostFtdcEMailType,
    #[doc = "�ʽ��˻�״\u{32c}"]
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "�������ʺ�"]
    pub NewBankAccount: TThostFtdcBankAccountType,
    #[doc = "����������"]
    pub NewBankPassWord: TThostFtdcPasswordType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "�����ʺ�����"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "��\u{5a4}�ͻ�\u{5a4}�������־"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "���������־"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "�ڻ��ʽ�����˶Ա�־"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "���ͻ�����"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[test]
fn bindgen_test_layout_CThostFtdcChangeAccountField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcChangeAccountField>(),
        1044usize,
        concat!("Size of: ", stringify!(CThostFtdcChangeAccountField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcChangeAccountField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcChangeAccountField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).TradeCode as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(TradeCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).BankID as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).BankBranchID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(BankBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).BrokerID as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).BrokerBranchID as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(BrokerBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).TradeDate as *const _ as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(TradeDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).TradeTime as *const _ as usize
        },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(TradeTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).BankSerial as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(BankSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).TradingDay as *const _ as usize
        },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).PlateSerial as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(PlateSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).LastFragment as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(LastFragment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).SessionID as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).CustomerName as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(CustomerName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).IdCardType as *const _ as usize
        },
        163usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(IdCardType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).IdentifiedCardNo as *const _
                as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(IdentifiedCardNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).Gender as *const _ as usize
        },
        215usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(Gender)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).CountryCode as *const _
                as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(CountryCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).CustType as *const _ as usize
        },
        237usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(CustType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).Address as *const _ as usize
        },
        238usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(Address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).ZipCode as *const _ as usize
        },
        339usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(ZipCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).Telephone as *const _ as usize
        },
        346usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(Telephone)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).MobilePhone as *const _
                as usize
        },
        387usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(MobilePhone)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).Fax as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(Fax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).EMail as *const _ as usize
        },
        449usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(EMail)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).MoneyAccountStatus as *const _
                as usize
        },
        490usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(MoneyAccountStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).BankAccount as *const _
                as usize
        },
        491usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(BankAccount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).BankPassWord as *const _
                as usize
        },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(BankPassWord)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).NewBankAccount as *const _
                as usize
        },
        573usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(NewBankAccount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).NewBankPassWord as *const _
                as usize
        },
        614usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(NewBankPassWord)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).AccountID as *const _ as usize
        },
        655usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).Password as *const _ as usize
        },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(Password)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).BankAccType as *const _
                as usize
        },
        709usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(BankAccType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).InstallID as *const _ as usize
        },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).VerifyCertNoFlag as *const _
                as usize
        },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(VerifyCertNoFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).CurrencyID as *const _ as usize
        },
        717usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).BrokerIDByBank as *const _
                as usize
        },
        721usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(BrokerIDByBank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).BankPwdFlag as *const _
                as usize
        },
        754usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(BankPwdFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).SecuPwdFlag as *const _
                as usize
        },
        755usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(SecuPwdFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).TID as *const _ as usize
        },
        756usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(TID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).Digest as *const _ as usize
        },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(Digest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).ErrorID as *const _ as usize
        },
        796usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(ErrorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).ErrorMsg as *const _ as usize
        },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(ErrorMsg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcChangeAccountField>())).LongCustomerName as *const _
                as usize
        },
        881usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcChangeAccountField),
            "::",
            stringify!(LongCustomerName)
        )
    );
}
impl Default for CThostFtdcChangeAccountField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "������������Ա����Ȩ��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcSecAgentACIDMapField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�ʽ��˻�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "����"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "�����н�����ʽ��ʺ�"]
    pub BrokerSecAgentID: TThostFtdcAccountIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSecAgentACIDMapField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSecAgentACIDMapField>(),
        57usize,
        concat!("Size of: ", stringify!(CThostFtdcSecAgentACIDMapField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSecAgentACIDMapField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcSecAgentACIDMapField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSecAgentACIDMapField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSecAgentACIDMapField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSecAgentACIDMapField>())).UserID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSecAgentACIDMapField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSecAgentACIDMapField>())).AccountID as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSecAgentACIDMapField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSecAgentACIDMapField>())).CurrencyID as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSecAgentACIDMapField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSecAgentACIDMapField>())).BrokerSecAgentID as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSecAgentACIDMapField),
            "::",
            stringify!(BrokerSecAgentID)
        )
    );
}
#[doc = "������������Ա����Ȩ�\u{7b2}�ѯ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQrySecAgentACIDMapField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�ʽ��˻�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "����"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQrySecAgentACIDMapField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQrySecAgentACIDMapField>(),
        44usize,
        concat!("Size of: ", stringify!(CThostFtdcQrySecAgentACIDMapField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQrySecAgentACIDMapField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQrySecAgentACIDMapField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQrySecAgentACIDMapField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQrySecAgentACIDMapField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQrySecAgentACIDMapField>())).UserID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQrySecAgentACIDMapField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQrySecAgentACIDMapField>())).AccountID as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQrySecAgentACIDMapField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQrySecAgentACIDMapField>())).CurrencyID as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQrySecAgentACIDMapField),
            "::",
            stringify!(CurrencyID)
        )
    );
}
#[doc = "�\u{5b1}����Ľ���Ȩ��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcUserRightsAssignField {
    #[doc = "Ӧ�õ�Ԫ����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�������Ĵ���"]
    pub DRIdentityID: TThostFtdcDRIdentityIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcUserRightsAssignField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcUserRightsAssignField>(),
        32usize,
        concat!("Size of: ", stringify!(CThostFtdcUserRightsAssignField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcUserRightsAssignField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcUserRightsAssignField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserRightsAssignField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserRightsAssignField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserRightsAssignField>())).UserID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserRightsAssignField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserRightsAssignField>())).DRIdentityID as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserRightsAssignField),
            "::",
            stringify!(DRIdentityID)
        )
    );
}
#[doc = "���ù�˾�Ƿ����ڱ���ʾ�Ľ���Ȩ��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcBrokerUserRightAssignField {
    #[doc = "Ӧ�õ�Ԫ����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�������Ĵ���"]
    pub DRIdentityID: TThostFtdcDRIdentityIDType,
    #[doc = "�\u{737}���"]
    pub Tradeable: TThostFtdcBoolType,
}
#[test]
fn bindgen_test_layout_CThostFtdcBrokerUserRightAssignField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcBrokerUserRightAssignField>(),
        20usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcBrokerUserRightAssignField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcBrokerUserRightAssignField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcBrokerUserRightAssignField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserRightAssignField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserRightAssignField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserRightAssignField>())).DRIdentityID
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserRightAssignField),
            "::",
            stringify!(DRIdentityID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcBrokerUserRightAssignField>())).Tradeable as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcBrokerUserRightAssignField),
            "::",
            stringify!(Tradeable)
        )
    );
}
#[doc = "�\u{5b1}�����ת������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcDRTransferField {
    #[doc = "ԭ�������Ĵ���"]
    pub OrigDRIdentityID: TThostFtdcDRIdentityIDType,
    #[doc = "Ŀ�꽻�����Ĵ���"]
    pub DestDRIdentityID: TThostFtdcDRIdentityIDType,
    #[doc = "ԭӦ�õ�Ԫ����"]
    pub OrigBrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ŀ�����õ�Ԫ����"]
    pub DestBrokerID: TThostFtdcBrokerIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcDRTransferField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcDRTransferField>(),
        32usize,
        concat!("Size of: ", stringify!(CThostFtdcDRTransferField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcDRTransferField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcDRTransferField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDRTransferField>())).OrigDRIdentityID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDRTransferField),
            "::",
            stringify!(OrigDRIdentityID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDRTransferField>())).DestDRIdentityID as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDRTransferField),
            "::",
            stringify!(DestDRIdentityID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDRTransferField>())).OrigBrokerID as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDRTransferField),
            "::",
            stringify!(OrigBrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDRTransferField>())).DestBrokerID as *const _ as usize
        },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDRTransferField),
            "::",
            stringify!(DestBrokerID)
        )
    );
}
#[doc = "Fens�û���Ϣ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcFensUserInfoField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��¼ģʽ"]
    pub LoginMode: TThostFtdcLoginModeType,
}
#[test]
fn bindgen_test_layout_CThostFtdcFensUserInfoField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcFensUserInfoField>(),
        28usize,
        concat!("Size of: ", stringify!(CThostFtdcFensUserInfoField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcFensUserInfoField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcFensUserInfoField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFensUserInfoField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFensUserInfoField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFensUserInfoField>())).UserID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFensUserInfoField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcFensUserInfoField>())).LoginMode as *const _ as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcFensUserInfoField),
            "::",
            stringify!(LoginMode)
        )
    );
}
#[doc = "��ǰ����������������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcCurrTransferIdentityField {
    #[doc = "�������Ĵ���"]
    pub IdentityID: TThostFtdcDRIdentityIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcCurrTransferIdentityField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcCurrTransferIdentityField>(),
        4usize,
        concat!("Size of: ", stringify!(CThostFtdcCurrTransferIdentityField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcCurrTransferIdentityField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcCurrTransferIdentityField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCurrTransferIdentityField>())).IdentityID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCurrTransferIdentityField),
            "::",
            stringify!(IdentityID)
        )
    );
}
#[doc = "��\u{5b9}��¼�û�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcLoginForbiddenUserField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcLoginForbiddenUserField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcLoginForbiddenUserField>(),
        76usize,
        concat!("Size of: ", stringify!(CThostFtdcLoginForbiddenUserField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcLoginForbiddenUserField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcLoginForbiddenUserField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLoginForbiddenUserField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLoginForbiddenUserField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLoginForbiddenUserField>())).UserID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLoginForbiddenUserField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLoginForbiddenUserField>())).reserve1 as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLoginForbiddenUserField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcLoginForbiddenUserField>())).IPAddress as *const _
                as usize
        },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcLoginForbiddenUserField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcLoginForbiddenUserField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ��\u{5b9}��¼�û�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryLoginForbiddenUserField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryLoginForbiddenUserField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryLoginForbiddenUserField>(),
        27usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcQryLoginForbiddenUserField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryLoginForbiddenUserField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryLoginForbiddenUserField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryLoginForbiddenUserField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryLoginForbiddenUserField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryLoginForbiddenUserField>())).UserID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryLoginForbiddenUserField),
            "::",
            stringify!(UserID)
        )
    );
}
#[doc = "�ʽ��˻�����\u{5fc}����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcTradingAccountReserveField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "����\u{5fc}����"]
    pub Reserve: TThostFtdcMoneyType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcTradingAccountReserveField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcTradingAccountReserveField>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcTradingAccountReserveField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcTradingAccountReserveField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcTradingAccountReserveField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountReserveField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountReserveField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountReserveField>())).AccountID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountReserveField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountReserveField>())).Reserve as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountReserveField),
            "::",
            stringify!(Reserve)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcTradingAccountReserveField>())).CurrencyID as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcTradingAccountReserveField),
            "::",
            stringify!(CurrencyID)
        )
    );
}
#[doc = "��ѯ��\u{5b9}��¼IP"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryLoginForbiddenIPField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryLoginForbiddenIPField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryLoginForbiddenIPField>(),
        49usize,
        concat!("Size of: ", stringify!(CThostFtdcQryLoginForbiddenIPField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryLoginForbiddenIPField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryLoginForbiddenIPField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryLoginForbiddenIPField>())).reserve1 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryLoginForbiddenIPField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryLoginForbiddenIPField>())).IPAddress as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryLoginForbiddenIPField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcQryLoginForbiddenIPField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯIP�б�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryIPListField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryIPListField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryIPListField>(),
        49usize,
        concat!("Size of: ", stringify!(CThostFtdcQryIPListField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryIPListField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcQryIPListField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryIPListField>())).reserve1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryIPListField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryIPListField>())).IPAddress as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryIPListField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcQryIPListField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ�û��µ�Ȩ�\u{7b7}����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryUserRightsAssignField {
    #[doc = "Ӧ�õ�Ԫ����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryUserRightsAssignField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryUserRightsAssignField>(),
        27usize,
        concat!("Size of: ", stringify!(CThostFtdcQryUserRightsAssignField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryUserRightsAssignField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryUserRightsAssignField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryUserRightsAssignField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryUserRightsAssignField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryUserRightsAssignField>())).UserID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryUserRightsAssignField),
            "::",
            stringify!(UserID)
        )
    );
}
#[doc = "����ԤԼ����ȷ������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReserveOpenAccountConfirmField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcLongIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�Ա�"]
    pub Gender: TThostFtdcGenderType,
    #[doc = "���Ҵ���"]
    pub CountryCode: TThostFtdcCountryCodeType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "��\u{5b7}"]
    pub Address: TThostFtdcAddressType,
    #[doc = "�ʱ�"]
    pub ZipCode: TThostFtdcZipCodeType,
    #[doc = "�绰����"]
    pub Telephone: TThostFtdcTelephoneType,
    #[doc = "�\u{5bb}�"]
    pub MobilePhone: TThostFtdcMobilePhoneType,
    #[doc = "����"]
    pub Fax: TThostFtdcFaxType,
    #[doc = "�����ʼ�"]
    pub EMail: TThostFtdcEMailType,
    #[doc = "�ʽ��˻�״\u{32c}"]
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "��\u{5a4}�ͻ�\u{5a4}�������־"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "�����ʺ�����"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "ԤԼ����������ˮ��"]
    pub BankReserveOpenSeq: TThostFtdcBankSerialType,
    #[doc = "ԤԼ��������"]
    pub BookDate: TThostFtdcTradeDateType,
    #[doc = "ԤԼ������\u{5a4}����"]
    pub BookPsw: TThostFtdcPasswordType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
#[test]
fn bindgen_test_layout_CThostFtdcReserveOpenAccountConfirmField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcReserveOpenAccountConfirmField>(),
        976usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcReserveOpenAccountConfirmField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).TradeCode
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(TradeCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).BankID as *const _
                as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).BankBranchID
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(BankBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).BrokerID
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).BrokerBranchID
                as *const _ as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(BrokerBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).TradeDate
                as *const _ as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(TradeDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).TradeTime
                as *const _ as usize
        },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(TradeTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).BankSerial
                as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(BankSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).TradingDay
                as *const _ as usize
        },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).PlateSerial
                as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(PlateSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).LastFragment
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(LastFragment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).SessionID
                as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).CustomerName
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(CustomerName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).IdCardType
                as *const _ as usize
        },
        273usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(IdCardType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).IdentifiedCardNo
                as *const _ as usize
        },
        274usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(IdentifiedCardNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).Gender as *const _
                as usize
        },
        325usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(Gender)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).CountryCode
                as *const _ as usize
        },
        326usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(CountryCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).CustType
                as *const _ as usize
        },
        347usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(CustType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).Address as *const _
                as usize
        },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(Address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).ZipCode as *const _
                as usize
        },
        449usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(ZipCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).Telephone
                as *const _ as usize
        },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(Telephone)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).MobilePhone
                as *const _ as usize
        },
        497usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(MobilePhone)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).Fax as *const _
                as usize
        },
        518usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(Fax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).EMail as *const _
                as usize
        },
        559usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(EMail)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).MoneyAccountStatus
                as *const _ as usize
        },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(MoneyAccountStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).BankAccount
                as *const _ as usize
        },
        601usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(BankAccount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).BankPassWord
                as *const _ as usize
        },
        642usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(BankPassWord)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).InstallID
                as *const _ as usize
        },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).VerifyCertNoFlag
                as *const _ as usize
        },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(VerifyCertNoFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).CurrencyID
                as *const _ as usize
        },
        689usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).Digest as *const _
                as usize
        },
        693usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(Digest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).BankAccType
                as *const _ as usize
        },
        729usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(BankAccType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).BrokerIDByBank
                as *const _ as usize
        },
        730usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(BrokerIDByBank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).TID as *const _
                as usize
        },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(TID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).AccountID
                as *const _ as usize
        },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).Password
                as *const _ as usize
        },
        781usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(Password)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).BankReserveOpenSeq
                as *const _ as usize
        },
        822usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(BankReserveOpenSeq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).BookDate
                as *const _ as usize
        },
        835usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(BookDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).BookPsw as *const _
                as usize
        },
        844usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(BookPsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).ErrorID as *const _
                as usize
        },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(ErrorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountConfirmField>())).ErrorMsg
                as *const _ as usize
        },
        892usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountConfirmField),
            "::",
            stringify!(ErrorMsg)
        )
    );
}
impl Default for CThostFtdcReserveOpenAccountConfirmField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "����ԤԼ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReserveOpenAccountField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcLongIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�Ա�"]
    pub Gender: TThostFtdcGenderType,
    #[doc = "���Ҵ���"]
    pub CountryCode: TThostFtdcCountryCodeType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "��\u{5b7}"]
    pub Address: TThostFtdcAddressType,
    #[doc = "�ʱ�"]
    pub ZipCode: TThostFtdcZipCodeType,
    #[doc = "�绰����"]
    pub Telephone: TThostFtdcTelephoneType,
    #[doc = "�\u{5bb}�"]
    pub MobilePhone: TThostFtdcMobilePhoneType,
    #[doc = "����"]
    pub Fax: TThostFtdcFaxType,
    #[doc = "�����ʼ�"]
    pub EMail: TThostFtdcEMailType,
    #[doc = "�ʽ��˻�״\u{32c}"]
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "��\u{5a4}�ͻ�\u{5a4}�������־"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "�����ʺ�����"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "ԤԼ����״\u{32c}"]
    pub ReserveOpenAccStas: TThostFtdcReserveOpenAccStasType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
#[test]
fn bindgen_test_layout_CThostFtdcReserveOpenAccountField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcReserveOpenAccountField>(),
        860usize,
        concat!("Size of: ", stringify!(CThostFtdcReserveOpenAccountField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcReserveOpenAccountField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcReserveOpenAccountField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).TradeCode as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(TradeCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).BankID as *const _
                as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).BankBranchID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(BankBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).BrokerID as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).BrokerBranchID as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(BrokerBranchID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).TradeDate as *const _
                as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(TradeDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).TradeTime as *const _
                as usize
        },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(TradeTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).BankSerial as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(BankSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).TradingDay as *const _
                as usize
        },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).PlateSerial as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(PlateSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).LastFragment as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(LastFragment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).SessionID as *const _
                as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(SessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).CustomerName as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(CustomerName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).IdCardType as *const _
                as usize
        },
        273usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(IdCardType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).IdentifiedCardNo
                as *const _ as usize
        },
        274usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(IdentifiedCardNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).Gender as *const _
                as usize
        },
        325usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(Gender)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).CountryCode as *const _
                as usize
        },
        326usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(CountryCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).CustType as *const _
                as usize
        },
        347usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(CustType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).Address as *const _
                as usize
        },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(Address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).ZipCode as *const _
                as usize
        },
        449usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(ZipCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).Telephone as *const _
                as usize
        },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(Telephone)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).MobilePhone as *const _
                as usize
        },
        497usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(MobilePhone)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).Fax as *const _ as usize
        },
        518usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(Fax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).EMail as *const _ as usize
        },
        559usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(EMail)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).MoneyAccountStatus
                as *const _ as usize
        },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(MoneyAccountStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).BankAccount as *const _
                as usize
        },
        601usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(BankAccount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).BankPassWord as *const _
                as usize
        },
        642usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(BankPassWord)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).InstallID as *const _
                as usize
        },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(InstallID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).VerifyCertNoFlag
                as *const _ as usize
        },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(VerifyCertNoFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).CurrencyID as *const _
                as usize
        },
        689usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).Digest as *const _
                as usize
        },
        693usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(Digest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).BankAccType as *const _
                as usize
        },
        729usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(BankAccType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).BrokerIDByBank as *const _
                as usize
        },
        730usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(BrokerIDByBank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).TID as *const _ as usize
        },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(TID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).ReserveOpenAccStas
                as *const _ as usize
        },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(ReserveOpenAccStas)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).ErrorID as *const _
                as usize
        },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(ErrorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReserveOpenAccountField>())).ErrorMsg as *const _
                as usize
        },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReserveOpenAccountField),
            "::",
            stringify!(ErrorMsg)
        )
    );
}
impl Default for CThostFtdcReserveOpenAccountField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�����˻�����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcAccountPropertyField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "����ͳһ��ʶ����"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "�����˻�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "�����˻��Ŀ���������"]
    pub OpenName: TThostFtdcInvestorFullNameType,
    #[doc = "�����˻��Ŀ�����"]
    pub OpenBank: TThostFtdcOpenBankType,
    #[doc = "�Ƿ��Ծ"]
    pub IsActive: TThostFtdcBoolType,
    #[doc = "�˻���Դ"]
    pub AccountSourceType: TThostFtdcAccountSourceTypeType,
    #[doc = "��������"]
    pub OpenDate: TThostFtdcDateType,
    #[doc = "ע������"]
    pub CancelDate: TThostFtdcDateType,
    #[doc = "¼��Ա����"]
    pub OperatorID: TThostFtdcOperatorIDType,
    #[doc = "¼������"]
    pub OperateDate: TThostFtdcDateType,
    #[doc = "¼��ʱ��"]
    pub OperateTime: TThostFtdcTimeType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcAccountPropertyField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcAccountPropertyField>(),
        384usize,
        concat!("Size of: ", stringify!(CThostFtdcAccountPropertyField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcAccountPropertyField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcAccountPropertyField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAccountPropertyField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAccountPropertyField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAccountPropertyField>())).AccountID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAccountPropertyField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAccountPropertyField>())).BankID as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAccountPropertyField),
            "::",
            stringify!(BankID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAccountPropertyField>())).BankAccount as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAccountPropertyField),
            "::",
            stringify!(BankAccount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAccountPropertyField>())).OpenName as *const _ as usize
        },
        69usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAccountPropertyField),
            "::",
            stringify!(OpenName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAccountPropertyField>())).OpenBank as *const _ as usize
        },
        170usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAccountPropertyField),
            "::",
            stringify!(OpenBank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAccountPropertyField>())).IsActive as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAccountPropertyField),
            "::",
            stringify!(IsActive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAccountPropertyField>())).AccountSourceType as *const _
                as usize
        },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAccountPropertyField),
            "::",
            stringify!(AccountSourceType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAccountPropertyField>())).OpenDate as *const _ as usize
        },
        277usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAccountPropertyField),
            "::",
            stringify!(OpenDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAccountPropertyField>())).CancelDate as *const _
                as usize
        },
        286usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAccountPropertyField),
            "::",
            stringify!(CancelDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAccountPropertyField>())).OperatorID as *const _
                as usize
        },
        295usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAccountPropertyField),
            "::",
            stringify!(OperatorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAccountPropertyField>())).OperateDate as *const _
                as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAccountPropertyField),
            "::",
            stringify!(OperateDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAccountPropertyField>())).OperateTime as *const _
                as usize
        },
        369usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAccountPropertyField),
            "::",
            stringify!(OperateTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAccountPropertyField>())).CurrencyID as *const _
                as usize
        },
        378usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAccountPropertyField),
            "::",
            stringify!(CurrencyID)
        )
    );
}
impl Default for CThostFtdcAccountPropertyField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ��ǰ��������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryCurrDRIdentityField {
    #[doc = "�������Ĵ���"]
    pub DRIdentityID: TThostFtdcDRIdentityIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryCurrDRIdentityField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryCurrDRIdentityField>(),
        4usize,
        concat!("Size of: ", stringify!(CThostFtdcQryCurrDRIdentityField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryCurrDRIdentityField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryCurrDRIdentityField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryCurrDRIdentityField>())).DRIdentityID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryCurrDRIdentityField),
            "::",
            stringify!(DRIdentityID)
        )
    );
}
#[doc = "��ǰ��������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcCurrDRIdentityField {
    #[doc = "�������Ĵ���"]
    pub DRIdentityID: TThostFtdcDRIdentityIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcCurrDRIdentityField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcCurrDRIdentityField>(),
        4usize,
        concat!("Size of: ", stringify!(CThostFtdcCurrDRIdentityField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcCurrDRIdentityField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcCurrDRIdentityField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCurrDRIdentityField>())).DRIdentityID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCurrDRIdentityField),
            "::",
            stringify!(DRIdentityID)
        )
    );
}
#[doc = "��ѯ�����������ʽ�У��ģʽ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQrySecAgentCheckModeField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQrySecAgentCheckModeField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQrySecAgentCheckModeField>(),
        24usize,
        concat!("Size of: ", stringify!(CThostFtdcQrySecAgentCheckModeField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQrySecAgentCheckModeField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQrySecAgentCheckModeField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQrySecAgentCheckModeField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQrySecAgentCheckModeField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQrySecAgentCheckModeField>())).InvestorID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQrySecAgentCheckModeField),
            "::",
            stringify!(InvestorID)
        )
    );
}
#[doc = "��ѯ������������Ϣ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQrySecAgentTradeInfoField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�����н�����ʽ��ʺ�"]
    pub BrokerSecAgentID: TThostFtdcAccountIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQrySecAgentTradeInfoField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQrySecAgentTradeInfoField>(),
        24usize,
        concat!("Size of: ", stringify!(CThostFtdcQrySecAgentTradeInfoField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQrySecAgentTradeInfoField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQrySecAgentTradeInfoField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQrySecAgentTradeInfoField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQrySecAgentTradeInfoField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQrySecAgentTradeInfoField>())).BrokerSecAgentID
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQrySecAgentTradeInfoField),
            "::",
            stringify!(BrokerSecAgentID)
        )
    );
}
#[doc = "�û�������ȡ��ȫ��ȫ��½��������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcReqUserAuthMethodField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcReqUserAuthMethodField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcReqUserAuthMethodField>(),
        36usize,
        concat!("Size of: ", stringify!(CThostFtdcReqUserAuthMethodField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcReqUserAuthMethodField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcReqUserAuthMethodField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserAuthMethodField>())).TradingDay as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserAuthMethodField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserAuthMethodField>())).BrokerID as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserAuthMethodField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserAuthMethodField>())).UserID as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserAuthMethodField),
            "::",
            stringify!(UserID)
        )
    );
}
#[doc = "�û�������ȡ��ȫ��ȫ��½�����ظ�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcRspUserAuthMethodField {
    #[doc = "��ǰ�����õ���\u{5a4}ģʽ"]
    pub UsableAuthMethod: TThostFtdcCurrentAuthMethodType,
}
#[test]
fn bindgen_test_layout_CThostFtdcRspUserAuthMethodField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcRspUserAuthMethodField>(),
        4usize,
        concat!("Size of: ", stringify!(CThostFtdcRspUserAuthMethodField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcRspUserAuthMethodField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcRspUserAuthMethodField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspUserAuthMethodField>())).UsableAuthMethod
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspUserAuthMethodField),
            "::",
            stringify!(UsableAuthMethod)
        )
    );
}
#[doc = "�û�������ȡ��ȫ��ȫ��½��������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcReqGenUserCaptchaField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcReqGenUserCaptchaField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcReqGenUserCaptchaField>(),
        36usize,
        concat!("Size of: ", stringify!(CThostFtdcReqGenUserCaptchaField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcReqGenUserCaptchaField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcReqGenUserCaptchaField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqGenUserCaptchaField>())).TradingDay as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqGenUserCaptchaField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqGenUserCaptchaField>())).BrokerID as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqGenUserCaptchaField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqGenUserCaptchaField>())).UserID as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqGenUserCaptchaField),
            "::",
            stringify!(UserID)
        )
    );
}
#[doc = "���ɵ�ͼƬ��\u{5a4}����Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspGenUserCaptchaField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "ͼƬ��Ϣ����"]
    pub CaptchaInfoLen: TThostFtdcCaptchaInfoLenType,
    #[doc = "ͼƬ��Ϣ"]
    pub CaptchaInfo: TThostFtdcCaptchaInfoType,
}
#[test]
fn bindgen_test_layout_CThostFtdcRspGenUserCaptchaField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcRspGenUserCaptchaField>(),
        2596usize,
        concat!("Size of: ", stringify!(CThostFtdcRspGenUserCaptchaField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcRspGenUserCaptchaField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcRspGenUserCaptchaField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspGenUserCaptchaField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspGenUserCaptchaField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspGenUserCaptchaField>())).UserID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspGenUserCaptchaField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspGenUserCaptchaField>())).CaptchaInfoLen as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspGenUserCaptchaField),
            "::",
            stringify!(CaptchaInfoLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspGenUserCaptchaField>())).CaptchaInfo as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspGenUserCaptchaField),
            "::",
            stringify!(CaptchaInfo)
        )
    );
}
impl Default for CThostFtdcRspGenUserCaptchaField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�û�������ȡ��ȫ��ȫ��½��������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcReqGenUserTextField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcReqGenUserTextField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcReqGenUserTextField>(),
        36usize,
        concat!("Size of: ", stringify!(CThostFtdcReqGenUserTextField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcReqGenUserTextField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcReqGenUserTextField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqGenUserTextField>())).TradingDay as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqGenUserTextField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqGenUserTextField>())).BrokerID as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqGenUserTextField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqGenUserTextField>())).UserID as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqGenUserTextField),
            "::",
            stringify!(UserID)
        )
    );
}
#[doc = "������\u{5a4}�����ɵĻظ�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcRspGenUserTextField {
    #[doc = "������\u{5a4}�����"]
    pub UserTextSeq: TThostFtdcUserTextSeqType,
}
#[test]
fn bindgen_test_layout_CThostFtdcRspGenUserTextField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcRspGenUserTextField>(),
        4usize,
        concat!("Size of: ", stringify!(CThostFtdcRspGenUserTextField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcRspGenUserTextField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcRspGenUserTextField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspGenUserTextField>())).UserTextSeq as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspGenUserTextField),
            "::",
            stringify!(UserTextSeq)
        )
    );
}
#[doc = "�û�������ͼ����\u{5a4}��ĵ�¼��������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqUserLoginWithCaptchaField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "�û��˲�Ʒ��Ϣ"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "�ӿڶ˲�Ʒ��Ϣ"]
    pub InterfaceProductInfo: TThostFtdcProductInfoType,
    #[doc = "Э����Ϣ"]
    pub ProtocolInfo: TThostFtdcProtocolInfoType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "��¼��ע"]
    pub LoginRemark: TThostFtdcLoginRemarkType,
    #[doc = "ͼ����\u{5a4}�����������"]
    pub Captcha: TThostFtdcPasswordType,
    #[doc = "�ն�IP�˿�"]
    pub ClientIPPort: TThostFtdcIPPortType,
    #[doc = "�ն�IP��\u{5b7}"]
    pub ClientIPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcReqUserLoginWithCaptchaField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcReqUserLoginWithCaptchaField>(),
        264usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcReqUserLoginWithCaptchaField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcReqUserLoginWithCaptchaField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcReqUserLoginWithCaptchaField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithCaptchaField>())).TradingDay
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithCaptchaField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithCaptchaField>())).BrokerID as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithCaptchaField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithCaptchaField>())).UserID as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithCaptchaField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithCaptchaField>())).Password as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithCaptchaField),
            "::",
            stringify!(Password)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithCaptchaField>())).UserProductInfo
                as *const _ as usize
        },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithCaptchaField),
            "::",
            stringify!(UserProductInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithCaptchaField>())).InterfaceProductInfo
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithCaptchaField),
            "::",
            stringify!(InterfaceProductInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithCaptchaField>())).ProtocolInfo
                as *const _ as usize
        },
        99usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithCaptchaField),
            "::",
            stringify!(ProtocolInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithCaptchaField>())).MacAddress
                as *const _ as usize
        },
        110usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithCaptchaField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithCaptchaField>())).reserve1 as *const _
                as usize
        },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithCaptchaField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithCaptchaField>())).LoginRemark
                as *const _ as usize
        },
        147usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithCaptchaField),
            "::",
            stringify!(LoginRemark)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithCaptchaField>())).Captcha as *const _
                as usize
        },
        183usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithCaptchaField),
            "::",
            stringify!(Captcha)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithCaptchaField>())).ClientIPPort
                as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithCaptchaField),
            "::",
            stringify!(ClientIPPort)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithCaptchaField>())).ClientIPAddress
                as *const _ as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithCaptchaField),
            "::",
            stringify!(ClientIPAddress)
        )
    );
}
impl Default for CThostFtdcReqUserLoginWithCaptchaField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�û�������������\u{5a4}��ĵ�¼��������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqUserLoginWithTextField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "�û��˲�Ʒ��Ϣ"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "�ӿڶ˲�Ʒ��Ϣ"]
    pub InterfaceProductInfo: TThostFtdcProductInfoType,
    #[doc = "Э����Ϣ"]
    pub ProtocolInfo: TThostFtdcProtocolInfoType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "��¼��ע"]
    pub LoginRemark: TThostFtdcLoginRemarkType,
    #[doc = "������\u{5a4}����������"]
    pub Text: TThostFtdcPasswordType,
    #[doc = "�ն�IP�˿�"]
    pub ClientIPPort: TThostFtdcIPPortType,
    #[doc = "�ն�IP��\u{5b7}"]
    pub ClientIPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcReqUserLoginWithTextField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcReqUserLoginWithTextField>(),
        264usize,
        concat!("Size of: ", stringify!(CThostFtdcReqUserLoginWithTextField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcReqUserLoginWithTextField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcReqUserLoginWithTextField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithTextField>())).TradingDay as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithTextField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithTextField>())).BrokerID as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithTextField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithTextField>())).UserID as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithTextField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithTextField>())).Password as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithTextField),
            "::",
            stringify!(Password)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithTextField>())).UserProductInfo
                as *const _ as usize
        },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithTextField),
            "::",
            stringify!(UserProductInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithTextField>())).InterfaceProductInfo
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithTextField),
            "::",
            stringify!(InterfaceProductInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithTextField>())).ProtocolInfo as *const _
                as usize
        },
        99usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithTextField),
            "::",
            stringify!(ProtocolInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithTextField>())).MacAddress as *const _
                as usize
        },
        110usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithTextField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithTextField>())).reserve1 as *const _
                as usize
        },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithTextField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithTextField>())).LoginRemark as *const _
                as usize
        },
        147usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithTextField),
            "::",
            stringify!(LoginRemark)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithTextField>())).Text as *const _
                as usize
        },
        183usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithTextField),
            "::",
            stringify!(Text)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithTextField>())).ClientIPPort as *const _
                as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithTextField),
            "::",
            stringify!(ClientIPPort)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithTextField>())).ClientIPAddress
                as *const _ as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithTextField),
            "::",
            stringify!(ClientIPAddress)
        )
    );
}
impl Default for CThostFtdcReqUserLoginWithTextField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�û���������\u{32c}��\u{5a4}��ĵ�¼��������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqUserLoginWithOTPField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "�û��˲�Ʒ��Ϣ"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "�ӿڶ˲�Ʒ��Ϣ"]
    pub InterfaceProductInfo: TThostFtdcProductInfoType,
    #[doc = "Э����Ϣ"]
    pub ProtocolInfo: TThostFtdcProtocolInfoType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "��¼��ע"]
    pub LoginRemark: TThostFtdcLoginRemarkType,
    #[doc = "OTP����"]
    pub OTPPassword: TThostFtdcPasswordType,
    #[doc = "�ն�IP�˿�"]
    pub ClientIPPort: TThostFtdcIPPortType,
    #[doc = "�ն�IP��\u{5b7}"]
    pub ClientIPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcReqUserLoginWithOTPField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcReqUserLoginWithOTPField>(),
        264usize,
        concat!("Size of: ", stringify!(CThostFtdcReqUserLoginWithOTPField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcReqUserLoginWithOTPField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcReqUserLoginWithOTPField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithOTPField>())).TradingDay as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithOTPField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithOTPField>())).BrokerID as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithOTPField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithOTPField>())).UserID as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithOTPField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithOTPField>())).Password as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithOTPField),
            "::",
            stringify!(Password)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithOTPField>())).UserProductInfo
                as *const _ as usize
        },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithOTPField),
            "::",
            stringify!(UserProductInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithOTPField>())).InterfaceProductInfo
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithOTPField),
            "::",
            stringify!(InterfaceProductInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithOTPField>())).ProtocolInfo as *const _
                as usize
        },
        99usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithOTPField),
            "::",
            stringify!(ProtocolInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithOTPField>())).MacAddress as *const _
                as usize
        },
        110usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithOTPField),
            "::",
            stringify!(MacAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithOTPField>())).reserve1 as *const _
                as usize
        },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithOTPField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithOTPField>())).LoginRemark as *const _
                as usize
        },
        147usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithOTPField),
            "::",
            stringify!(LoginRemark)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithOTPField>())).OTPPassword as *const _
                as usize
        },
        183usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithOTPField),
            "::",
            stringify!(OTPPassword)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithOTPField>())).ClientIPPort as *const _
                as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithOTPField),
            "::",
            stringify!(ClientIPPort)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqUserLoginWithOTPField>())).ClientIPAddress
                as *const _ as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqUserLoginWithOTPField),
            "::",
            stringify!(ClientIPAddress)
        )
    );
}
impl Default for CThostFtdcReqUserLoginWithOTPField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "api��������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcReqApiHandshakeField {
    #[doc = "api��front\u{368}����Կ�汾��"]
    pub CryptoKeyVersion: TThostFtdcCryptoKeyVersionType,
}
#[test]
fn bindgen_test_layout_CThostFtdcReqApiHandshakeField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcReqApiHandshakeField>(),
        31usize,
        concat!("Size of: ", stringify!(CThostFtdcReqApiHandshakeField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcReqApiHandshakeField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcReqApiHandshakeField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqApiHandshakeField>())).CryptoKeyVersion as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqApiHandshakeField),
            "::",
            stringify!(CryptoKeyVersion)
        )
    );
}
#[doc = "front����api�����\u{5bb}ظ�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspApiHandshakeField {
    #[doc = "���\u{5bb}ظ����ݳ���"]
    pub FrontHandshakeDataLen: TThostFtdcHandshakeDataLenType,
    #[doc = "���\u{5bb}ظ�����"]
    pub FrontHandshakeData: TThostFtdcHandshakeDataType,
    #[doc = "API��\u{5a4}�Ƿ���"]
    pub IsApiAuthEnabled: TThostFtdcBoolType,
}
#[test]
fn bindgen_test_layout_CThostFtdcRspApiHandshakeField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcRspApiHandshakeField>(),
        312usize,
        concat!("Size of: ", stringify!(CThostFtdcRspApiHandshakeField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcRspApiHandshakeField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcRspApiHandshakeField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspApiHandshakeField>())).FrontHandshakeDataLen
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspApiHandshakeField),
            "::",
            stringify!(FrontHandshakeDataLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspApiHandshakeField>())).FrontHandshakeData
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspApiHandshakeField),
            "::",
            stringify!(FrontHandshakeData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRspApiHandshakeField>())).IsApiAuthEnabled as *const _
                as usize
        },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRspApiHandshakeField),
            "::",
            stringify!(IsApiAuthEnabled)
        )
    );
}
impl Default for CThostFtdcRspApiHandshakeField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "api��front����\u{5a4}key������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqVerifyApiKeyField {
    #[doc = "���\u{5bb}ظ����ݳ���"]
    pub ApiHandshakeDataLen: TThostFtdcHandshakeDataLenType,
    #[doc = "���\u{5bb}ظ�����"]
    pub ApiHandshakeData: TThostFtdcHandshakeDataType,
}
#[test]
fn bindgen_test_layout_CThostFtdcReqVerifyApiKeyField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcReqVerifyApiKeyField>(),
        308usize,
        concat!("Size of: ", stringify!(CThostFtdcReqVerifyApiKeyField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcReqVerifyApiKeyField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcReqVerifyApiKeyField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqVerifyApiKeyField>())).ApiHandshakeDataLen
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqVerifyApiKeyField),
            "::",
            stringify!(ApiHandshakeDataLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcReqVerifyApiKeyField>())).ApiHandshakeData as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcReqVerifyApiKeyField),
            "::",
            stringify!(ApiHandshakeData)
        )
    );
}
impl Default for CThostFtdcReqVerifyApiKeyField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "����Ա��\u{5af}�\u{739}���ϵ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcDepartmentUserField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcDepartmentRangeType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcDepartmentUserField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcDepartmentUserField>(),
        41usize,
        concat!("Size of: ", stringify!(CThostFtdcDepartmentUserField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcDepartmentUserField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcDepartmentUserField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepartmentUserField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepartmentUserField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepartmentUserField>())).UserID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepartmentUserField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepartmentUserField>())).InvestorRange as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepartmentUserField),
            "::",
            stringify!(InvestorRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcDepartmentUserField>())).InvestorID as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcDepartmentUserField),
            "::",
            stringify!(InvestorID)
        )
    );
}
#[doc = "��ѯƵ�ʣ�ÿ���ѯ����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQueryFreqField {
    #[doc = "��ѯƵ��"]
    pub QueryFreq: TThostFtdcQueryFreqType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQueryFreqField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQueryFreqField>(),
        4usize,
        concat!("Size of: ", stringify!(CThostFtdcQueryFreqField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQueryFreqField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcQueryFreqField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQueryFreqField>())).QueryFreq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQueryFreqField),
            "::",
            stringify!(QueryFreq)
        )
    );
}
#[doc = "��\u{5b9}��\u{5a4}IP"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcAuthForbiddenIPField {
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcAuthForbiddenIPField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcAuthForbiddenIPField>(),
        33usize,
        concat!("Size of: ", stringify!(CThostFtdcAuthForbiddenIPField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcAuthForbiddenIPField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcAuthForbiddenIPField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAuthForbiddenIPField>())).IPAddress as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAuthForbiddenIPField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcAuthForbiddenIPField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ��\u{5b9}��\u{5a4}IP"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryAuthForbiddenIPField {
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryAuthForbiddenIPField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryAuthForbiddenIPField>(),
        33usize,
        concat!("Size of: ", stringify!(CThostFtdcQryAuthForbiddenIPField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryAuthForbiddenIPField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryAuthForbiddenIPField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryAuthForbiddenIPField>())).IPAddress as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryAuthForbiddenIPField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcQryAuthForbiddenIPField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "������ᶳ��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcSyncDelaySwapFrozenField {
    #[doc = "������ˮ��"]
    pub DelaySwapSeqNo: TThostFtdcDepositSeqNoType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Դ����"]
    pub FromCurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "Դʣ�\u{efb}����(���ᶳ��)"]
    pub FromRemainSwap: TThostFtdcMoneyType,
    #[doc = "�Ƿ��\u{5b9}�����"]
    pub IsManualSwap: TThostFtdcBoolType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSyncDelaySwapFrozenField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSyncDelaySwapFrozenField>(),
        64usize,
        concat!("Size of: ", stringify!(CThostFtdcSyncDelaySwapFrozenField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSyncDelaySwapFrozenField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcSyncDelaySwapFrozenField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDelaySwapFrozenField>())).DelaySwapSeqNo
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDelaySwapFrozenField),
            "::",
            stringify!(DelaySwapSeqNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDelaySwapFrozenField>())).BrokerID as *const _
                as usize
        },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDelaySwapFrozenField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDelaySwapFrozenField>())).InvestorID as *const _
                as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDelaySwapFrozenField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDelaySwapFrozenField>())).FromCurrencyID
                as *const _ as usize
        },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDelaySwapFrozenField),
            "::",
            stringify!(FromCurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDelaySwapFrozenField>())).FromRemainSwap
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDelaySwapFrozenField),
            "::",
            stringify!(FromRemainSwap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDelaySwapFrozenField>())).IsManualSwap as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDelaySwapFrozenField),
            "::",
            stringify!(IsManualSwap)
        )
    );
}
#[doc = "�û�ϵͳ��Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcUserSystemInfoField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�û���ϵͳ�ڲ���Ϣ����"]
    pub ClientSystemInfoLen: TThostFtdcSystemInfoLenType,
    #[doc = "�û���ϵͳ�ڲ���Ϣ"]
    pub ClientSystemInfo: TThostFtdcClientSystemInfoType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "�ն�IP�˿�"]
    pub ClientIPPort: TThostFtdcIPPortType,
    #[doc = "��¼�ɹ�ʱ��"]
    pub ClientLoginTime: TThostFtdcTimeType,
    #[doc = "App����"]
    pub ClientAppID: TThostFtdcAppIDType,
    #[doc = "�û�����IP"]
    pub ClientPublicIP: TThostFtdcIPAddressType,
    #[doc = "�ͻ���¼��ע2"]
    pub ClientLoginRemark: TThostFtdcClientLoginRemarkType,
}
#[test]
fn bindgen_test_layout_CThostFtdcUserSystemInfoField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcUserSystemInfoField>(),
        556usize,
        concat!("Size of: ", stringify!(CThostFtdcUserSystemInfoField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcUserSystemInfoField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcUserSystemInfoField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserSystemInfoField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserSystemInfoField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserSystemInfoField>())).UserID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserSystemInfoField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserSystemInfoField>())).ClientSystemInfoLen
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserSystemInfoField),
            "::",
            stringify!(ClientSystemInfoLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserSystemInfoField>())).ClientSystemInfo as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserSystemInfoField),
            "::",
            stringify!(ClientSystemInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserSystemInfoField>())).reserve1 as *const _ as usize
        },
        305usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserSystemInfoField),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserSystemInfoField>())).ClientIPPort as *const _
                as usize
        },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserSystemInfoField),
            "::",
            stringify!(ClientIPPort)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserSystemInfoField>())).ClientLoginTime as *const _
                as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserSystemInfoField),
            "::",
            stringify!(ClientLoginTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserSystemInfoField>())).ClientAppID as *const _
                as usize
        },
        337usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserSystemInfoField),
            "::",
            stringify!(ClientAppID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserSystemInfoField>())).ClientPublicIP as *const _
                as usize
        },
        370usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserSystemInfoField),
            "::",
            stringify!(ClientPublicIP)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcUserSystemInfoField>())).ClientLoginRemark as *const _
                as usize
        },
        403usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcUserSystemInfoField),
            "::",
            stringify!(ClientLoginRemark)
        )
    );
}
impl Default for CThostFtdcUserSystemInfoField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�ն��û�����Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcAuthUserIDField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "App����"]
    pub AppID: TThostFtdcAppIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "У������"]
    pub AuthType: TThostFtdcAuthTypeType,
}
#[test]
fn bindgen_test_layout_CThostFtdcAuthUserIDField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcAuthUserIDField>(),
        61usize,
        concat!("Size of: ", stringify!(CThostFtdcAuthUserIDField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcAuthUserIDField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcAuthUserIDField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAuthUserIDField>())).BrokerID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAuthUserIDField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcAuthUserIDField>())).AppID as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAuthUserIDField),
            "::",
            stringify!(AppID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAuthUserIDField>())).UserID as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAuthUserIDField),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcAuthUserIDField>())).AuthType as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAuthUserIDField),
            "::",
            stringify!(AuthType)
        )
    );
}
impl Default for CThostFtdcAuthUserIDField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "�û�IP����Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcAuthIPField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "App����"]
    pub AppID: TThostFtdcAppIDType,
    #[doc = "�û�����"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[test]
fn bindgen_test_layout_CThostFtdcAuthIPField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcAuthIPField>(),
        77usize,
        concat!("Size of: ", stringify!(CThostFtdcAuthIPField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcAuthIPField>(),
        1usize,
        concat!("Alignment of ", stringify!(CThostFtdcAuthIPField))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcAuthIPField>())).BrokerID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAuthIPField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcAuthIPField>())).AppID as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAuthIPField),
            "::",
            stringify!(AppID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CThostFtdcAuthIPField>())).IPAddress as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcAuthIPField),
            "::",
            stringify!(IPAddress)
        )
    );
}
impl Default for CThostFtdcAuthIPField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ�����Լ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryClassifiedInstrumentField {
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcInstrumentIDType,
    #[doc = "��Լ����״\u{32c}"]
    pub TradingType: TThostFtdcTradingTypeType,
    #[doc = "��Լ��������"]
    pub ClassType: TThostFtdcClassTypeType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryClassifiedInstrumentField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryClassifiedInstrumentField>(),
        254usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcQryClassifiedInstrumentField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryClassifiedInstrumentField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryClassifiedInstrumentField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryClassifiedInstrumentField>())).InstrumentID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryClassifiedInstrumentField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryClassifiedInstrumentField>())).ExchangeID
                as *const _ as usize
        },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryClassifiedInstrumentField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryClassifiedInstrumentField>())).ExchangeInstID
                as *const _ as usize
        },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryClassifiedInstrumentField),
            "::",
            stringify!(ExchangeInstID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryClassifiedInstrumentField>())).ProductID as *const _
                as usize
        },
        171usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryClassifiedInstrumentField),
            "::",
            stringify!(ProductID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryClassifiedInstrumentField>())).TradingType
                as *const _ as usize
        },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryClassifiedInstrumentField),
            "::",
            stringify!(TradingType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryClassifiedInstrumentField>())).ClassType as *const _
                as usize
        },
        253usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryClassifiedInstrumentField),
            "::",
            stringify!(ClassType)
        )
    );
}
impl Default for CThostFtdcQryClassifiedInstrumentField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "��ѯ����Żݱ���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryCombPromotionParamField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryCombPromotionParamField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryCombPromotionParamField>(),
        90usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcQryCombPromotionParamField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryCombPromotionParamField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryCombPromotionParamField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryCombPromotionParamField>())).ExchangeID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryCombPromotionParamField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryCombPromotionParamField>())).InstrumentID
                as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryCombPromotionParamField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcQryCombPromotionParamField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "����Żݱ���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcCombPromotionParamField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "Ͷ���ױ���־"]
    pub CombHedgeFlag: TThostFtdcCombHedgeFlagType,
    #[doc = "��Ȩ��ϱ�\u{5a4}�����"]
    pub Xparameter: TThostFtdcDiscountRatioType,
}
#[test]
fn bindgen_test_layout_CThostFtdcCombPromotionParamField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcCombPromotionParamField>(),
        104usize,
        concat!("Size of: ", stringify!(CThostFtdcCombPromotionParamField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcCombPromotionParamField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcCombPromotionParamField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombPromotionParamField>())).ExchangeID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombPromotionParamField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombPromotionParamField>())).InstrumentID as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombPromotionParamField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombPromotionParamField>())).CombHedgeFlag as *const _
                as usize
        },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombPromotionParamField),
            "::",
            stringify!(CombHedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcCombPromotionParamField>())).Xparameter as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcCombPromotionParamField),
            "::",
            stringify!(Xparameter)
        )
    );
}
impl Default for CThostFtdcCombPromotionParamField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "Ͷ���߷��ս���\u{5b2}\u{5b2}�ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryRiskSettleInvstPositionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryRiskSettleInvstPositionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryRiskSettleInvstPositionField>(),
        105usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcQryRiskSettleInvstPositionField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryRiskSettleInvstPositionField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryRiskSettleInvstPositionField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryRiskSettleInvstPositionField>())).BrokerID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryRiskSettleInvstPositionField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryRiskSettleInvstPositionField>())).InvestorID
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryRiskSettleInvstPositionField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryRiskSettleInvstPositionField>())).InstrumentID
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryRiskSettleInvstPositionField),
            "::",
            stringify!(InstrumentID)
        )
    );
}
impl Default for CThostFtdcQryRiskSettleInvstPositionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���ս����Ʒ��ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryRiskSettleProductStatusField {
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcInstrumentIDType,
}
#[test]
fn bindgen_test_layout_CThostFtdcQryRiskSettleProductStatusField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcQryRiskSettleProductStatusField>(),
        81usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcQryRiskSettleProductStatusField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcQryRiskSettleProductStatusField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcQryRiskSettleProductStatusField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcQryRiskSettleProductStatusField>())).ProductID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcQryRiskSettleProductStatusField),
            "::",
            stringify!(ProductID)
        )
    );
}
impl Default for CThostFtdcQryRiskSettleProductStatusField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "Ͷ���߷��ս���\u{5b2}�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRiskSettleInvstPositionField {
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "�\u{5b2}\u{5b6}�շ���"]
    pub PosiDirection: TThostFtdcPosiDirectionType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "�\u{5b2}�����"]
    pub PositionDate: TThostFtdcPositionDateType,
    #[doc = "���ճ\u{5b2}�"]
    pub YdPosition: TThostFtdcVolumeType,
    #[doc = "���ճ\u{5b2}�"]
    pub Position: TThostFtdcVolumeType,
    #[doc = "��ͷ����"]
    pub LongFrozen: TThostFtdcVolumeType,
    #[doc = "��ͷ����"]
    pub ShortFrozen: TThostFtdcVolumeType,
    #[doc = "���\u{5b6}�����"]
    pub LongFrozenAmount: TThostFtdcMoneyType,
    #[doc = "���\u{5b6}�����"]
    pub ShortFrozenAmount: TThostFtdcMoneyType,
    #[doc = "������"]
    pub OpenVolume: TThostFtdcVolumeType,
    #[doc = "ƽ����"]
    pub CloseVolume: TThostFtdcVolumeType,
    #[doc = "���\u{5bd}��"]
    pub OpenAmount: TThostFtdcMoneyType,
    #[doc = "ƽ�\u{5bd}��"]
    pub CloseAmount: TThostFtdcMoneyType,
    #[doc = "�\u{5b2}\u{5b3}ɱ�"]
    pub PositionCost: TThostFtdcMoneyType,
    #[doc = "�ϴ�ռ�õı�\u{5a4}��"]
    pub PreMargin: TThostFtdcMoneyType,
    #[doc = "ռ�õı�\u{5a4}��"]
    pub UseMargin: TThostFtdcMoneyType,
    #[doc = "����ı�\u{5a4}��"]
    pub FrozenMargin: TThostFtdcMoneyType,
    #[doc = "������ʽ�"]
    pub FrozenCash: TThostFtdcMoneyType,
    #[doc = "�����������"]
    pub FrozenCommission: TThostFtdcMoneyType,
    #[doc = "�ʽ���"]
    pub CashIn: TThostFtdcMoneyType,
    #[doc = "������"]
    pub Commission: TThostFtdcMoneyType,
    #[doc = "ƽ��ӯ��"]
    pub CloseProfit: TThostFtdcMoneyType,
    #[doc = "�\u{5b2}�ӯ��"]
    pub PositionProfit: TThostFtdcMoneyType,
    #[doc = "�ϴν����"]
    pub PreSettlementPrice: TThostFtdcPriceType,
    #[doc = "���ν����"]
    pub SettlementPrice: TThostFtdcPriceType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "���\u{5b3}ɱ�"]
    pub OpenCost: TThostFtdcMoneyType,
    #[doc = "��������\u{5a4}��"]
    pub ExchangeMargin: TThostFtdcMoneyType,
    #[doc = "��ϳɽ��γɵĳ\u{5b2}�"]
    pub CombPosition: TThostFtdcVolumeType,
    #[doc = "��϶�ͷ����"]
    pub CombLongFrozen: TThostFtdcVolumeType,
    #[doc = "��Ͽ�ͷ����"]
    pub CombShortFrozen: TThostFtdcVolumeType,
    #[doc = "���ն���ƽ��ӯ��"]
    pub CloseProfitByDate: TThostFtdcMoneyType,
    #[doc = "��ʶԳ�ƽ��ӯ��"]
    pub CloseProfitByTrade: TThostFtdcMoneyType,
    #[doc = "���ճ\u{5b2}�"]
    pub TodayPosition: TThostFtdcVolumeType,
    #[doc = "��\u{5a4}����"]
    pub MarginRateByMoney: TThostFtdcRatioType,
    #[doc = "��\u{5a4}����(������)"]
    pub MarginRateByVolume: TThostFtdcRatioType,
    #[doc = "\u{5b4}�ж���"]
    pub StrikeFrozen: TThostFtdcVolumeType,
    #[doc = "\u{5b4}�ж�����"]
    pub StrikeFrozenAmount: TThostFtdcMoneyType,
    #[doc = "����\u{5b4}�ж���"]
    pub AbandonFrozen: TThostFtdcVolumeType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "\u{5b4}�ж�������"]
    pub YdStrikeFrozen: TThostFtdcVolumeType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "�������\u{5b2}\u{5b3}ɱ���\u{5b5}��\u{5bb}�д�����ʹ��"]
    pub PositionCostOffset: TThostFtdcMoneyType,
    #[doc = "tas�\u{5b2}�����"]
    pub TasPosition: TThostFtdcVolumeType,
    #[doc = "tas�\u{5b2}\u{5b3}ɱ�"]
    pub TasPositionCost: TThostFtdcMoneyType,
}
#[test]
fn bindgen_test_layout_CThostFtdcRiskSettleInvstPositionField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcRiskSettleInvstPositionField>(),
        432usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcRiskSettleInvstPositionField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcRiskSettleInvstPositionField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).InstrumentID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).BrokerID as *const _
                as usize
        },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).InvestorID
                as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).PosiDirection
                as *const _ as usize
        },
        105usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(PosiDirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).HedgeFlag as *const _
                as usize
        },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).PositionDate
                as *const _ as usize
        },
        107usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(PositionDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).YdPosition
                as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(YdPosition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).Position as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(Position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).LongFrozen
                as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(LongFrozen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).ShortFrozen
                as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(ShortFrozen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).LongFrozenAmount
                as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(LongFrozenAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).ShortFrozenAmount
                as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(ShortFrozenAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).OpenVolume
                as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(OpenVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).CloseVolume
                as *const _ as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(CloseVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).OpenAmount
                as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(OpenAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).CloseAmount
                as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(CloseAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).PositionCost
                as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(PositionCost)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).PreMargin as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(PreMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).UseMargin as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(UseMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).FrozenMargin
                as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(FrozenMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).FrozenCash
                as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(FrozenCash)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).FrozenCommission
                as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(FrozenCommission)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).CashIn as *const _
                as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(CashIn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).Commission
                as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(Commission)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).CloseProfit
                as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(CloseProfit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).PositionProfit
                as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(PositionProfit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).PreSettlementPrice
                as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(PreSettlementPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).SettlementPrice
                as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(SettlementPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).TradingDay
                as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).SettlementID
                as *const _ as usize
        },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(SettlementID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).OpenCost as *const _
                as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(OpenCost)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).ExchangeMargin
                as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(ExchangeMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).CombPosition
                as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(CombPosition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).CombLongFrozen
                as *const _ as usize
        },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(CombLongFrozen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).CombShortFrozen
                as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(CombShortFrozen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).CloseProfitByDate
                as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(CloseProfitByDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).CloseProfitByTrade
                as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(CloseProfitByTrade)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).TodayPosition
                as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(TodayPosition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).MarginRateByMoney
                as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(MarginRateByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).MarginRateByVolume
                as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(MarginRateByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).StrikeFrozen
                as *const _ as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(StrikeFrozen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).StrikeFrozenAmount
                as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(StrikeFrozenAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).AbandonFrozen
                as *const _ as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(AbandonFrozen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).ExchangeID
                as *const _ as usize
        },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).YdStrikeFrozen
                as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(YdStrikeFrozen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).InvestUnitID
                as *const _ as usize
        },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(InvestUnitID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).PositionCostOffset
                as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(PositionCostOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).TasPosition
                as *const _ as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(TasPosition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleInvstPositionField>())).TasPositionCost
                as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleInvstPositionField),
            "::",
            stringify!(TasPositionCost)
        )
    );
}
impl Default for CThostFtdcRiskSettleInvstPositionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "����Ʒ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRiskSettleProductStatusField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ʒ���"]
    pub ProductID: TThostFtdcInstrumentIDType,
    #[doc = "��Ʒ����״\u{32c}"]
    pub ProductStatus: TThostFtdcProductStatusType,
}
#[test]
fn bindgen_test_layout_CThostFtdcRiskSettleProductStatusField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcRiskSettleProductStatusField>(),
        91usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcRiskSettleProductStatusField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcRiskSettleProductStatusField>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcRiskSettleProductStatusField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleProductStatusField>())).ExchangeID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleProductStatusField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleProductStatusField>())).ProductID as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleProductStatusField),
            "::",
            stringify!(ProductID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcRiskSettleProductStatusField>())).ProductStatus
                as *const _ as usize
        },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcRiskSettleProductStatusField),
            "::",
            stringify!(ProductStatus)
        )
    );
}
impl Default for CThostFtdcRiskSettleProductStatusField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���ս���\u{5f7}ƽ��Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaInfoField {
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
    #[doc = "\u{5f7}ƽ״\u{32c}"]
    pub SyncDeltaStatus: TThostFtdcSyncDeltaStatusType,
    #[doc = "\u{5f7}ƽ����"]
    pub SyncDescription: TThostFtdcSyncDescriptionType,
    #[doc = "�Ƿ�\u{5bb}���ʽ�\u{5f7}ƽ"]
    pub IsOnlyTrdDelta: TThostFtdcBoolType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSyncDeltaInfoField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSyncDeltaInfoField>(),
        268usize,
        concat!("Size of: ", stringify!(CThostFtdcSyncDeltaInfoField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSyncDeltaInfoField>(),
        4usize,
        concat!("Alignment of ", stringify!(CThostFtdcSyncDeltaInfoField))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInfoField>())).SyncDeltaSequenceNo as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInfoField),
            "::",
            stringify!(SyncDeltaSequenceNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInfoField>())).SyncDeltaStatus as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInfoField),
            "::",
            stringify!(SyncDeltaStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInfoField>())).SyncDescription as *const _
                as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInfoField),
            "::",
            stringify!(SyncDescription)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInfoField>())).IsOnlyTrdDelta as *const _
                as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInfoField),
            "::",
            stringify!(IsOnlyTrdDelta)
        )
    );
}
impl Default for CThostFtdcSyncDeltaInfoField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���ս���\u{5f7}ƽ��Ʒ��Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaProductStatusField {
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcInstrumentIDType,
    #[doc = "�Ƿ���������"]
    pub ProductStatus: TThostFtdcProductStatusType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSyncDeltaProductStatusField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSyncDeltaProductStatusField>(),
        96usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcSyncDeltaProductStatusField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSyncDeltaProductStatusField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcSyncDeltaProductStatusField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaProductStatusField>())).SyncDeltaSequenceNo
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaProductStatusField),
            "::",
            stringify!(SyncDeltaSequenceNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaProductStatusField>())).ExchangeID as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaProductStatusField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaProductStatusField>())).ProductID as *const _
                as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaProductStatusField),
            "::",
            stringify!(ProductID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaProductStatusField>())).ProductStatus
                as *const _ as usize
        },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaProductStatusField),
            "::",
            stringify!(ProductStatus)
        )
    );
}
impl Default for CThostFtdcSyncDeltaProductStatusField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���ս���\u{5f7}ƽ�\u{5b2}���ϸ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaInvstPosDtlField {
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "����"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "��������"]
    pub OpenDate: TThostFtdcDateType,
    #[doc = "�ɽ����"]
    pub TradeID: TThostFtdcTradeIDType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "���\u{5bc}�"]
    pub OpenPrice: TThostFtdcPriceType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "�ɽ�����"]
    pub TradeType: TThostFtdcTradeTypeType,
    #[doc = "��Ϻ�Լ����"]
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���ն���ƽ��ӯ��"]
    pub CloseProfitByDate: TThostFtdcMoneyType,
    #[doc = "��ʶԳ�ƽ��ӯ��"]
    pub CloseProfitByTrade: TThostFtdcMoneyType,
    #[doc = "���ն��г\u{5b2}�ӯ��"]
    pub PositionProfitByDate: TThostFtdcMoneyType,
    #[doc = "��ʶԳ�\u{5b2}�ӯ��"]
    pub PositionProfitByTrade: TThostFtdcMoneyType,
    #[doc = "Ͷ���\u{7f1}�\u{5a4}��"]
    pub Margin: TThostFtdcMoneyType,
    #[doc = "��������\u{5a4}��"]
    pub ExchMargin: TThostFtdcMoneyType,
    #[doc = "��\u{5a4}����"]
    pub MarginRateByMoney: TThostFtdcRatioType,
    #[doc = "��\u{5a4}����(������)"]
    pub MarginRateByVolume: TThostFtdcRatioType,
    #[doc = "������"]
    pub LastSettlementPrice: TThostFtdcPriceType,
    #[doc = "�����"]
    pub SettlementPrice: TThostFtdcPriceType,
    #[doc = "ƽ����"]
    pub CloseVolume: TThostFtdcVolumeType,
    #[doc = "ƽ�\u{5bd}��"]
    pub CloseAmount: TThostFtdcMoneyType,
    #[doc = "�ȿ���ƽʣ��������DCE��"]
    pub TimeFirstVolume: TThostFtdcVolumeType,
    #[doc = "����\u{5b2}\u{5b1}�־"]
    pub SpecPosiType: TThostFtdcSpecPosiTypeType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSyncDeltaInvstPosDtlField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSyncDeltaInvstPosDtlField>(),
        376usize,
        concat!("Size of: ", stringify!(CThostFtdcSyncDeltaInvstPosDtlField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSyncDeltaInvstPosDtlField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcSyncDeltaInvstPosDtlField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosDtlField>())).InstrumentID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosDtlField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosDtlField>())).BrokerID as *const _
                as usize
        },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosDtlField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosDtlField>())).InvestorID as *const _
                as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosDtlField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosDtlField>())).HedgeFlag as *const _
                as usize
        },
        105usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosDtlField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosDtlField>())).Direction as *const _
                as usize
        },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosDtlField),
            "::",
            stringify!(Direction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosDtlField>())).OpenDate as *const _
                as usize
        },
        107usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosDtlField),
            "::",
            stringify!(OpenDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosDtlField>())).TradeID as *const _
                as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosDtlField),
            "::",
            stringify!(TradeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosDtlField>())).Volume as *const _
                as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosDtlField),
            "::",
            stringify!(Volume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosDtlField>())).OpenPrice as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosDtlField),
            "::",
            stringify!(OpenPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosDtlField>())).TradingDay as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosDtlField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosDtlField>())).SettlementID as *const _
                as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosDtlField),
            "::",
            stringify!(SettlementID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosDtlField>())).TradeType as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosDtlField),
            "::",
            stringify!(TradeType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosDtlField>())).CombInstrumentID
                as *const _ as usize
        },
        169usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosDtlField),
            "::",
            stringify!(CombInstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosDtlField>())).ExchangeID as *const _
                as usize
        },
        250usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosDtlField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosDtlField>())).CloseProfitByDate
                as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosDtlField),
            "::",
            stringify!(CloseProfitByDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosDtlField>())).CloseProfitByTrade
                as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosDtlField),
            "::",
            stringify!(CloseProfitByTrade)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosDtlField>())).PositionProfitByDate
                as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosDtlField),
            "::",
            stringify!(PositionProfitByDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosDtlField>())).PositionProfitByTrade
                as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosDtlField),
            "::",
            stringify!(PositionProfitByTrade)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosDtlField>())).Margin as *const _
                as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosDtlField),
            "::",
            stringify!(Margin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosDtlField>())).ExchMargin as *const _
                as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosDtlField),
            "::",
            stringify!(ExchMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosDtlField>())).MarginRateByMoney
                as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosDtlField),
            "::",
            stringify!(MarginRateByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosDtlField>())).MarginRateByVolume
                as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosDtlField),
            "::",
            stringify!(MarginRateByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosDtlField>())).LastSettlementPrice
                as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosDtlField),
            "::",
            stringify!(LastSettlementPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosDtlField>())).SettlementPrice
                as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosDtlField),
            "::",
            stringify!(SettlementPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosDtlField>())).CloseVolume as *const _
                as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosDtlField),
            "::",
            stringify!(CloseVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosDtlField>())).CloseAmount as *const _
                as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosDtlField),
            "::",
            stringify!(CloseAmount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosDtlField>())).TimeFirstVolume
                as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosDtlField),
            "::",
            stringify!(TimeFirstVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosDtlField>())).SpecPosiType as *const _
                as usize
        },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosDtlField),
            "::",
            stringify!(SpecPosiType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosDtlField>())).ActionDirection
                as *const _ as usize
        },
        365usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosDtlField),
            "::",
            stringify!(ActionDirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosDtlField>())).SyncDeltaSequenceNo
                as *const _ as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosDtlField),
            "::",
            stringify!(SyncDeltaSequenceNo)
        )
    );
}
impl Default for CThostFtdcSyncDeltaInvstPosDtlField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���ս���\u{5f7}ƽ��ϳ\u{5b2}���ϸ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaInvstPosCombDtlField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "��������"]
    pub OpenDate: TThostFtdcDateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��ϱ��"]
    pub ComTradeID: TThostFtdcTradeIDType,
    #[doc = "��ϱ��"]
    pub TradeID: TThostFtdcTradeIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "����"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "�\u{5b2}���"]
    pub TotalAmt: TThostFtdcVolumeType,
    #[doc = "Ͷ���\u{7f1}�\u{5a4}��"]
    pub Margin: TThostFtdcMoneyType,
    #[doc = "��������\u{5a4}��"]
    pub ExchMargin: TThostFtdcMoneyType,
    #[doc = "��\u{5a4}����"]
    pub MarginRateByMoney: TThostFtdcRatioType,
    #[doc = "��\u{5a4}����(������)"]
    pub MarginRateByVolume: TThostFtdcRatioType,
    #[doc = "���ȱ��"]
    pub LegID: TThostFtdcLegIDType,
    #[doc = "���ȳ���"]
    pub LegMultiple: TThostFtdcLegMultipleType,
    #[doc = "�ɽ����"]
    pub TradeGroupID: TThostFtdcTradeGroupIDType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSyncDeltaInvstPosCombDtlField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSyncDeltaInvstPosCombDtlField>(),
        248usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcSyncDeltaInvstPosCombDtlField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSyncDeltaInvstPosCombDtlField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcSyncDeltaInvstPosCombDtlField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosCombDtlField>())).TradingDay
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosCombDtlField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosCombDtlField>())).OpenDate as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosCombDtlField),
            "::",
            stringify!(OpenDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosCombDtlField>())).ExchangeID
                as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosCombDtlField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosCombDtlField>())).SettlementID
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosCombDtlField),
            "::",
            stringify!(SettlementID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosCombDtlField>())).BrokerID as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosCombDtlField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosCombDtlField>())).InvestorID
                as *const _ as usize
        },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosCombDtlField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosCombDtlField>())).ComTradeID
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosCombDtlField),
            "::",
            stringify!(ComTradeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosCombDtlField>())).TradeID as *const _
                as usize
        },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosCombDtlField),
            "::",
            stringify!(TradeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosCombDtlField>())).InstrumentID
                as *const _ as usize
        },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosCombDtlField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosCombDtlField>())).HedgeFlag
                as *const _ as usize
        },
        179usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosCombDtlField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosCombDtlField>())).Direction
                as *const _ as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosCombDtlField),
            "::",
            stringify!(Direction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosCombDtlField>())).TotalAmt as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosCombDtlField),
            "::",
            stringify!(TotalAmt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosCombDtlField>())).Margin as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosCombDtlField),
            "::",
            stringify!(Margin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosCombDtlField>())).ExchMargin
                as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosCombDtlField),
            "::",
            stringify!(ExchMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosCombDtlField>())).MarginRateByMoney
                as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosCombDtlField),
            "::",
            stringify!(MarginRateByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosCombDtlField>())).MarginRateByVolume
                as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosCombDtlField),
            "::",
            stringify!(MarginRateByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosCombDtlField>())).LegID as *const _
                as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosCombDtlField),
            "::",
            stringify!(LegID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosCombDtlField>())).LegMultiple
                as *const _ as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosCombDtlField),
            "::",
            stringify!(LegMultiple)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosCombDtlField>())).TradeGroupID
                as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosCombDtlField),
            "::",
            stringify!(TradeGroupID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosCombDtlField>())).ActionDirection
                as *const _ as usize
        },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosCombDtlField),
            "::",
            stringify!(ActionDirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstPosCombDtlField>())).SyncDeltaSequenceNo
                as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstPosCombDtlField),
            "::",
            stringify!(SyncDeltaSequenceNo)
        )
    );
}
impl Default for CThostFtdcSyncDeltaInvstPosCombDtlField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���ս���\u{5f7}ƽ�ʽ�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcSyncDeltaTradingAccountField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ϴ���Ѻ���"]
    pub PreMortgage: TThostFtdcMoneyType,
    #[doc = "�ϴ����ö��"]
    pub PreCredit: TThostFtdcMoneyType,
    #[doc = "�ϴδ���"]
    pub PreDeposit: TThostFtdcMoneyType,
    #[doc = "�ϴν���\u{5fc}����"]
    pub PreBalance: TThostFtdcMoneyType,
    #[doc = "�ϴ�ռ�õı�\u{5a4}��"]
    pub PreMargin: TThostFtdcMoneyType,
    #[doc = "��Ϣ����"]
    pub InterestBase: TThostFtdcMoneyType,
    #[doc = "��Ϣ����"]
    pub Interest: TThostFtdcMoneyType,
    #[doc = "�����"]
    pub Deposit: TThostFtdcMoneyType,
    #[doc = "������"]
    pub Withdraw: TThostFtdcMoneyType,
    #[doc = "����ı�\u{5a4}��"]
    pub FrozenMargin: TThostFtdcMoneyType,
    #[doc = "������ʽ�"]
    pub FrozenCash: TThostFtdcMoneyType,
    #[doc = "�����������"]
    pub FrozenCommission: TThostFtdcMoneyType,
    #[doc = "��ǰ��\u{5a4}���\u{736}�"]
    pub CurrMargin: TThostFtdcMoneyType,
    #[doc = "�ʽ���"]
    pub CashIn: TThostFtdcMoneyType,
    #[doc = "������"]
    pub Commission: TThostFtdcMoneyType,
    #[doc = "ƽ��ӯ��"]
    pub CloseProfit: TThostFtdcMoneyType,
    #[doc = "�\u{5b2}�ӯ��"]
    pub PositionProfit: TThostFtdcMoneyType,
    #[doc = "�ڻ�����\u{5fc}����"]
    pub Balance: TThostFtdcMoneyType,
    #[doc = "�����ʽ�"]
    pub Available: TThostFtdcMoneyType,
    #[doc = "��ȡ�ʽ�"]
    pub WithdrawQuota: TThostFtdcMoneyType,
    #[doc = "����\u{5fc}����"]
    pub Reserve: TThostFtdcMoneyType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "���ö��"]
    pub Credit: TThostFtdcMoneyType,
    #[doc = "��Ѻ���"]
    pub Mortgage: TThostFtdcMoneyType,
    #[doc = "��������\u{5a4}��"]
    pub ExchangeMargin: TThostFtdcMoneyType,
    #[doc = "Ͷ���\u{7fd}��\u{ec63}\u{5a4}��"]
    pub DeliveryMargin: TThostFtdcMoneyType,
    #[doc = "���������\u{ec63}\u{5a4}��"]
    pub ExchangeDeliveryMargin: TThostFtdcMoneyType,
    #[doc = "�����ڻ�����\u{5fc}����"]
    pub ReserveBalance: TThostFtdcMoneyType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "�ϴλ���������"]
    pub PreFundMortgageIn: TThostFtdcMoneyType,
    #[doc = "�ϴλ����ʳ����"]
    pub PreFundMortgageOut: TThostFtdcMoneyType,
    #[doc = "����������"]
    pub FundMortgageIn: TThostFtdcMoneyType,
    #[doc = "�����ʳ����"]
    pub FundMortgageOut: TThostFtdcMoneyType,
    #[doc = "������Ѻ���"]
    pub FundMortgageAvailable: TThostFtdcMoneyType,
    #[doc = "����Ѻ���ҽ��"]
    pub MortgageableFund: TThostFtdcMoneyType,
    #[doc = "�����Ʒռ�ñ�\u{5a4}��"]
    pub SpecProductMargin: TThostFtdcMoneyType,
    #[doc = "�����Ʒ���ᱣ\u{5a4}��"]
    pub SpecProductFrozenMargin: TThostFtdcMoneyType,
    #[doc = "�����Ʒ������"]
    pub SpecProductCommission: TThostFtdcMoneyType,
    #[doc = "�����Ʒ����������"]
    pub SpecProductFrozenCommission: TThostFtdcMoneyType,
    #[doc = "�����Ʒ�\u{5b2}�ӯ��"]
    pub SpecProductPositionProfit: TThostFtdcMoneyType,
    #[doc = "�����Ʒƽ��ӯ��"]
    pub SpecProductCloseProfit: TThostFtdcMoneyType,
    #[doc = "���ݳ\u{5b2}�ӯ���㷨����������Ʒ�\u{5b2}�ӯ��"]
    pub SpecProductPositionProfitByAlg: TThostFtdcMoneyType,
    #[doc = "�����Ʒ��������\u{5a4}��"]
    pub SpecProductExchangeMargin: TThostFtdcMoneyType,
    #[doc = "��ʱ���㶳����"]
    pub FrozenSwap: TThostFtdcMoneyType,
    #[doc = "ʣ�\u{efb}����"]
    pub RemainSwap: TThostFtdcMoneyType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSyncDeltaTradingAccountField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSyncDeltaTradingAccountField>(),
        400usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSyncDeltaTradingAccountField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).AccountID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(AccountID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).PreMortgage
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(PreMortgage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).PreCredit as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(PreCredit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).PreDeposit
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(PreDeposit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).PreBalance
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(PreBalance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).PreMargin as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(PreMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).InterestBase
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(InterestBase)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).Interest as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(Interest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).Deposit as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(Deposit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).Withdraw as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(Withdraw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).FrozenMargin
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(FrozenMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).FrozenCash
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(FrozenCash)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).FrozenCommission
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(FrozenCommission)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).CurrMargin
                as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(CurrMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).CashIn as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(CashIn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).Commission
                as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(Commission)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).CloseProfit
                as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(CloseProfit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).PositionProfit
                as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(PositionProfit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).Balance as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(Balance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).Available as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(Available)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).WithdrawQuota
                as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(WithdrawQuota)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).Reserve as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(Reserve)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).TradingDay
                as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).SettlementID
                as *const _ as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(SettlementID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).Credit as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(Credit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).Mortgage as *const _
                as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(Mortgage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).ExchangeMargin
                as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(ExchangeMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).DeliveryMargin
                as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(DeliveryMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>()))
                .ExchangeDeliveryMargin as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(ExchangeDeliveryMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).ReserveBalance
                as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(ReserveBalance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).CurrencyID
                as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(CurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).PreFundMortgageIn
                as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(PreFundMortgageIn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).PreFundMortgageOut
                as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(PreFundMortgageOut)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).FundMortgageIn
                as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(FundMortgageIn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).FundMortgageOut
                as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(FundMortgageOut)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).FundMortgageAvailable
                as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(FundMortgageAvailable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).MortgageableFund
                as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(MortgageableFund)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).SpecProductMargin
                as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(SpecProductMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>()))
                .SpecProductFrozenMargin as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(SpecProductFrozenMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).SpecProductCommission
                as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(SpecProductCommission)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>()))
                .SpecProductFrozenCommission as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(SpecProductFrozenCommission)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>()))
                .SpecProductPositionProfit as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(SpecProductPositionProfit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>()))
                .SpecProductCloseProfit as *const _ as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(SpecProductCloseProfit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>()))
                .SpecProductPositionProfitByAlg as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(SpecProductPositionProfitByAlg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>()))
                .SpecProductExchangeMargin as *const _ as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(SpecProductExchangeMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).FrozenSwap
                as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(FrozenSwap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).RemainSwap
                as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(RemainSwap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaTradingAccountField>())).SyncDeltaSequenceNo
                as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaTradingAccountField),
            "::",
            stringify!(SyncDeltaSequenceNo)
        )
    );
}
#[doc = "Ͷ���߷��ս����\u{731}�\u{5a4}��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcSyncDeltaInitInvstMarginField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "\u{5f7}ƽǰ�\u{737}��ձ�\u{5a4}��"]
    pub LastRiskTotalInvstMargin: TThostFtdcMoneyType,
    #[doc = "\u{5f7}ƽǰ�������\u{737}��ձ�\u{5a4}��"]
    pub LastRiskTotalExchMargin: TThostFtdcMoneyType,
    #[doc = "����\u{5f7}ƽƷ���\u{731}�\u{5a4}��"]
    pub ThisSyncInvstMargin: TThostFtdcMoneyType,
    #[doc = "����\u{5f7}ƽƷ�\u{5bd}������\u{731}�\u{5a4}��"]
    pub ThisSyncExchMargin: TThostFtdcMoneyType,
    #[doc = "����δ\u{5f7}ƽƷ���\u{731}�\u{5a4}��"]
    pub RemainRiskInvstMargin: TThostFtdcMoneyType,
    #[doc = "����δ\u{5f7}ƽƷ�\u{5bd}������\u{731}�\u{5a4}��"]
    pub RemainRiskExchMargin: TThostFtdcMoneyType,
    #[doc = "\u{5f7}ƽǰ�������Ʒ���ձ�\u{5a4}��"]
    pub LastRiskSpecTotalInvstMargin: TThostFtdcMoneyType,
    #[doc = "\u{5f7}ƽǰ�������Ʒ���������ձ�\u{5a4}��"]
    pub LastRiskSpecTotalExchMargin: TThostFtdcMoneyType,
    #[doc = "����\u{5f7}ƽƷ�������Ʒ�\u{731}�\u{5a4}��"]
    pub ThisSyncSpecInvstMargin: TThostFtdcMoneyType,
    #[doc = "����\u{5f7}ƽƷ�������Ʒ�������\u{731}�\u{5a4}��"]
    pub ThisSyncSpecExchMargin: TThostFtdcMoneyType,
    #[doc = "����δ\u{5f7}ƽƷ�������Ʒ�\u{731}�\u{5a4}��"]
    pub RemainRiskSpecInvstMargin: TThostFtdcMoneyType,
    #[doc = "����δ\u{5f7}ƽƷ�������Ʒ�������\u{731}�\u{5a4}��"]
    pub RemainRiskSpecExchMargin: TThostFtdcMoneyType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSyncDeltaInitInvstMarginField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSyncDeltaInitInvstMarginField>(),
        128usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcSyncDeltaInitInvstMarginField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSyncDeltaInitInvstMarginField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcSyncDeltaInitInvstMarginField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInitInvstMarginField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInitInvstMarginField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInitInvstMarginField>())).InvestorID
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInitInvstMarginField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInitInvstMarginField>()))
                .LastRiskTotalInvstMargin as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInitInvstMarginField),
            "::",
            stringify!(LastRiskTotalInvstMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInitInvstMarginField>()))
                .LastRiskTotalExchMargin as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInitInvstMarginField),
            "::",
            stringify!(LastRiskTotalExchMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInitInvstMarginField>())).ThisSyncInvstMargin
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInitInvstMarginField),
            "::",
            stringify!(ThisSyncInvstMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInitInvstMarginField>())).ThisSyncExchMargin
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInitInvstMarginField),
            "::",
            stringify!(ThisSyncExchMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInitInvstMarginField>()))
                .RemainRiskInvstMargin as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInitInvstMarginField),
            "::",
            stringify!(RemainRiskInvstMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInitInvstMarginField>())).RemainRiskExchMargin
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInitInvstMarginField),
            "::",
            stringify!(RemainRiskExchMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInitInvstMarginField>()))
                .LastRiskSpecTotalInvstMargin as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInitInvstMarginField),
            "::",
            stringify!(LastRiskSpecTotalInvstMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInitInvstMarginField>()))
                .LastRiskSpecTotalExchMargin as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInitInvstMarginField),
            "::",
            stringify!(LastRiskSpecTotalExchMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInitInvstMarginField>()))
                .ThisSyncSpecInvstMargin as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInitInvstMarginField),
            "::",
            stringify!(ThisSyncSpecInvstMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInitInvstMarginField>()))
                .ThisSyncSpecExchMargin as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInitInvstMarginField),
            "::",
            stringify!(ThisSyncSpecExchMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInitInvstMarginField>()))
                .RemainRiskSpecInvstMargin as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInitInvstMarginField),
            "::",
            stringify!(RemainRiskSpecInvstMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInitInvstMarginField>()))
                .RemainRiskSpecExchMargin as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInitInvstMarginField),
            "::",
            stringify!(RemainRiskSpecExchMargin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInitInvstMarginField>())).SyncDeltaSequenceNo
                as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInitInvstMarginField),
            "::",
            stringify!(SyncDeltaSequenceNo)
        )
    );
}
#[doc = "���ս���\u{5f7}ƽ������ȼ�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaDceCombInstrumentField {
    #[doc = "��Լ����"]
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "�ɽ����"]
    pub TradeGroupID: TThostFtdcTradeGroupIDType,
    #[doc = "Ͷ���ױ���־"]
    pub CombHedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "�������"]
    pub CombinationType: TThostFtdcDceCombinationTypeType,
    #[doc = "����"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcInstrumentIDType,
    #[doc = "��Ȩ��ϱ�\u{5a4}�����"]
    pub Xparameter: TThostFtdcDiscountRatioType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSyncDeltaDceCombInstrumentField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSyncDeltaDceCombInstrumentField>(),
        280usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcSyncDeltaDceCombInstrumentField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSyncDeltaDceCombInstrumentField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcSyncDeltaDceCombInstrumentField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDceCombInstrumentField>())).CombInstrumentID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDceCombInstrumentField),
            "::",
            stringify!(CombInstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDceCombInstrumentField>())).ExchangeID
                as *const _ as usize
        },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDceCombInstrumentField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDceCombInstrumentField>())).ExchangeInstID
                as *const _ as usize
        },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDceCombInstrumentField),
            "::",
            stringify!(ExchangeInstID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDceCombInstrumentField>())).TradeGroupID
                as *const _ as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDceCombInstrumentField),
            "::",
            stringify!(TradeGroupID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDceCombInstrumentField>())).CombHedgeFlag
                as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDceCombInstrumentField),
            "::",
            stringify!(CombHedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDceCombInstrumentField>())).CombinationType
                as *const _ as usize
        },
        177usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDceCombInstrumentField),
            "::",
            stringify!(CombinationType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDceCombInstrumentField>())).Direction
                as *const _ as usize
        },
        178usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDceCombInstrumentField),
            "::",
            stringify!(Direction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDceCombInstrumentField>())).ProductID
                as *const _ as usize
        },
        179usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDceCombInstrumentField),
            "::",
            stringify!(ProductID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDceCombInstrumentField>())).Xparameter
                as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDceCombInstrumentField),
            "::",
            stringify!(Xparameter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDceCombInstrumentField>())).ActionDirection
                as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDceCombInstrumentField),
            "::",
            stringify!(ActionDirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDceCombInstrumentField>()))
                .SyncDeltaSequenceNo as *const _ as usize
        },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDceCombInstrumentField),
            "::",
            stringify!(SyncDeltaSequenceNo)
        )
    );
}
impl Default for CThostFtdcSyncDeltaDceCombInstrumentField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���ս���\u{5f7}ƽͶ�����ڻ���\u{5a4}����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaInvstMarginRateField {
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��ͷ��\u{5a4}���"]
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��ͷ��\u{5a4}���"]
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "�Ƿ���Խ�������ȡ"]
    pub IsRelative: TThostFtdcBoolType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSyncDeltaInvstMarginRateField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSyncDeltaInvstMarginRateField>(),
        160usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcSyncDeltaInvstMarginRateField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSyncDeltaInvstMarginRateField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcSyncDeltaInvstMarginRateField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstMarginRateField>())).InstrumentID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstMarginRateField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstMarginRateField>())).InvestorRange
                as *const _ as usize
        },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstMarginRateField),
            "::",
            stringify!(InvestorRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstMarginRateField>())).BrokerID as *const _
                as usize
        },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstMarginRateField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstMarginRateField>())).InvestorID
                as *const _ as usize
        },
        93usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstMarginRateField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstMarginRateField>())).HedgeFlag
                as *const _ as usize
        },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstMarginRateField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstMarginRateField>()))
                .LongMarginRatioByMoney as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstMarginRateField),
            "::",
            stringify!(LongMarginRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstMarginRateField>()))
                .LongMarginRatioByVolume as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstMarginRateField),
            "::",
            stringify!(LongMarginRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstMarginRateField>()))
                .ShortMarginRatioByMoney as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstMarginRateField),
            "::",
            stringify!(ShortMarginRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstMarginRateField>()))
                .ShortMarginRatioByVolume as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstMarginRateField),
            "::",
            stringify!(ShortMarginRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstMarginRateField>())).IsRelative
                as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstMarginRateField),
            "::",
            stringify!(IsRelative)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstMarginRateField>())).ActionDirection
                as *const _ as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstMarginRateField),
            "::",
            stringify!(ActionDirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstMarginRateField>())).SyncDeltaSequenceNo
                as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstMarginRateField),
            "::",
            stringify!(SyncDeltaSequenceNo)
        )
    );
}
impl Default for CThostFtdcSyncDeltaInvstMarginRateField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���ս���\u{5f7}ƽ�������ڻ���\u{5a4}����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaExchMarginRateField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��ͷ��\u{5a4}���"]
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��ͷ��\u{5a4}���"]
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSyncDeltaExchMarginRateField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSyncDeltaExchMarginRateField>(),
        136usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcSyncDeltaExchMarginRateField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSyncDeltaExchMarginRateField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcSyncDeltaExchMarginRateField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaExchMarginRateField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaExchMarginRateField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaExchMarginRateField>())).InstrumentID
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaExchMarginRateField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaExchMarginRateField>())).HedgeFlag as *const _
                as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaExchMarginRateField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaExchMarginRateField>()))
                .LongMarginRatioByMoney as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaExchMarginRateField),
            "::",
            stringify!(LongMarginRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaExchMarginRateField>()))
                .LongMarginRatioByVolume as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaExchMarginRateField),
            "::",
            stringify!(LongMarginRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaExchMarginRateField>()))
                .ShortMarginRatioByMoney as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaExchMarginRateField),
            "::",
            stringify!(ShortMarginRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaExchMarginRateField>()))
                .ShortMarginRatioByVolume as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaExchMarginRateField),
            "::",
            stringify!(ShortMarginRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaExchMarginRateField>())).ActionDirection
                as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaExchMarginRateField),
            "::",
            stringify!(ActionDirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaExchMarginRateField>())).SyncDeltaSequenceNo
                as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaExchMarginRateField),
            "::",
            stringify!(SyncDeltaSequenceNo)
        )
    );
}
impl Default for CThostFtdcSyncDeltaExchMarginRateField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���ս���\u{5f7}ƽ�н��\u{5bb}���Ȩ��������\u{5a4}����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaOptExchMarginField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "Ͷ����ͷ��\u{5a4}�����ϵ��"]
    pub SShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "Ͷ����ͷ��\u{5a4}�����ϵ��"]
    pub SShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "��\u{5b5}��ͷ��\u{5a4}�����ϵ��"]
    pub HShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��\u{5b5}��ͷ��\u{5a4}�����ϵ��"]
    pub HShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "������ͷ��\u{5a4}�����ϵ��"]
    pub AShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "������ͷ��\u{5a4}�����ϵ��"]
    pub AShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "�����\u{33f}�ͷ��\u{5a4}�����ϵ��"]
    pub MShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "�����\u{33f}�ͷ��\u{5a4}�����ϵ��"]
    pub MShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSyncDeltaOptExchMarginField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSyncDeltaOptExchMarginField>(),
        168usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcSyncDeltaOptExchMarginField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSyncDeltaOptExchMarginField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcSyncDeltaOptExchMarginField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptExchMarginField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptExchMarginField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptExchMarginField>())).InstrumentID
                as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptExchMarginField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptExchMarginField>()))
                .SShortMarginRatioByMoney as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptExchMarginField),
            "::",
            stringify!(SShortMarginRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptExchMarginField>()))
                .SShortMarginRatioByVolume as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptExchMarginField),
            "::",
            stringify!(SShortMarginRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptExchMarginField>()))
                .HShortMarginRatioByMoney as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptExchMarginField),
            "::",
            stringify!(HShortMarginRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptExchMarginField>()))
                .HShortMarginRatioByVolume as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptExchMarginField),
            "::",
            stringify!(HShortMarginRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptExchMarginField>()))
                .AShortMarginRatioByMoney as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptExchMarginField),
            "::",
            stringify!(AShortMarginRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptExchMarginField>()))
                .AShortMarginRatioByVolume as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptExchMarginField),
            "::",
            stringify!(AShortMarginRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptExchMarginField>()))
                .MShortMarginRatioByMoney as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptExchMarginField),
            "::",
            stringify!(MShortMarginRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptExchMarginField>()))
                .MShortMarginRatioByVolume as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptExchMarginField),
            "::",
            stringify!(MShortMarginRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptExchMarginField>())).ActionDirection
                as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptExchMarginField),
            "::",
            stringify!(ActionDirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptExchMarginField>())).SyncDeltaSequenceNo
                as *const _ as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptExchMarginField),
            "::",
            stringify!(SyncDeltaSequenceNo)
        )
    );
}
impl Default for CThostFtdcSyncDeltaOptExchMarginField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���ս���\u{5f7}ƽ�н��\u{5bb}���ȨͶ���\u{7f1}�\u{5a4}����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaOptInvstMarginField {
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ����ͷ��\u{5a4}�����ϵ��"]
    pub SShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "Ͷ����ͷ��\u{5a4}�����ϵ��"]
    pub SShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "��\u{5b5}��ͷ��\u{5a4}�����ϵ��"]
    pub HShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��\u{5b5}��ͷ��\u{5a4}�����ϵ��"]
    pub HShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "������ͷ��\u{5a4}�����ϵ��"]
    pub AShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "������ͷ��\u{5a4}�����ϵ��"]
    pub AShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "�Ƿ���潻������ȡ"]
    pub IsRelative: TThostFtdcBoolType,
    #[doc = "�����\u{33f}�ͷ��\u{5a4}�����ϵ��"]
    pub MShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "�����\u{33f}�ͷ��\u{5a4}�����ϵ��"]
    pub MShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSyncDeltaOptInvstMarginField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSyncDeltaOptInvstMarginField>(),
        192usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcSyncDeltaOptInvstMarginField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSyncDeltaOptInvstMarginField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcSyncDeltaOptInvstMarginField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptInvstMarginField>())).InstrumentID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptInvstMarginField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptInvstMarginField>())).InvestorRange
                as *const _ as usize
        },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptInvstMarginField),
            "::",
            stringify!(InvestorRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptInvstMarginField>())).BrokerID as *const _
                as usize
        },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptInvstMarginField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptInvstMarginField>())).InvestorID
                as *const _ as usize
        },
        93usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptInvstMarginField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptInvstMarginField>()))
                .SShortMarginRatioByMoney as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptInvstMarginField),
            "::",
            stringify!(SShortMarginRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptInvstMarginField>()))
                .SShortMarginRatioByVolume as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptInvstMarginField),
            "::",
            stringify!(SShortMarginRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptInvstMarginField>()))
                .HShortMarginRatioByMoney as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptInvstMarginField),
            "::",
            stringify!(HShortMarginRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptInvstMarginField>()))
                .HShortMarginRatioByVolume as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptInvstMarginField),
            "::",
            stringify!(HShortMarginRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptInvstMarginField>()))
                .AShortMarginRatioByMoney as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptInvstMarginField),
            "::",
            stringify!(AShortMarginRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptInvstMarginField>()))
                .AShortMarginRatioByVolume as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptInvstMarginField),
            "::",
            stringify!(AShortMarginRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptInvstMarginField>())).IsRelative
                as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptInvstMarginField),
            "::",
            stringify!(IsRelative)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptInvstMarginField>()))
                .MShortMarginRatioByMoney as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptInvstMarginField),
            "::",
            stringify!(MShortMarginRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptInvstMarginField>()))
                .MShortMarginRatioByVolume as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptInvstMarginField),
            "::",
            stringify!(MShortMarginRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptInvstMarginField>())).ActionDirection
                as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptInvstMarginField),
            "::",
            stringify!(ActionDirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptInvstMarginField>())).SyncDeltaSequenceNo
                as *const _ as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptInvstMarginField),
            "::",
            stringify!(SyncDeltaSequenceNo)
        )
    );
}
impl Default for CThostFtdcSyncDeltaOptInvstMarginField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���ս���\u{5f7}ƽ��Ȩ��ĵ�����\u{5a4}����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaInvstMarginRateULField {
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��ͷ��\u{5a4}���"]
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��ͷ��\u{5a4}���"]
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSyncDeltaInvstMarginRateULField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSyncDeltaInvstMarginRateULField>(),
        152usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcSyncDeltaInvstMarginRateULField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSyncDeltaInvstMarginRateULField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcSyncDeltaInvstMarginRateULField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstMarginRateULField>())).InstrumentID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstMarginRateULField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstMarginRateULField>())).InvestorRange
                as *const _ as usize
        },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstMarginRateULField),
            "::",
            stringify!(InvestorRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstMarginRateULField>())).BrokerID
                as *const _ as usize
        },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstMarginRateULField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstMarginRateULField>())).InvestorID
                as *const _ as usize
        },
        93usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstMarginRateULField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstMarginRateULField>())).HedgeFlag
                as *const _ as usize
        },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstMarginRateULField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstMarginRateULField>()))
                .LongMarginRatioByMoney as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstMarginRateULField),
            "::",
            stringify!(LongMarginRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstMarginRateULField>()))
                .LongMarginRatioByVolume as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstMarginRateULField),
            "::",
            stringify!(LongMarginRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstMarginRateULField>()))
                .ShortMarginRatioByMoney as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstMarginRateULField),
            "::",
            stringify!(ShortMarginRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstMarginRateULField>()))
                .ShortMarginRatioByVolume as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstMarginRateULField),
            "::",
            stringify!(ShortMarginRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstMarginRateULField>())).ActionDirection
                as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstMarginRateULField),
            "::",
            stringify!(ActionDirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstMarginRateULField>()))
                .SyncDeltaSequenceNo as *const _ as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstMarginRateULField),
            "::",
            stringify!(SyncDeltaSequenceNo)
        )
    );
}
impl Default for CThostFtdcSyncDeltaInvstMarginRateULField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���ս���\u{5f7}ƽ��Ȩ��������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaOptInvstCommRateField {
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "������������"]
    pub OpenRatioByMoney: TThostFtdcRatioType,
    #[doc = "����������"]
    pub OpenRatioByVolume: TThostFtdcRatioType,
    #[doc = "ƽ����������"]
    pub CloseRatioByMoney: TThostFtdcRatioType,
    #[doc = "ƽ��������"]
    pub CloseRatioByVolume: TThostFtdcRatioType,
    #[doc = "ƽ����������"]
    pub CloseTodayRatioByMoney: TThostFtdcRatioType,
    #[doc = "ƽ��������"]
    pub CloseTodayRatioByVolume: TThostFtdcRatioType,
    #[doc = "\u{5b4}����������"]
    pub StrikeRatioByMoney: TThostFtdcRatioType,
    #[doc = "\u{5b4}��������"]
    pub StrikeRatioByVolume: TThostFtdcRatioType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSyncDeltaOptInvstCommRateField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSyncDeltaOptInvstCommRateField>(),
        184usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcSyncDeltaOptInvstCommRateField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSyncDeltaOptInvstCommRateField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcSyncDeltaOptInvstCommRateField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptInvstCommRateField>())).InstrumentID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptInvstCommRateField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptInvstCommRateField>())).InvestorRange
                as *const _ as usize
        },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptInvstCommRateField),
            "::",
            stringify!(InvestorRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptInvstCommRateField>())).BrokerID
                as *const _ as usize
        },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptInvstCommRateField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptInvstCommRateField>())).InvestorID
                as *const _ as usize
        },
        93usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptInvstCommRateField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptInvstCommRateField>())).OpenRatioByMoney
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptInvstCommRateField),
            "::",
            stringify!(OpenRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptInvstCommRateField>())).OpenRatioByVolume
                as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptInvstCommRateField),
            "::",
            stringify!(OpenRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptInvstCommRateField>())).CloseRatioByMoney
                as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptInvstCommRateField),
            "::",
            stringify!(CloseRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptInvstCommRateField>())).CloseRatioByVolume
                as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptInvstCommRateField),
            "::",
            stringify!(CloseRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptInvstCommRateField>()))
                .CloseTodayRatioByMoney as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptInvstCommRateField),
            "::",
            stringify!(CloseTodayRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptInvstCommRateField>()))
                .CloseTodayRatioByVolume as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptInvstCommRateField),
            "::",
            stringify!(CloseTodayRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptInvstCommRateField>())).StrikeRatioByMoney
                as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptInvstCommRateField),
            "::",
            stringify!(StrikeRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptInvstCommRateField>())).StrikeRatioByVolume
                as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptInvstCommRateField),
            "::",
            stringify!(StrikeRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptInvstCommRateField>())).ActionDirection
                as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptInvstCommRateField),
            "::",
            stringify!(ActionDirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaOptInvstCommRateField>())).SyncDeltaSequenceNo
                as *const _ as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaOptInvstCommRateField),
            "::",
            stringify!(SyncDeltaSequenceNo)
        )
    );
}
impl Default for CThostFtdcSyncDeltaOptInvstCommRateField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���ս���\u{5f7}ƽ�ڻ���������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaInvstCommRateField {
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "������������"]
    pub OpenRatioByMoney: TThostFtdcRatioType,
    #[doc = "����������"]
    pub OpenRatioByVolume: TThostFtdcRatioType,
    #[doc = "ƽ����������"]
    pub CloseRatioByMoney: TThostFtdcRatioType,
    #[doc = "ƽ��������"]
    pub CloseRatioByVolume: TThostFtdcRatioType,
    #[doc = "ƽ����������"]
    pub CloseTodayRatioByMoney: TThostFtdcRatioType,
    #[doc = "ƽ��������"]
    pub CloseTodayRatioByVolume: TThostFtdcRatioType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSyncDeltaInvstCommRateField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSyncDeltaInvstCommRateField>(),
        168usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcSyncDeltaInvstCommRateField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSyncDeltaInvstCommRateField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcSyncDeltaInvstCommRateField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstCommRateField>())).InstrumentID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstCommRateField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstCommRateField>())).InvestorRange
                as *const _ as usize
        },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstCommRateField),
            "::",
            stringify!(InvestorRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstCommRateField>())).BrokerID as *const _
                as usize
        },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstCommRateField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstCommRateField>())).InvestorID as *const _
                as usize
        },
        93usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstCommRateField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstCommRateField>())).OpenRatioByMoney
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstCommRateField),
            "::",
            stringify!(OpenRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstCommRateField>())).OpenRatioByVolume
                as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstCommRateField),
            "::",
            stringify!(OpenRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstCommRateField>())).CloseRatioByMoney
                as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstCommRateField),
            "::",
            stringify!(CloseRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstCommRateField>())).CloseRatioByVolume
                as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstCommRateField),
            "::",
            stringify!(CloseRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstCommRateField>())).CloseTodayRatioByMoney
                as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstCommRateField),
            "::",
            stringify!(CloseTodayRatioByMoney)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstCommRateField>()))
                .CloseTodayRatioByVolume as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstCommRateField),
            "::",
            stringify!(CloseTodayRatioByVolume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstCommRateField>())).ActionDirection
                as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstCommRateField),
            "::",
            stringify!(ActionDirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaInvstCommRateField>())).SyncDeltaSequenceNo
                as *const _ as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaInvstCommRateField),
            "::",
            stringify!(SyncDeltaSequenceNo)
        )
    );
}
impl Default for CThostFtdcSyncDeltaInvstCommRateField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���ս���\u{5f7}ƽ�������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaProductExchRateField {
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcInstrumentIDType,
    #[doc = "���۱�������"]
    pub QuoteCurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "����"]
    pub ExchangeRate: TThostFtdcExchangeRateType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSyncDeltaProductExchRateField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSyncDeltaProductExchRateField>(),
        104usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcSyncDeltaProductExchRateField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSyncDeltaProductExchRateField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcSyncDeltaProductExchRateField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaProductExchRateField>())).ProductID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaProductExchRateField),
            "::",
            stringify!(ProductID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaProductExchRateField>())).QuoteCurrencyID
                as *const _ as usize
        },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaProductExchRateField),
            "::",
            stringify!(QuoteCurrencyID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaProductExchRateField>())).ExchangeRate
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaProductExchRateField),
            "::",
            stringify!(ExchangeRate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaProductExchRateField>())).ActionDirection
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaProductExchRateField),
            "::",
            stringify!(ActionDirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaProductExchRateField>())).SyncDeltaSequenceNo
                as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaProductExchRateField),
            "::",
            stringify!(SyncDeltaSequenceNo)
        )
    );
}
impl Default for CThostFtdcSyncDeltaProductExchRateField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���ս���\u{5f7}ƽ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaDepthMarketDataField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "���¼�"]
    pub LastPrice: TThostFtdcPriceType,
    #[doc = "�ϴν����"]
    pub PreSettlementPrice: TThostFtdcPriceType,
    #[doc = "������"]
    pub PreClosePrice: TThostFtdcPriceType,
    #[doc = "��\u{5b2}���"]
    pub PreOpenInterest: TThostFtdcLargeVolumeType,
    #[doc = "����"]
    pub OpenPrice: TThostFtdcPriceType,
    #[doc = "��\u{7fc}�"]
    pub HighestPrice: TThostFtdcPriceType,
    #[doc = "��ͼ�"]
    pub LowestPrice: TThostFtdcPriceType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "�ɽ����"]
    pub Turnover: TThostFtdcMoneyType,
    #[doc = "�\u{5b2}���"]
    pub OpenInterest: TThostFtdcLargeVolumeType,
    #[doc = "������"]
    pub ClosePrice: TThostFtdcPriceType,
    #[doc = "���ν����"]
    pub SettlementPrice: TThostFtdcPriceType,
    #[doc = "��\u{363}���"]
    pub UpperLimitPrice: TThostFtdcPriceType,
    #[doc = "��\u{363}���"]
    pub LowerLimitPrice: TThostFtdcPriceType,
    #[doc = "����ʵ��"]
    pub PreDelta: TThostFtdcRatioType,
    #[doc = "����ʵ��"]
    pub CurrDelta: TThostFtdcRatioType,
    #[doc = "����\u{7b8}�ʱ��"]
    pub UpdateTime: TThostFtdcTimeType,
    #[doc = "����\u{7b8}ĺ���"]
    pub UpdateMillisec: TThostFtdcMillisecType,
    #[doc = "�����һ"]
    pub BidPrice1: TThostFtdcPriceType,
    #[doc = "������һ"]
    pub BidVolume1: TThostFtdcVolumeType,
    #[doc = "������һ"]
    pub AskPrice1: TThostFtdcPriceType,
    #[doc = "������һ"]
    pub AskVolume1: TThostFtdcVolumeType,
    #[doc = "����۶�"]
    pub BidPrice2: TThostFtdcPriceType,
    #[doc = "��������"]
    pub BidVolume2: TThostFtdcVolumeType,
    #[doc = "�����۶�"]
    pub AskPrice2: TThostFtdcPriceType,
    #[doc = "��������"]
    pub AskVolume2: TThostFtdcVolumeType,
    #[doc = "�������"]
    pub BidPrice3: TThostFtdcPriceType,
    #[doc = "��������"]
    pub BidVolume3: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub AskPrice3: TThostFtdcPriceType,
    #[doc = "��������"]
    pub AskVolume3: TThostFtdcVolumeType,
    #[doc = "�������"]
    pub BidPrice4: TThostFtdcPriceType,
    #[doc = "��������"]
    pub BidVolume4: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub AskPrice4: TThostFtdcPriceType,
    #[doc = "��������"]
    pub AskVolume4: TThostFtdcVolumeType,
    #[doc = "�������"]
    pub BidPrice5: TThostFtdcPriceType,
    #[doc = "��������"]
    pub BidVolume5: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub AskPrice5: TThostFtdcPriceType,
    #[doc = "��������"]
    pub AskVolume5: TThostFtdcVolumeType,
    #[doc = "���վ���"]
    pub AveragePrice: TThostFtdcPriceType,
    #[doc = "ҵ������"]
    pub ActionDay: TThostFtdcDateType,
    #[doc = "�ϴ���"]
    pub BandingUpperPrice: TThostFtdcPriceType,
    #[doc = "�´���"]
    pub BandingLowerPrice: TThostFtdcPriceType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSyncDeltaDepthMarketDataField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSyncDeltaDepthMarketDataField>(),
        536usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSyncDeltaDepthMarketDataField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).TradingDay
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).InstrumentID
                as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).ExchangeID
                as *const _ as usize
        },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).ExchangeInstID
                as *const _ as usize
        },
        99usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(ExchangeInstID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).LastPrice
                as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(LastPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).PreSettlementPrice
                as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(PreSettlementPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).PreClosePrice
                as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(PreClosePrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).PreOpenInterest
                as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(PreOpenInterest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).OpenPrice
                as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(OpenPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).HighestPrice
                as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(HighestPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).LowestPrice
                as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(LowestPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).Volume as *const _
                as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(Volume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).Turnover as *const _
                as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(Turnover)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).OpenInterest
                as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(OpenInterest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).ClosePrice
                as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(ClosePrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).SettlementPrice
                as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(SettlementPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).UpperLimitPrice
                as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(UpperLimitPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).LowerLimitPrice
                as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(LowerLimitPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).PreDelta as *const _
                as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(PreDelta)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).CurrDelta
                as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(CurrDelta)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).UpdateTime
                as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(UpdateTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).UpdateMillisec
                as *const _ as usize
        },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(UpdateMillisec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).BidPrice1
                as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(BidPrice1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).BidVolume1
                as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(BidVolume1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).AskPrice1
                as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(AskPrice1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).AskVolume1
                as *const _ as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(AskVolume1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).BidPrice2
                as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(BidPrice2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).BidVolume2
                as *const _ as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(BidVolume2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).AskPrice2
                as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(AskPrice2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).AskVolume2
                as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(AskVolume2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).BidPrice3
                as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(BidPrice3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).BidVolume3
                as *const _ as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(BidVolume3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).AskPrice3
                as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(AskPrice3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).AskVolume3
                as *const _ as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(AskVolume3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).BidPrice4
                as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(BidPrice4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).BidVolume4
                as *const _ as usize
        },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(BidVolume4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).AskPrice4
                as *const _ as usize
        },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(AskPrice4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).AskVolume4
                as *const _ as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(AskVolume4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).BidPrice5
                as *const _ as usize
        },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(BidPrice5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).BidVolume5
                as *const _ as usize
        },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(BidVolume5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).AskPrice5
                as *const _ as usize
        },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(AskPrice5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).AskVolume5
                as *const _ as usize
        },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(AskVolume5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).AveragePrice
                as *const _ as usize
        },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(AveragePrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).ActionDay
                as *const _ as usize
        },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(ActionDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).BandingUpperPrice
                as *const _ as usize
        },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(BandingUpperPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).BandingLowerPrice
                as *const _ as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(BandingLowerPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).ActionDirection
                as *const _ as usize
        },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(ActionDirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaDepthMarketDataField>())).SyncDeltaSequenceNo
                as *const _ as usize
        },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaDepthMarketDataField),
            "::",
            stringify!(SyncDeltaSequenceNo)
        )
    );
}
impl Default for CThostFtdcSyncDeltaDepthMarketDataField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���ս���\u{5f7}ƽ�\u{5bb}�\u{5b8}��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaIndexPriceField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "\u{5b8}���\u{5bb}����\u{33c}�"]
    pub ClosePrice: TThostFtdcPriceType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSyncDeltaIndexPriceField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSyncDeltaIndexPriceField>(),
        112usize,
        concat!("Size of: ", stringify!(CThostFtdcSyncDeltaIndexPriceField))
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSyncDeltaIndexPriceField>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcSyncDeltaIndexPriceField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaIndexPriceField>())).BrokerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaIndexPriceField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaIndexPriceField>())).InstrumentID as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaIndexPriceField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaIndexPriceField>())).ClosePrice as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaIndexPriceField),
            "::",
            stringify!(ClosePrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaIndexPriceField>())).ActionDirection
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaIndexPriceField),
            "::",
            stringify!(ActionDirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaIndexPriceField>())).SyncDeltaSequenceNo
                as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaIndexPriceField),
            "::",
            stringify!(SyncDeltaSequenceNo)
        )
    );
}
impl Default for CThostFtdcSyncDeltaIndexPriceField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "���ս���\u{5f7}ƽ�\u{5b5}��۵�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaEWarrantOffsetField {
    #[doc = "��������"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[test]
fn bindgen_test_layout_CThostFtdcSyncDeltaEWarrantOffsetField() {
    assert_eq!(
        ::std::mem::size_of::<CThostFtdcSyncDeltaEWarrantOffsetField>(),
        140usize,
        concat!(
            "Size of: ",
            stringify!(CThostFtdcSyncDeltaEWarrantOffsetField)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CThostFtdcSyncDeltaEWarrantOffsetField>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(CThostFtdcSyncDeltaEWarrantOffsetField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaEWarrantOffsetField>())).TradingDay
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaEWarrantOffsetField),
            "::",
            stringify!(TradingDay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaEWarrantOffsetField>())).BrokerID as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaEWarrantOffsetField),
            "::",
            stringify!(BrokerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaEWarrantOffsetField>())).InvestorID
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaEWarrantOffsetField),
            "::",
            stringify!(InvestorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaEWarrantOffsetField>())).ExchangeID
                as *const _ as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaEWarrantOffsetField),
            "::",
            stringify!(ExchangeID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaEWarrantOffsetField>())).InstrumentID
                as *const _ as usize
        },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaEWarrantOffsetField),
            "::",
            stringify!(InstrumentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaEWarrantOffsetField>())).Direction as *const _
                as usize
        },
        123usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaEWarrantOffsetField),
            "::",
            stringify!(Direction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaEWarrantOffsetField>())).HedgeFlag as *const _
                as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaEWarrantOffsetField),
            "::",
            stringify!(HedgeFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaEWarrantOffsetField>())).Volume as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaEWarrantOffsetField),
            "::",
            stringify!(Volume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaEWarrantOffsetField>())).ActionDirection
                as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaEWarrantOffsetField),
            "::",
            stringify!(ActionDirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CThostFtdcSyncDeltaEWarrantOffsetField>())).SyncDeltaSequenceNo
                as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CThostFtdcSyncDeltaEWarrantOffsetField),
            "::",
            stringify!(SyncDeltaSequenceNo)
        )
    );
}
impl Default for CThostFtdcSyncDeltaEWarrantOffsetField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
